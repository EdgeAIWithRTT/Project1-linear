
DNN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7e8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  0800da88  0800da88  0001da88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea68  0800ea68  000205fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea68  0800ea68  0001ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea70  0800ea70  000205fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea70  0800ea70  0001ea70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea74  0800ea74  0001ea74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000053c  24000000  0800ea78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400053c  0800efb4  0002053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400059c  0800f014  0002059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006c4  240005fc  0800f074  000205fc  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  24000cc0  0800f074  00020cc0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000205fc  2**0
                  CONTENTS, READONLY
 14 .debug_line   00012935  00000000  00000000  0002062a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   000265d1  00000000  00000000  00032f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00004038  00000000  00000000  00059530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001280  00000000  00000000  0005d568  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016b451  00000000  00000000  0005e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 000010f8  00000000  00000000  001c9c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0003ad95  00000000  00000000  001cad38  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00205acd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005924  00000000  00000000  00205b48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240005fc 	.word	0x240005fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800da70 	.word	0x0800da70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000600 	.word	0x24000600
 80002dc:	0800da70 	.word	0x0800da70

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000694:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000696:	e003      	b.n	80006a0 <LoopCopyDataInit>

08000698 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800069a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800069c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800069e:	3104      	adds	r1, #4

080006a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006a8:	d3f6      	bcc.n	8000698 <CopyDataInit>
  ldr  r2, =_sbss
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006ac:	e002      	b.n	80006b4 <LoopFillZerobss>

080006ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006b0:	f842 3b04 	str.w	r3, [r2], #4

080006b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006b8:	d3f9      	bcc.n	80006ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006ba:	f002 f999 	bl	80029f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006be:	f00a ffbb 	bl	800b638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c2:	f001 fb49 	bl	8001d58 <main>
  bx  lr    
 80006c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006c8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80006cc:	0800ea78 	.word	0x0800ea78
  ldr  r0, =_sdata
 80006d0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80006d4:	2400053c 	.word	0x2400053c
  ldr  r2, =_sbss
 80006d8:	240005fc 	.word	0x240005fc
  ldr  r3, = _ebss
 80006dc:	24000cc0 	.word	0x24000cc0

080006e0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC3_IRQHandler>
	...

080006e4 <crcIpInit>:
 * Device-related functions
 * -----------------------------------------------------------------------------
 */

__STATIC_INLINE void crcIpInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
#if defined(STM32H7)
    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();  
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <crcIpInit+0x30>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f0:	4a08      	ldr	r2, [pc, #32]	; (8000714 <crcIpInit+0x30>)
 80006f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <crcIpInit+0x30>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
        printf("W: CRC IP clock is NOT enabled\r\n");

    /* By default the CRC IP clock is enabled */
    __HAL_RCC_CRC_CLK_ENABLE();
#endif
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	58024400 	.word	0x58024400

08000718 <dwtIpInit>:

__STATIC_INLINE void dwtIpInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <dwtIpInit+0x2c>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <dwtIpInit+0x2c>)
 8000722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000726:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
    DWT->LAR = 0xC5ACCE55;
#endif

    DWT->CYCCNT = 0;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <dwtIpInit+0x30>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <dwtIpInit+0x30>)
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	4905      	ldr	r1, [pc, #20]	; (8000748 <dwtIpInit+0x30>)
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <dwtIpInit+0x34>)
 8000736:	4313      	orrs	r3, r2
 8000738:	600b      	str	r3, [r1, #0]

}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000edf0 	.word	0xe000edf0
 8000748:	e0001000 	.word	0xe0001000
 800074c:	00020001 	.word	0x00020001

08000750 <dwtReset>:

__STATIC_INLINE void dwtReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
    DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <dwtReset+0x14>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e0001000 	.word	0xe0001000

08000768 <dwtGetCycles>:

__STATIC_INLINE uint32_t dwtGetCycles(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <dwtGetCycles+0x14>)
 800076e:	685b      	ldr	r3, [r3, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e0001000 	.word	0xe0001000

08000780 <cyclesCounterInit>:

__STATIC_INLINE void cyclesCounterInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
    struct dwtTime t;
    dwtCyclesToTime(UINT32_MAX, &t);
 8000786:	463b      	mov	r3, r7
 8000788:	461a      	mov	r2, r3
 800078a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800078e:	f04f 0100 	mov.w	r1, #0
 8000792:	f000 f81a 	bl	80007ca <dwtCyclesToTime>
    cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800079c:	fb02 f203 	mul.w	r2, r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <cyclesCounterInit+0x38>)
 80007a8:	601a      	str	r2, [r3, #0]
    dwtIpInit();
 80007aa:	f7ff ffb5 	bl	8000718 <dwtIpInit>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	24000618 	.word	0x24000618

080007bc <systemCoreClock>:
#endif
}


__STATIC_INLINE uint32_t systemCoreClock(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
#if !defined(STM32H7) 
    return HAL_RCC_GetHCLKFreq();
#else
    return HAL_RCC_GetSysClockFreq();
 80007c0:	f004 f932 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80007c4:	4603      	mov	r3, r0
#endif
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	bd80      	pop	{r7, pc}

080007ca <dwtCyclesToTime>:

static int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80007ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007ce:	b08d      	sub	sp, #52	; 0x34
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
    if (!t)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <dwtCyclesToTime+0x1a>
        return -1;
 80007de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007e2:	e120      	b.n	8000a26 <dwtCyclesToTime+0x25c>
    uint32_t fcpu = systemCoreClock();
 80007e4:	f7ff ffea 	bl	80007bc <systemCoreClock>
 80007e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint64_t s  = clks / fcpu;
 80007ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ec:	f04f 0400 	mov.w	r4, #0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4623      	mov	r3, r4
 80007f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007f8:	f7ff fdca 	bl	8000390 <__aeabi_uldivmod>
 80007fc:	4603      	mov	r3, r0
 80007fe:	460c      	mov	r4, r1
 8000800:	e9c7 3408 	strd	r3, r4, [r7, #32]
    uint64_t ms = (clks * 1000) / fcpu;
 8000804:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000808:	462b      	mov	r3, r5
 800080a:	4634      	mov	r4, r6
 800080c:	f04f 0100 	mov.w	r1, #0
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	0162      	lsls	r2, r4, #5
 8000816:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800081a:	0159      	lsls	r1, r3, #5
 800081c:	460b      	mov	r3, r1
 800081e:	4614      	mov	r4, r2
 8000820:	1b5b      	subs	r3, r3, r5
 8000822:	eb64 0406 	sbc.w	r4, r4, r6
 8000826:	f04f 0100 	mov.w	r1, #0
 800082a:	f04f 0200 	mov.w	r2, #0
 800082e:	00a2      	lsls	r2, r4, #2
 8000830:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000834:	0099      	lsls	r1, r3, #2
 8000836:	460b      	mov	r3, r1
 8000838:	4614      	mov	r4, r2
 800083a:	195b      	adds	r3, r3, r5
 800083c:	eb44 0406 	adc.w	r4, r4, r6
 8000840:	f04f 0100 	mov.w	r1, #0
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	00e2      	lsls	r2, r4, #3
 800084a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800084e:	00d9      	lsls	r1, r3, #3
 8000850:	460b      	mov	r3, r1
 8000852:	4614      	mov	r4, r2
 8000854:	4618      	mov	r0, r3
 8000856:	4621      	mov	r1, r4
 8000858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085a:	f04f 0400 	mov.w	r4, #0
 800085e:	461a      	mov	r2, r3
 8000860:	4623      	mov	r3, r4
 8000862:	f7ff fd95 	bl	8000390 <__aeabi_uldivmod>
 8000866:	4603      	mov	r3, r0
 8000868:	460c      	mov	r4, r1
 800086a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    uint64_t us = (clks * 1000 * 1000) / fcpu;
 800086e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8000872:	462b      	mov	r3, r5
 8000874:	4634      	mov	r4, r6
 8000876:	f04f 0100 	mov.w	r1, #0
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	0162      	lsls	r2, r4, #5
 8000880:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000884:	0159      	lsls	r1, r3, #5
 8000886:	460b      	mov	r3, r1
 8000888:	4614      	mov	r4, r2
 800088a:	1b5b      	subs	r3, r3, r5
 800088c:	eb64 0406 	sbc.w	r4, r4, r6
 8000890:	f04f 0100 	mov.w	r1, #0
 8000894:	f04f 0200 	mov.w	r2, #0
 8000898:	0262      	lsls	r2, r4, #9
 800089a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800089e:	0259      	lsls	r1, r3, #9
 80008a0:	460b      	mov	r3, r1
 80008a2:	4614      	mov	r4, r2
 80008a4:	195b      	adds	r3, r3, r5
 80008a6:	eb44 0406 	adc.w	r4, r4, r6
 80008aa:	f04f 0100 	mov.w	r1, #0
 80008ae:	f04f 0200 	mov.w	r2, #0
 80008b2:	01a2      	lsls	r2, r4, #6
 80008b4:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 80008b8:	0199      	lsls	r1, r3, #6
 80008ba:	1ac9      	subs	r1, r1, r3
 80008bc:	eb62 0204 	sbc.w	r2, r2, r4
 80008c0:	194b      	adds	r3, r1, r5
 80008c2:	eb42 0406 	adc.w	r4, r2, r6
 80008c6:	4618      	mov	r0, r3
 80008c8:	4621      	mov	r1, r4
 80008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008cc:	f04f 0400 	mov.w	r4, #0
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	f7ff fd5c 	bl	8000390 <__aeabi_uldivmod>
 80008d8:	4603      	mov	r3, r0
 80008da:	460c      	mov	r4, r1
 80008dc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ms -= (s * 1000);
 80008e0:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80008e4:	462b      	mov	r3, r5
 80008e6:	4634      	mov	r4, r6
 80008e8:	f04f 0100 	mov.w	r1, #0
 80008ec:	f04f 0200 	mov.w	r2, #0
 80008f0:	0162      	lsls	r2, r4, #5
 80008f2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80008f6:	0159      	lsls	r1, r3, #5
 80008f8:	460b      	mov	r3, r1
 80008fa:	4614      	mov	r4, r2
 80008fc:	1b5b      	subs	r3, r3, r5
 80008fe:	eb64 0406 	sbc.w	r4, r4, r6
 8000902:	f04f 0100 	mov.w	r1, #0
 8000906:	f04f 0200 	mov.w	r2, #0
 800090a:	00a2      	lsls	r2, r4, #2
 800090c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000910:	0099      	lsls	r1, r3, #2
 8000912:	460b      	mov	r3, r1
 8000914:	4614      	mov	r4, r2
 8000916:	195b      	adds	r3, r3, r5
 8000918:	eb44 0406 	adc.w	r4, r4, r6
 800091c:	f04f 0100 	mov.w	r1, #0
 8000920:	f04f 0200 	mov.w	r2, #0
 8000924:	00e2      	lsls	r2, r4, #3
 8000926:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800092a:	00d9      	lsls	r1, r3, #3
 800092c:	460b      	mov	r3, r1
 800092e:	4614      	mov	r4, r2
 8000930:	4619      	mov	r1, r3
 8000932:	4622      	mov	r2, r4
 8000934:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000938:	1a5b      	subs	r3, r3, r1
 800093a:	eb64 0402 	sbc.w	r4, r4, r2
 800093e:	461d      	mov	r5, r3
 8000940:	4626      	mov	r6, r4
 8000942:	e9c7 5606 	strd	r5, r6, [r7, #24]
    us -= (ms * 1000 + s * 1000000);
 8000946:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 800094a:	462b      	mov	r3, r5
 800094c:	4634      	mov	r4, r6
 800094e:	f04f 0100 	mov.w	r1, #0
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	0162      	lsls	r2, r4, #5
 8000958:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800095c:	0159      	lsls	r1, r3, #5
 800095e:	460b      	mov	r3, r1
 8000960:	4614      	mov	r4, r2
 8000962:	1b5b      	subs	r3, r3, r5
 8000964:	eb64 0406 	sbc.w	r4, r4, r6
 8000968:	f04f 0100 	mov.w	r1, #0
 800096c:	f04f 0200 	mov.w	r2, #0
 8000970:	00a2      	lsls	r2, r4, #2
 8000972:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8000976:	0099      	lsls	r1, r3, #2
 8000978:	460b      	mov	r3, r1
 800097a:	4614      	mov	r4, r2
 800097c:	195b      	adds	r3, r3, r5
 800097e:	eb44 0406 	adc.w	r4, r4, r6
 8000982:	f04f 0100 	mov.w	r1, #0
 8000986:	f04f 0200 	mov.w	r2, #0
 800098a:	00e2      	lsls	r2, r4, #3
 800098c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8000990:	00d9      	lsls	r1, r3, #3
 8000992:	460b      	mov	r3, r1
 8000994:	4614      	mov	r4, r2
 8000996:	4698      	mov	r8, r3
 8000998:	46a1      	mov	r9, r4
 800099a:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800099e:	462b      	mov	r3, r5
 80009a0:	4634      	mov	r4, r6
 80009a2:	f04f 0100 	mov.w	r1, #0
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	0162      	lsls	r2, r4, #5
 80009ac:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80009b0:	0159      	lsls	r1, r3, #5
 80009b2:	460b      	mov	r3, r1
 80009b4:	4614      	mov	r4, r2
 80009b6:	1b5b      	subs	r3, r3, r5
 80009b8:	eb64 0406 	sbc.w	r4, r4, r6
 80009bc:	f04f 0100 	mov.w	r1, #0
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	0262      	lsls	r2, r4, #9
 80009c6:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80009ca:	0259      	lsls	r1, r3, #9
 80009cc:	460b      	mov	r3, r1
 80009ce:	4614      	mov	r4, r2
 80009d0:	195b      	adds	r3, r3, r5
 80009d2:	eb44 0406 	adc.w	r4, r4, r6
 80009d6:	f04f 0100 	mov.w	r1, #0
 80009da:	f04f 0200 	mov.w	r2, #0
 80009de:	01a2      	lsls	r2, r4, #6
 80009e0:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 80009e4:	0199      	lsls	r1, r3, #6
 80009e6:	1ac9      	subs	r1, r1, r3
 80009e8:	eb62 0204 	sbc.w	r2, r2, r4
 80009ec:	194b      	adds	r3, r1, r5
 80009ee:	eb42 0406 	adc.w	r4, r2, r6
 80009f2:	eb13 0508 	adds.w	r5, r3, r8
 80009f6:	eb44 0609 	adc.w	r6, r4, r9
 80009fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80009fe:	460b      	mov	r3, r1
 8000a00:	4614      	mov	r4, r2
 8000a02:	1b5b      	subs	r3, r3, r5
 8000a04:	eb64 0406 	sbc.w	r4, r4, r6
 8000a08:	e9c7 3404 	strd	r3, r4, [r7, #16]
    t->fcpu = fcpu;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a10:	601a      	str	r2, [r3, #0]
    t->s = s;
 8000a12:	6a3a      	ldr	r2, [r7, #32]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	605a      	str	r2, [r3, #4]
    t->ms = ms;
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
    t->us = us;
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	60da      	str	r2, [r3, #12]
    return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3734      	adds	r7, #52	; 0x34
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a30 <devIdToStr>:

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
    /* DEV_ID field from DBGMCU register */
    const char *str;
    switch (dev_id) {
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8000a40:	2b5d      	cmp	r3, #93	; 0x5d
 8000a42:	f200 80e6 	bhi.w	8000c12 <devIdToStr+0x1e2>
 8000a46:	a201      	add	r2, pc, #4	; (adr r2, 8000a4c <devIdToStr+0x1c>)
 8000a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4c:	08000bf5 	.word	0x08000bf5
 8000a50:	08000c13 	.word	0x08000c13
 8000a54:	08000c13 	.word	0x08000c13
 8000a58:	08000c13 	.word	0x08000c13
 8000a5c:	08000c13 	.word	0x08000c13
 8000a60:	08000c13 	.word	0x08000c13
 8000a64:	08000c13 	.word	0x08000c13
 8000a68:	08000c13 	.word	0x08000c13
 8000a6c:	08000c13 	.word	0x08000c13
 8000a70:	08000c13 	.word	0x08000c13
 8000a74:	08000c13 	.word	0x08000c13
 8000a78:	08000c13 	.word	0x08000c13
 8000a7c:	08000c13 	.word	0x08000c13
 8000a80:	08000bc5 	.word	0x08000bc5
 8000a84:	08000bdd 	.word	0x08000bdd
 8000a88:	08000c13 	.word	0x08000c13
 8000a8c:	08000c13 	.word	0x08000c13
 8000a90:	08000c13 	.word	0x08000c13
 8000a94:	08000c13 	.word	0x08000c13
 8000a98:	08000c13 	.word	0x08000c13
 8000a9c:	08000c13 	.word	0x08000c13
 8000aa0:	08000c13 	.word	0x08000c13
 8000aa4:	08000c13 	.word	0x08000c13
 8000aa8:	08000c13 	.word	0x08000c13
 8000aac:	08000c13 	.word	0x08000c13
 8000ab0:	08000c13 	.word	0x08000c13
 8000ab4:	08000c13 	.word	0x08000c13
 8000ab8:	08000c13 	.word	0x08000c13
 8000abc:	08000bd7 	.word	0x08000bd7
 8000ac0:	08000c13 	.word	0x08000c13
 8000ac4:	08000be3 	.word	0x08000be3
 8000ac8:	08000c13 	.word	0x08000c13
 8000acc:	08000be9 	.word	0x08000be9
 8000ad0:	08000c13 	.word	0x08000c13
 8000ad4:	08000c13 	.word	0x08000c13
 8000ad8:	08000bcb 	.word	0x08000bcb
 8000adc:	08000c13 	.word	0x08000c13
 8000ae0:	08000c13 	.word	0x08000c13
 8000ae4:	08000c13 	.word	0x08000c13
 8000ae8:	08000c13 	.word	0x08000c13
 8000aec:	08000c13 	.word	0x08000c13
 8000af0:	08000c13 	.word	0x08000c13
 8000af4:	08000c13 	.word	0x08000c13
 8000af8:	08000c13 	.word	0x08000c13
 8000afc:	08000c13 	.word	0x08000c13
 8000b00:	08000c13 	.word	0x08000c13
 8000b04:	08000c13 	.word	0x08000c13
 8000b08:	08000c13 	.word	0x08000c13
 8000b0c:	08000c13 	.word	0x08000c13
 8000b10:	08000bd1 	.word	0x08000bd1
 8000b14:	08000c13 	.word	0x08000c13
 8000b18:	08000c13 	.word	0x08000c13
 8000b1c:	08000c07 	.word	0x08000c07
 8000b20:	08000c13 	.word	0x08000c13
 8000b24:	08000c13 	.word	0x08000c13
 8000b28:	08000c13 	.word	0x08000c13
 8000b2c:	08000c13 	.word	0x08000c13
 8000b30:	08000c13 	.word	0x08000c13
 8000b34:	08000c13 	.word	0x08000c13
 8000b38:	08000c0d 	.word	0x08000c0d
 8000b3c:	08000c13 	.word	0x08000c13
 8000b40:	08000c13 	.word	0x08000c13
 8000b44:	08000c13 	.word	0x08000c13
 8000b48:	08000c13 	.word	0x08000c13
 8000b4c:	08000c13 	.word	0x08000c13
 8000b50:	08000c13 	.word	0x08000c13
 8000b54:	08000c13 	.word	0x08000c13
 8000b58:	08000c13 	.word	0x08000c13
 8000b5c:	08000c13 	.word	0x08000c13
 8000b60:	08000c13 	.word	0x08000c13
 8000b64:	08000c13 	.word	0x08000c13
 8000b68:	08000c13 	.word	0x08000c13
 8000b6c:	08000c13 	.word	0x08000c13
 8000b70:	08000c13 	.word	0x08000c13
 8000b74:	08000c13 	.word	0x08000c13
 8000b78:	08000c13 	.word	0x08000c13
 8000b7c:	08000c13 	.word	0x08000c13
 8000b80:	08000bef 	.word	0x08000bef
 8000b84:	08000c13 	.word	0x08000c13
 8000b88:	08000c13 	.word	0x08000c13
 8000b8c:	08000c13 	.word	0x08000c13
 8000b90:	08000c13 	.word	0x08000c13
 8000b94:	08000c13 	.word	0x08000c13
 8000b98:	08000c13 	.word	0x08000c13
 8000b9c:	08000c13 	.word	0x08000c13
 8000ba0:	08000c13 	.word	0x08000c13
 8000ba4:	08000c13 	.word	0x08000c13
 8000ba8:	08000c13 	.word	0x08000c13
 8000bac:	08000c13 	.word	0x08000c13
 8000bb0:	08000c13 	.word	0x08000c13
 8000bb4:	08000c13 	.word	0x08000c13
 8000bb8:	08000bfb 	.word	0x08000bfb
 8000bbc:	08000c13 	.word	0x08000c13
 8000bc0:	08000c01 	.word	0x08000c01
    case 0x422: str = "STM32F303xB/C"; break;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <devIdToStr+0x1f4>)
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e025      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x438: str = "STM32F303x6/8"; break;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <devIdToStr+0x1f8>)
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e022      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x446: str = "STM32F303xD/E"; break;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <devIdToStr+0x1fc>)
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e01f      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x431: str = "STM32F411xC/E"; break;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <devIdToStr+0x200>)
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e01c      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x423: str = "STM32F401xB/C"; break;
 8000bdc:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <devIdToStr+0x204>)
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	e019      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x433: str = "STM32F401xD/E"; break;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <devIdToStr+0x208>)
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e016      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x435: str = "STM32L43xxx"; break;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <devIdToStr+0x20c>)
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e013      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x462: str = "STM32L45xxx"; break;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <devIdToStr+0x210>)
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e010      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x415: str = "STM32L4x6xx"; break;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <devIdToStr+0x214>)
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	e00d      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x470: str = "STM32L4Rxxx"; break;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <devIdToStr+0x218>)
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	e00a      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x472: str = "STM32L5[5,6]2xx"; break;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <devIdToStr+0x21c>)
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e007      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x449: str = "STM32F74xxx"; break;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <devIdToStr+0x220>)
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e004      	b.n	8000c16 <devIdToStr+0x1e6>
    case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <devIdToStr+0x224>)
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e001      	b.n	8000c16 <devIdToStr+0x1e6>
    default:    str = "UNKNOWN";
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <devIdToStr+0x228>)
 8000c14:	60fb      	str	r3, [r7, #12]
    }
    return str;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	0800da88 	.word	0x0800da88
 8000c28:	0800da98 	.word	0x0800da98
 8000c2c:	0800daa8 	.word	0x0800daa8
 8000c30:	0800dab8 	.word	0x0800dab8
 8000c34:	0800dac8 	.word	0x0800dac8
 8000c38:	0800dad8 	.word	0x0800dad8
 8000c3c:	0800dae8 	.word	0x0800dae8
 8000c40:	0800daf4 	.word	0x0800daf4
 8000c44:	0800db00 	.word	0x0800db00
 8000c48:	0800db0c 	.word	0x0800db0c
 8000c4c:	0800db18 	.word	0x0800db18
 8000c50:	0800db28 	.word	0x0800db28
 8000c54:	0800db34 	.word	0x0800db34
 8000c58:	0800db60 	.word	0x0800db60

08000c5c <bitToStr>:

#if !defined(STM32F3)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
    if (val)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <bitToStr+0x12>
        return "True";
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <bitToStr+0x20>)
 8000c6c:	e000      	b.n	8000c70 <bitToStr+0x14>
    else
        return "False";
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <bitToStr+0x24>)
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	0800db68 	.word	0x0800db68
 8000c80:	0800db70 	.word	0x0800db70

08000c84 <logDeviceConf>:
#endif

__STATIC_INLINE void logDeviceConf(void)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
    struct dwtTime t;
    uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
    uint32_t acr = FLASH->ACR ;
 8000c8a:	4b42      	ldr	r3, [pc, #264]	; (8000d94 <logDeviceConf+0x110>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	61fb      	str	r3, [r7, #28]
#endif
    uint32_t val;

    printf("STM32 Runtime configuration...\r\n");
 8000c90:	4841      	ldr	r0, [pc, #260]	; (8000d98 <logDeviceConf+0x114>)
 8000c92:	f00b fa69 	bl	800c168 <puts>

    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
            (int)HAL_GetDEVID(),
 8000c96:	f001 ffd7 	bl	8002c48 <HAL_GetDEVID>
 8000c9a:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8000c9c:	461c      	mov	r4, r3
            devIdToStr(HAL_GetDEVID()),
 8000c9e:	f001 ffd3 	bl	8002c48 <HAL_GetDEVID>
 8000ca2:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fec2 	bl	8000a30 <devIdToStr>
 8000cac:	4605      	mov	r5, r0
            (int)HAL_GetREVID()
 8000cae:	f001 ffbf 	bl	8002c30 <HAL_GetREVID>
 8000cb2:	4603      	mov	r3, r0
    printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8000cb4:	462a      	mov	r2, r5
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	4838      	ldr	r0, [pc, #224]	; (8000d9c <logDeviceConf+0x118>)
 8000cba:	f00b f9e1 	bl	800c080 <iprintf>
    );

    printf(" Core Arch.   : M%d - %s %s\r\n",
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <logDeviceConf+0x11c>)
 8000cc0:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <logDeviceConf+0x120>)
 8000cc2:	2107      	movs	r1, #7
 8000cc4:	4838      	ldr	r0, [pc, #224]	; (8000da8 <logDeviceConf+0x124>)
 8000cc6:	f00b f9db 	bl	800c080 <iprintf>
                    "!FPU NOT PRESENT",
                    ""
#endif
    );

    printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8000cca:	f001 ffa7 	bl	8002c1c <HAL_GetHalVersion>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4836      	ldr	r0, [pc, #216]	; (8000dac <logDeviceConf+0x128>)
 8000cd4:	f00b f9d4 	bl	800c080 <iprintf>

    val = systemCoreClock()/1000000;
 8000cd8:	f7ff fd70 	bl	80007bc <systemCoreClock>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <logDeviceConf+0x12c>)
 8000ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ce4:	0c9b      	lsrs	r3, r3, #18
 8000ce6:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
    printf(" system clock : %u MHz\r\n", (int)val);
#else
    printf(" SYSCLK clock : %u MHz\r\n", (int)val);
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4831      	ldr	r0, [pc, #196]	; (8000db4 <logDeviceConf+0x130>)
 8000cee:	f00b f9c7 	bl	800c080 <iprintf>
    printf(" HCLK clock   : %u MHz\r\n", (int)HAL_RCC_GetHCLKFreq()/1000000);    
 8000cf2:	f004 f80b 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a2d      	ldr	r2, [pc, #180]	; (8000db0 <logDeviceConf+0x12c>)
 8000cfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfe:	1492      	asrs	r2, r2, #18
 8000d00:	17db      	asrs	r3, r3, #31
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	482c      	ldr	r0, [pc, #176]	; (8000db8 <logDeviceConf+0x134>)
 8000d08:	f00b f9ba 	bl	800c080 <iprintf>
#endif

#if defined(STM32F7) || defined(STM32H7)
    val = SCB->CCR;
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <logDeviceConf+0x138>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	61bb      	str	r3, [r7, #24]
            (int)acr,
            bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
            bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
#else
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8000d12:	69f9      	ldr	r1, [r7, #28]
            (int)acr,
            (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 8000d14:	69fb      	ldr	r3, [r7, #28]
    printf(" FLASH conf.  : ACR=0x%08x - latency=%d\r\n",
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4828      	ldr	r0, [pc, #160]	; (8000dc0 <logDeviceConf+0x13c>)
 8000d1e:	f00b f9af 	bl	800c080 <iprintf>
#endif
#if !defined(CORE_M4)
    printf(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff97 	bl	8000c5c <bitToStr>
 8000d2e:	4604      	mov	r4, r0
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ff90 	bl	8000c5c <bitToStr>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4621      	mov	r1, r4
 8000d42:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <logDeviceConf+0x140>)
 8000d44:	f00b f99c 	bl	800c080 <iprintf>
#if defined(STM32L5)
    printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

    dwtIpInit();
 8000d48:	f7ff fce6 	bl	8000718 <dwtIpInit>
    dwtReset();
 8000d4c:	f7ff fd00 	bl	8000750 <dwtReset>
    HAL_Delay(100);
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	f001 ff41 	bl	8002bd8 <HAL_Delay>
    st = dwtGetCycles();
 8000d56:	f7ff fd07 	bl	8000768 <dwtGetCycles>
 8000d5a:	6178      	str	r0, [r7, #20]
    dwtCyclesToTime(st/100, &t);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	4a1a      	ldr	r2, [pc, #104]	; (8000dc8 <logDeviceConf+0x144>)
 8000d60:	fba2 2303 	umull	r2, r3, r2, r3
 8000d64:	095b      	lsrs	r3, r3, #5
 8000d66:	f04f 0400 	mov.w	r4, #0
 8000d6a:	1d3a      	adds	r2, r7, #4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f7ff fd2b 	bl	80007ca <dwtCyclesToTime>

    printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
            t.s * 100 + t.ms, t.us);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	2264      	movs	r2, #100	; 0x64
 8000d78:	fb02 f203 	mul.w	r2, r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 8000d7e:	4413      	add	r3, r2
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4811      	ldr	r0, [pc, #68]	; (8000dcc <logDeviceConf+0x148>)
 8000d86:	f00b f97b 	bl	800c080 <iprintf>
}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bdb0      	pop	{r4, r5, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	52002000 	.word	0x52002000
 8000d98:	0800db78 	.word	0x0800db78
 8000d9c:	0800db98 	.word	0x0800db98
 8000da0:	0800dbcc 	.word	0x0800dbcc
 8000da4:	0800dbd8 	.word	0x0800dbd8
 8000da8:	0800dbe4 	.word	0x0800dbe4
 8000dac:	0800dc04 	.word	0x0800dc04
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	0800dc20 	.word	0x0800dc20
 8000db8:	0800dc3c 	.word	0x0800dc3c
 8000dbc:	e000ed00 	.word	0xe000ed00
 8000dc0:	0800dc58 	.word	0x0800dc58
 8000dc4:	0800dc84 	.word	0x0800dc84
 8000dc8:	51eb851f 	.word	0x51eb851f
 8000dcc:	0800dca4 	.word	0x0800dca4

08000dd0 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da0d      	bge.n	8000dfe <_write+0x2e>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d00a      	beq.n	8000dfe <_write+0x2e>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d007      	beq.n	8000dfe <_write+0x2e>
        errno = EBADF;
 8000dee:	f00a faa3 	bl	800b338 <__errno>
 8000df2:	4602      	mov	r2, r0
 8000df4:	2309      	movs	r3, #9
 8000df6:	6013      	str	r3, [r2, #0]
        return -1;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfc:	e00f      	b.n	8000e1e <_write+0x4e>
    }

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <_write+0x58>)
 8000e0a:	f005 fb1b 	bl	8006444 <HAL_UART_Transmit>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	75fb      	strb	r3, [r7, #23]
            HAL_MAX_DELAY);

    return (status == HAL_OK ? count : 0);
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <_write+0x4c>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	e000      	b.n	8000e1e <_write+0x4e>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2400075c 	.word	0x2400075c

08000e2c <aiLogErr>:
#endif



__STATIC_INLINE void aiLogErr(const ai_error err, const char *fct)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    if (fct)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d009      	beq.n	8000e50 <aiLogErr+0x24>
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
                err.type, err.code);
 8000e3c:	793b      	ldrb	r3, [r7, #4]
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 8000e3e:	461a      	mov	r2, r3
                err.type, err.code);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f3c3 2317 	ubfx	r3, r3, #8, #24
        printf("E: AI error (%s) - type=%d code=%d\r\n", fct,
 8000e46:	6839      	ldr	r1, [r7, #0]
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <aiLogErr+0x40>)
 8000e4a:	f00b f919 	bl	800c080 <iprintf>
    else
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
}
 8000e4e:	e008      	b.n	8000e62 <aiLogErr+0x36>
        printf("E: AI error - type=%d code=%d\r\n", err.type, err.code);
 8000e50:	793b      	ldrb	r3, [r7, #4]
 8000e52:	4619      	mov	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <aiLogErr+0x44>)
 8000e5e:	f00b f90f 	bl	800c080 <iprintf>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	0800dcd0 	.word	0x0800dcd0
 8000e70:	0800dcf8 	.word	0x0800dcf8

08000e74 <aiPrintLayoutBuffer>:

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg, int idx,
        const ai_buffer* buffer)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af02      	add	r7, sp, #8
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
    uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	145b      	asrs	r3, r3, #17
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	61fb      	str	r3, [r7, #28]
    printf("%s[%d] ",msg, idx);
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	4897      	ldr	r0, [pc, #604]	; (80010f0 <aiPrintLayoutBuffer+0x27c>)
 8000e92:	f00b f8f5 	bl	800c080 <iprintf>
    if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	f040 818c 	bne.w	80011b6 <aiPrintLayoutBuffer+0x342>
        printf(" %s%d,",
                AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        printf(" %s%d,",
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <aiPrintLayoutBuffer+0x3a>
 8000eaa:	4992      	ldr	r1, [pc, #584]	; (80010f4 <aiPrintLayoutBuffer+0x280>)
 8000eac:	e000      	b.n	8000eb0 <aiPrintLayoutBuffer+0x3c>
 8000eae:	4992      	ldr	r1, [pc, #584]	; (80010f8 <aiPrintLayoutBuffer+0x284>)
                        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	11db      	asrs	r3, r3, #7
        printf(" %s%d,",
 8000eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eba:	461a      	mov	r2, r3
 8000ebc:	488f      	ldr	r0, [pc, #572]	; (80010fc <aiPrintLayoutBuffer+0x288>)
 8000ebe:	f00b f8df 	bl	800c080 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8157 	beq.w	800117a <aiPrintLayoutBuffer+0x306>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 814f 	beq.w	800117a <aiPrintLayoutBuffer+0x306>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 8149 	beq.w	800117a <aiPrintLayoutBuffer+0x306>
            ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d058      	beq.n	8000fa2 <aiPrintLayoutBuffer+0x12e>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d051      	beq.n	8000fa2 <aiPrintLayoutBuffer+0x12e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d04c      	beq.n	8000fa2 <aiPrintLayoutBuffer+0x12e>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d045      	beq.n	8000f9c <aiPrintLayoutBuffer+0x128>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d03e      	beq.n	8000f9c <aiPrintLayoutBuffer+0x128>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d039      	beq.n	8000f9c <aiPrintLayoutBuffer+0x128>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d00a      	beq.n	8000f46 <aiPrintLayoutBuffer+0xd2>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <aiPrintLayoutBuffer+0xd2>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	e000      	b.n	8000f48 <aiPrintLayoutBuffer+0xd4>
 8000f46:	2300      	movs	r3, #0
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d026      	beq.n	8000f9c <aiPrintLayoutBuffer+0x128>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00a      	beq.n	8000f6c <aiPrintLayoutBuffer+0xf8>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <aiPrintLayoutBuffer+0xf8>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	e000      	b.n	8000f6e <aiPrintLayoutBuffer+0xfa>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	885b      	ldrh	r3, [r3, #2]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <aiPrintLayoutBuffer+0x128>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00a      	beq.n	8000f92 <aiPrintLayoutBuffer+0x11e>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <aiPrintLayoutBuffer+0x11e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	e000      	b.n	8000f94 <aiPrintLayoutBuffer+0x120>
 8000f92:	2300      	movs	r3, #0
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	e004      	b.n	8000fa6 <aiPrintLayoutBuffer+0x132>
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	e001      	b.n	8000fa6 <aiPrintLayoutBuffer+0x132>
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
            int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80d6 	beq.w	800115e <aiPrintLayoutBuffer+0x2ea>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80ce 	beq.w	800115e <aiPrintLayoutBuffer+0x2ea>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80c8 	beq.w	800115e <aiPrintLayoutBuffer+0x2ea>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d06c      	beq.n	80010b0 <aiPrintLayoutBuffer+0x23c>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d065      	beq.n	80010b0 <aiPrintLayoutBuffer+0x23c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d060      	beq.n	80010b0 <aiPrintLayoutBuffer+0x23c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <aiPrintLayoutBuffer+0x198>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <aiPrintLayoutBuffer+0x198>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	e000      	b.n	800100e <aiPrintLayoutBuffer+0x19a>
 800100c:	2300      	movs	r3, #0
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d04b      	beq.n	80010b0 <aiPrintLayoutBuffer+0x23c>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d045      	beq.n	80010ac <aiPrintLayoutBuffer+0x238>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d03e      	beq.n	80010ac <aiPrintLayoutBuffer+0x238>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d039      	beq.n	80010ac <aiPrintLayoutBuffer+0x238>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00a      	beq.n	8001056 <aiPrintLayoutBuffer+0x1e2>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <aiPrintLayoutBuffer+0x1e2>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	e000      	b.n	8001058 <aiPrintLayoutBuffer+0x1e4>
 8001056:	2300      	movs	r3, #0
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d026      	beq.n	80010ac <aiPrintLayoutBuffer+0x238>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <aiPrintLayoutBuffer+0x208>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <aiPrintLayoutBuffer+0x208>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	e000      	b.n	800107e <aiPrintLayoutBuffer+0x20a>
 800107c:	2300      	movs	r3, #0
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d013      	beq.n	80010ac <aiPrintLayoutBuffer+0x238>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00a      	beq.n	80010a2 <aiPrintLayoutBuffer+0x22e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <aiPrintLayoutBuffer+0x22e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	e000      	b.n	80010a4 <aiPrintLayoutBuffer+0x230>
 80010a2:	2300      	movs	r3, #0
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	e057      	b.n	800115c <aiPrintLayoutBuffer+0x2e8>
 80010ac:	2300      	movs	r3, #0
 80010ae:	e055      	b.n	800115c <aiPrintLayoutBuffer+0x2e8>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d04f      	beq.n	8001158 <aiPrintLayoutBuffer+0x2e4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d048      	beq.n	8001158 <aiPrintLayoutBuffer+0x2e4>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d043      	beq.n	8001158 <aiPrintLayoutBuffer+0x2e4>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d013      	beq.n	8001100 <aiPrintLayoutBuffer+0x28c>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00c      	beq.n	8001100 <aiPrintLayoutBuffer+0x28c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	e009      	b.n	8001102 <aiPrintLayoutBuffer+0x28e>
 80010ee:	bf00      	nop
 80010f0:	0800dd18 	.word	0x0800dd18
 80010f4:	0800dd20 	.word	0x0800dd20
 80010f8:	0800dd24 	.word	0x0800dd24
 80010fc:	0800dd28 	.word	0x0800dd28
 8001100:	2300      	movs	r3, #0
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d027      	beq.n	8001158 <aiPrintLayoutBuffer+0x2e4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	695b      	ldr	r3, [r3, #20]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00a      	beq.n	8001126 <aiPrintLayoutBuffer+0x2b2>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <aiPrintLayoutBuffer+0x2b2>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	e000      	b.n	8001128 <aiPrintLayoutBuffer+0x2b4>
 8001126:	2300      	movs	r3, #0
 8001128:	885b      	ldrh	r3, [r3, #2]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d014      	beq.n	8001158 <aiPrintLayoutBuffer+0x2e4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00a      	beq.n	800114c <aiPrintLayoutBuffer+0x2d8>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <aiPrintLayoutBuffer+0x2d8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	e000      	b.n	800114e <aiPrintLayoutBuffer+0x2da>
 800114c:	2300      	movs	r3, #0
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f993 3000 	ldrsb.w	r3, [r3]
 8001156:	e001      	b.n	800115c <aiPrintLayoutBuffer+0x2e8>
 8001158:	2300      	movs	r3, #0
 800115a:	e001      	b.n	8001160 <aiPrintLayoutBuffer+0x2ec>
 800115c:	e000      	b.n	8001160 <aiPrintLayoutBuffer+0x2ec>
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
            printf("scale=%f, zero=%d,", scale, zero_point);
 8001162:	edd7 7a06 	vldr	s15, [r7, #24]
 8001166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	ec53 2b17 	vmov	r2, r3, d7
 8001172:	4833      	ldr	r0, [pc, #204]	; (8001240 <aiPrintLayoutBuffer+0x3cc>)
 8001174:	f00a ff84 	bl	800c080 <iprintf>
        if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8001178:	e02d      	b.n	80011d6 <aiPrintLayoutBuffer+0x362>
        } else {
            printf("Q%d.%d,",
                    (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	11db      	asrs	r3, r3, #7
 8001180:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                    - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800118e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
                            (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	15db      	asrs	r3, r3, #23
 8001198:	f003 0301 	and.w	r3, r3, #1
                    - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 800119c:	440b      	add	r3, r1
            printf("Q%d.%d,",
 800119e:	1ad1      	subs	r1, r2, r3
                            AI_BUFFER_FMT_GET_FBITS(buffer->format));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            printf("Q%d.%d,",
 80011aa:	3b40      	subs	r3, #64	; 0x40
 80011ac:	461a      	mov	r2, r3
 80011ae:	4825      	ldr	r0, [pc, #148]	; (8001244 <aiPrintLayoutBuffer+0x3d0>)
 80011b0:	f00a ff66 	bl	800c080 <iprintf>
 80011b4:	e00f      	b.n	80011d6 <aiPrintLayoutBuffer+0x362>
        }
    }
    else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d109      	bne.n	80011d0 <aiPrintLayoutBuffer+0x35c>
        printf(" float%d,",
                (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	11db      	asrs	r3, r3, #7
        printf(" float%d,",
 80011c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011c6:	4619      	mov	r1, r3
 80011c8:	481f      	ldr	r0, [pc, #124]	; (8001248 <aiPrintLayoutBuffer+0x3d4>)
 80011ca:	f00a ff59 	bl	800c080 <iprintf>
 80011ce:	e002      	b.n	80011d6 <aiPrintLayoutBuffer+0x362>
    else
        printf("NONE");
 80011d0:	481e      	ldr	r0, [pc, #120]	; (800124c <aiPrintLayoutBuffer+0x3d8>)
 80011d2:	f00a ff55 	bl	800c080 <iprintf>
    printf(" %ld bytes, shape=(%d,%d,%ld)",
            AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	891b      	ldrh	r3, [r3, #8]
 80011da:	461a      	mov	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	88db      	ldrh	r3, [r3, #6]
 80011e0:	fb03 f302 	mul.w	r3, r3, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	fb03 f302 	mul.w	r3, r3, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	11d2      	asrs	r2, r2, #7
 80011f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	3304      	adds	r3, #4
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 80011fe:	08d9      	lsrs	r1, r3, #3
            buffer->height, buffer->width, buffer->channels);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	88db      	ldrh	r3, [r3, #6]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 8001204:	461a      	mov	r2, r3
            buffer->height, buffer->width, buffer->channels);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	891b      	ldrh	r3, [r3, #8]
    printf(" %ld bytes, shape=(%d,%d,%ld)",
 800120a:	4618      	mov	r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	4603      	mov	r3, r0
 8001214:	480e      	ldr	r0, [pc, #56]	; (8001250 <aiPrintLayoutBuffer+0x3dc>)
 8001216:	f00a ff33 	bl	800c080 <iprintf>
    if (buffer->data)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <aiPrintLayoutBuffer+0x3bc>
        printf(" (@0x%08x)\r\n", (int)buffer->data);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	4619      	mov	r1, r3
 8001228:	480a      	ldr	r0, [pc, #40]	; (8001254 <aiPrintLayoutBuffer+0x3e0>)
 800122a:	f00a ff29 	bl	800c080 <iprintf>
    else
        printf(" (USER domain)\r\n");
}
 800122e:	e002      	b.n	8001236 <aiPrintLayoutBuffer+0x3c2>
        printf(" (USER domain)\r\n");
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <aiPrintLayoutBuffer+0x3e4>)
 8001232:	f00a ff99 	bl	800c168 <puts>
}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0800dd30 	.word	0x0800dd30
 8001244:	0800dd44 	.word	0x0800dd44
 8001248:	0800dd4c 	.word	0x0800dd4c
 800124c:	0800dd58 	.word	0x0800dd58
 8001250:	0800dd60 	.word	0x0800dd60
 8001254:	0800dd80 	.word	0x0800dd80
 8001258:	0800dd90 	.word	0x0800dd90

0800125c <aiPrintNetworkInfo>:

__STATIC_INLINE void aiPrintNetworkInfo(const ai_network_report* report)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    int i;
    printf("Network informations...\r\n");
 8001264:	485a      	ldr	r0, [pc, #360]	; (80013d0 <aiPrintNetworkInfo+0x174>)
 8001266:	f00a ff7f 	bl	800c168 <puts>
    printf(" model name         : %s\r\n", report->model_name);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4619      	mov	r1, r3
 8001270:	4858      	ldr	r0, [pc, #352]	; (80013d4 <aiPrintNetworkInfo+0x178>)
 8001272:	f00a ff05 	bl	800c080 <iprintf>
    printf(" model signature    : %s\r\n", report->model_signature);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4619      	mov	r1, r3
 800127c:	4856      	ldr	r0, [pc, #344]	; (80013d8 <aiPrintNetworkInfo+0x17c>)
 800127e:	f00a feff 	bl	800c080 <iprintf>
    printf(" model datetime     : %s\r\n", report->model_datetime);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4619      	mov	r1, r3
 8001288:	4854      	ldr	r0, [pc, #336]	; (80013dc <aiPrintNetworkInfo+0x180>)
 800128a:	f00a fef9 	bl	800c080 <iprintf>
    printf(" compile datetime   : %s\r\n", report->compile_datetime);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	4619      	mov	r1, r3
 8001294:	4852      	ldr	r0, [pc, #328]	; (80013e0 <aiPrintNetworkInfo+0x184>)
 8001296:	f00a fef3 	bl	800c080 <iprintf>
    printf(" runtime version    : %d.%d.%d\r\n",
            report->runtime_version.major,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7d1b      	ldrb	r3, [r3, #20]
    printf(" runtime version    : %d.%d.%d\r\n",
 800129e:	4619      	mov	r1, r3
            report->runtime_version.minor,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7d5b      	ldrb	r3, [r3, #21]
    printf(" runtime version    : %d.%d.%d\r\n",
 80012a4:	461a      	mov	r2, r3
            report->runtime_version.micro);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7d9b      	ldrb	r3, [r3, #22]
    printf(" runtime version    : %d.%d.%d\r\n",
 80012aa:	484e      	ldr	r0, [pc, #312]	; (80013e4 <aiPrintNetworkInfo+0x188>)
 80012ac:	f00a fee8 	bl	800c080 <iprintf>
    if (report->tool_revision[0])
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <aiPrintNetworkInfo+0x78>
    	printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <aiPrintNetworkInfo+0x6e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	e000      	b.n	80012cc <aiPrintNetworkInfo+0x70>
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <aiPrintNetworkInfo+0x18c>)
 80012cc:	4619      	mov	r1, r3
 80012ce:	4847      	ldr	r0, [pc, #284]	; (80013ec <aiPrintNetworkInfo+0x190>)
 80012d0:	f00a fed6 	bl	800c080 <iprintf>
    printf(" tools version      : %d.%d.%d\r\n",
            report->tool_version.major,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7f1b      	ldrb	r3, [r3, #28]
    printf(" tools version      : %d.%d.%d\r\n",
 80012d8:	4619      	mov	r1, r3
            report->tool_version.minor,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7f5b      	ldrb	r3, [r3, #29]
    printf(" tools version      : %d.%d.%d\r\n",
 80012de:	461a      	mov	r2, r3
            report->tool_version.micro);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7f9b      	ldrb	r3, [r3, #30]
    printf(" tools version      : %d.%d.%d\r\n",
 80012e4:	4842      	ldr	r0, [pc, #264]	; (80013f0 <aiPrintNetworkInfo+0x194>)
 80012e6:	f00a fecb 	bl	800c080 <iprintf>
    printf(" complexity         : %ld MACC\r\n", report->n_macc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	4619      	mov	r1, r3
 80012f0:	4840      	ldr	r0, [pc, #256]	; (80013f4 <aiPrintNetworkInfo+0x198>)
 80012f2:	f00a fec5 	bl	800c080 <iprintf>
    printf(" c-nodes            : %ld\r\n", report->n_nodes);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012fa:	4619      	mov	r1, r3
 80012fc:	483e      	ldr	r0, [pc, #248]	; (80013f8 <aiPrintNetworkInfo+0x19c>)
 80012fe:	f00a febf 	bl	800c080 <iprintf>
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
            AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001310:	fb03 f302 	mul.w	r3, r3, r2
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
 800131a:	fb03 f102 	mul.w	r1, r3, r2
            AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    printf(" activations        : %ld bytes (@0x%08x)\r\n",
 8001322:	461a      	mov	r2, r3
 8001324:	4835      	ldr	r0, [pc, #212]	; (80013fc <aiPrintNetworkInfo+0x1a0>)
 8001326:	f00a feab 	bl	800c080 <iprintf>
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
            AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001338:	fb03 f302 	mul.w	r3, r3, r2
 800133c:	461a      	mov	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
 8001342:	fb03 f102 	mul.w	r1, r3, r2
            AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    printf(" weights            : %ld bytes (@0x%08x)\r\n",
 800134a:	461a      	mov	r2, r3
 800134c:	482c      	ldr	r0, [pc, #176]	; (8001400 <aiPrintNetworkInfo+0x1a4>)
 800134e:	f00a fe97 	bl	800c080 <iprintf>
    printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001356:	4619      	mov	r1, r3
            report->n_outputs);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 800135c:	461a      	mov	r2, r3
 800135e:	4829      	ldr	r0, [pc, #164]	; (8001404 <aiPrintNetworkInfo+0x1a8>)
 8001360:	f00a fe8e 	bl	800c080 <iprintf>
    for (i=0; i<report->n_inputs; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e00f      	b.n	800138a <aiPrintNetworkInfo+0x12e>
        aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	461a      	mov	r2, r3
 800137c:	68f9      	ldr	r1, [r7, #12]
 800137e:	4822      	ldr	r0, [pc, #136]	; (8001408 <aiPrintNetworkInfo+0x1ac>)
 8001380:	f7ff fd78 	bl	8000e74 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_inputs; i++)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3301      	adds	r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4293      	cmp	r3, r2
 8001394:	dbe9      	blt.n	800136a <aiPrintNetworkInfo+0x10e>
    for (i=0; i<report->n_outputs; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	e00f      	b.n	80013bc <aiPrintNetworkInfo+0x160>
        aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	461a      	mov	r2, r3
 80013ae:	68f9      	ldr	r1, [r7, #12]
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <aiPrintNetworkInfo+0x1b0>)
 80013b2:	f7ff fd5f 	bl	8000e74 <aiPrintLayoutBuffer>
    for (i=0; i<report->n_outputs; i++)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80013c0:	461a      	mov	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	dbe9      	blt.n	800139c <aiPrintNetworkInfo+0x140>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	0800dda0 	.word	0x0800dda0
 80013d4:	0800ddbc 	.word	0x0800ddbc
 80013d8:	0800ddd8 	.word	0x0800ddd8
 80013dc:	0800ddf4 	.word	0x0800ddf4
 80013e0:	0800de10 	.word	0x0800de10
 80013e4:	0800de2c 	.word	0x0800de2c
 80013e8:	0800de50 	.word	0x0800de50
 80013ec:	0800de54 	.word	0x0800de54
 80013f0:	0800de70 	.word	0x0800de70
 80013f4:	0800de94 	.word	0x0800de94
 80013f8:	0800deb8 	.word	0x0800deb8
 80013fc:	0800ded4 	.word	0x0800ded4
 8001400:	0800df00 	.word	0x0800df00
 8001404:	0800df2c 	.word	0x0800df2c
 8001408:	0800df4c 	.word	0x0800df4c
 800140c:	0800df50 	.word	0x0800df50

08001410 <aiBootstrap>:

static int aiBootstrap(const char *nn_name, const int idx)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b092      	sub	sp, #72	; 0x48
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    ai_error err;
    ai_u32 ext_addr, sz;

    /* Creating the network */
    printf("Creating instance for \"%s\"..\r\n", nn_name);
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4868      	ldr	r0, [pc, #416]	; (80015c0 <aiBootstrap+0x1b0>)
 800141e:	f00a fe2f 	bl	800c080 <iprintf>
    err = ai_mnetwork_create(nn_name, &net_exec_ctx[idx].handle, NULL);
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4a65      	ldr	r2, [pc, #404]	; (80015c4 <aiBootstrap+0x1b4>)
 800142e:	4413      	add	r3, r2
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fad3 	bl	80019e0 <ai_mnetwork_create>
 800143a:	4603      	mov	r3, r0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
    if (err.type) {
 800143e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <aiBootstrap+0x44>
        aiLogErr(err, "ai_mnetwork_create");
 8001446:	4960      	ldr	r1, [pc, #384]	; (80015c8 <aiBootstrap+0x1b8>)
 8001448:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800144a:	f7ff fcef 	bl	8000e2c <aiLogErr>
        return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	e0b0      	b.n	80015b6 <aiBootstrap+0x1a6>
    }

    /* Initialize the instance */
    printf("Initializing..\r\n");
 8001454:	485d      	ldr	r0, [pc, #372]	; (80015cc <aiBootstrap+0x1bc>)
 8001456:	f00a fe87 	bl	800c168 <puts>
#if !defined(AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE)
    const ai_network_params params = {
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(activations) };
#else
    ai_network_params params = {
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2230      	movs	r2, #48	; 0x30
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f00a f91f 	bl	800b6a6 <memset>
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <aiBootstrap+0x1c0>)
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <aiBootstrap+0x1c0>)
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
            AI_BUFFER_NULL(NULL),
            AI_BUFFER_NULL(NULL) };

    if (ai_mnetwork_get_ext_data_activations(net_exec_ctx[idx].handle, &ext_addr, &sz) == 0) {
 8001470:	4954      	ldr	r1, [pc, #336]	; (80015c4 <aiBootstrap+0x1b4>)
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001484:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fbdf 	bl	8001c4c <ai_mnetwork_get_ext_data_activations>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10a      	bne.n	80014aa <aiBootstrap+0x9a>
        if (ext_addr == 0xFFFFFFFF) {
 8001494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800149a:	d104      	bne.n	80014a6 <aiBootstrap+0x96>
            params.activations.data = (ai_handle)activations;
 800149c:	4b4d      	ldr	r3, [pc, #308]	; (80015d4 <aiBootstrap+0x1c4>)
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
            ext_addr = (ai_u32)activations;
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <aiBootstrap+0x1c4>)
 80014a2:	643b      	str	r3, [r7, #64]	; 0x40
 80014a4:	e001      	b.n	80014aa <aiBootstrap+0x9a>
        }
        else {
            params.activations.data = (ai_handle)ext_addr;
 80014a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
#endif

    if (!ai_mnetwork_init(net_exec_ctx[idx].handle, &params)) {
 80014aa:	4946      	ldr	r1, [pc, #280]	; (80015c4 <aiBootstrap+0x1b4>)
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f107 020c 	add.w	r2, r7, #12
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fb56 	bl	8001b72 <ai_mnetwork_init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	f083 0301 	eor.w	r3, r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d027      	beq.n	8001522 <aiBootstrap+0x112>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 80014d2:	493c      	ldr	r1, [pc, #240]	; (80015c4 <aiBootstrap+0x1b4>)
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fb25 	bl	8001b32 <ai_mnetwork_get_error>
 80014e8:	4603      	mov	r3, r0
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_init");
 80014ec:	493a      	ldr	r1, [pc, #232]	; (80015d8 <aiBootstrap+0x1c8>)
 80014ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014f0:	f7ff fc9c 	bl	8000e2c <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
 80014f4:	4933      	ldr	r1, [pc, #204]	; (80015c4 <aiBootstrap+0x1b4>)
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fad7 	bl	8001ab8 <ai_mnetwork_destroy>
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800150a:	492e      	ldr	r1, [pc, #184]	; (80015c4 <aiBootstrap+0x1b4>)
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	4613      	mov	r3, r2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
        return -4;
 800151c:	f06f 0303 	mvn.w	r3, #3
 8001520:	e049      	b.n	80015b6 <aiBootstrap+0x1a6>
    }

    /* Query the created network to get relevant info from it */
    if (ai_mnetwork_get_info(net_exec_ctx[idx].handle, &net_exec_ctx[idx].report)) {
 8001522:	4928      	ldr	r1, [pc, #160]	; (80015c4 <aiBootstrap+0x1b4>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4613      	mov	r3, r2
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <aiBootstrap+0x1b4>)
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	4619      	mov	r1, r3
 8001544:	f000 fada 	bl	8001afc <ai_mnetwork_get_info>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00c      	beq.n	8001568 <aiBootstrap+0x158>
        aiPrintNetworkInfo(&net_exec_ctx[idx].report);
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	011b      	lsls	r3, r3, #4
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <aiBootstrap+0x1b4>)
 800155a:	4413      	add	r3, r2
 800155c:	3304      	adds	r3, #4
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fe7c 	bl	800125c <aiPrintNetworkInfo>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
        return -2;
    }

    return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e026      	b.n	80015b6 <aiBootstrap+0x1a6>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8001568:	4916      	ldr	r1, [pc, #88]	; (80015c4 <aiBootstrap+0x1b4>)
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 fada 	bl	8001b32 <ai_mnetwork_get_error>
 800157e:	4603      	mov	r3, r0
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
        aiLogErr(err, "ai_mnetwork_get_info");
 8001582:	4916      	ldr	r1, [pc, #88]	; (80015dc <aiBootstrap+0x1cc>)
 8001584:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001586:	f7ff fc51 	bl	8000e2c <aiLogErr>
        ai_mnetwork_destroy(net_exec_ctx[idx].handle);
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <aiBootstrap+0x1b4>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fa8c 	bl	8001ab8 <ai_mnetwork_destroy>
        net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80015a0:	4908      	ldr	r1, [pc, #32]	; (80015c4 <aiBootstrap+0x1b4>)
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
        return -2;
 80015b2:	f06f 0301 	mvn.w	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3748      	adds	r7, #72	; 0x48
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	0800df54 	.word	0x0800df54
 80015c4:	24000624 	.word	0x24000624
 80015c8:	0800df74 	.word	0x0800df74
 80015cc:	0800df88 	.word	0x0800df88
 80015d0:	40000040 	.word	0x40000040
 80015d4:	2400069c 	.word	0x2400069c
 80015d8:	0800df98 	.word	0x0800df98
 80015dc:	0800dfac 	.word	0x0800dfac

080015e0 <aiInit>:

static int aiInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
    const char *nn_name;
    int idx;

    printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 80015e6:	2300      	movs	r3, #0
 80015e8:	2201      	movs	r2, #1
 80015ea:	2101      	movs	r1, #1
 80015ec:	4812      	ldr	r0, [pc, #72]	; (8001638 <aiInit+0x58>)
 80015ee:	f00a fd47 	bl	800c080 <iprintf>
            AI_PLATFORM_API_MAJOR,
            AI_PLATFORM_API_MINOR,
            AI_PLATFORM_API_MICRO);

    /* Discover and init the embedded network */
    idx = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
    do {
        nn_name = ai_mnetwork_find(NULL, idx);
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 f9c1 	bl	8001980 <ai_mnetwork_find>
 80015fe:	6038      	str	r0, [r7, #0]
        if (nn_name) {
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00d      	beq.n	8001622 <aiInit+0x42>
            printf("\r\nFound the network \"%s\"\r\n", nn_name);
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <aiInit+0x5c>)
 800160a:	f00a fd39 	bl	800c080 <iprintf>
            if (aiBootstrap(nn_name, idx))
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f7ff fefd 	bl	8001410 <aiBootstrap>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <aiInit+0x42>
                return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001620:	e006      	b.n	8001630 <aiInit+0x50>
        }
        idx++;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3301      	adds	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
    } while (nn_name);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1e3      	bne.n	80015f6 <aiInit+0x16>

    return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0800dfc4 	.word	0x0800dfc4
 800163c:	0800dff4 	.word	0x0800dff4

08001640 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    printf("\r\n#\r\n");
 8001644:	4810      	ldr	r0, [pc, #64]	; (8001688 <aiSystemPerformanceInit+0x48>)
 8001646:	f00a fd8f 	bl	800c168 <puts>
    printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 800164a:	2300      	movs	r3, #0
 800164c:	2205      	movs	r2, #5
 800164e:	490f      	ldr	r1, [pc, #60]	; (800168c <aiSystemPerformanceInit+0x4c>)
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <aiSystemPerformanceInit+0x50>)
 8001652:	f00a fd15 	bl	800c080 <iprintf>
            _APP_VERSION_MINOR_ );
    printf("#\r\n");
 8001656:	480f      	ldr	r0, [pc, #60]	; (8001694 <aiSystemPerformanceInit+0x54>)
 8001658:	f00a fd86 	bl	800c168 <puts>

#if defined(__GNUC__)
    printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800165c:	2301      	movs	r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	2107      	movs	r1, #7
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <aiSystemPerformanceInit+0x58>)
 8001664:	f00a fd0c 	bl	800c080 <iprintf>
    );
#elif defined (__CC_ARM)
    printf("Compiled with MDK-ARM Keil %d\r\n", __ARMCC_VERSION);
#endif

    crcIpInit();
 8001668:	f7ff f83c 	bl	80006e4 <crcIpInit>
    logDeviceConf();
 800166c:	f7ff fb0a 	bl	8000c84 <logDeviceConf>
    cyclesCounterInit();
 8001670:	f7ff f886 	bl	8000780 <cyclesCounterInit>

    aiInit();
 8001674:	f7ff ffb4 	bl	80015e0 <aiInit>

    srand(3); /* deterministic outcome */
 8001678:	2003      	movs	r0, #3
 800167a:	f00a fd7d 	bl	800c178 <srand>

    dwtReset();
 800167e:	f7ff f867 	bl	8000750 <dwtReset>
    return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	0800e584 	.word	0x0800e584
 800168c:	0800e58c 	.word	0x0800e58c
 8001690:	0800e5b0 	.word	0x0800e5b0
 8001694:	0800e5c0 	.word	0x0800e5c0
 8001698:	0800e5c4 	.word	0x0800e5c4

0800169c <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b092      	sub	sp, #72	; 0x48
 80016a0:	af00      	add	r7, sp, #0

    int idx = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	643b      	str	r3, [r7, #64]	; 0x40
    int batch = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int y_pred;
    ai_buffer ai_input[AI_MNETWORK_IN_NUM];
    ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

    ai_float input[1] = {0};  // initial
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
    ai_float output[1] = {0};
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]

    if (net_exec_ctx[idx].handle == AI_HANDLE_NULL)
 80016b6:	4958      	ldr	r1, [pc, #352]	; (8001818 <aiSystemPerformanceProcess+0x17c>)
 80016b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016ba:	4613      	mov	r3, r2
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d105      	bne.n	80016d6 <aiSystemPerformanceProcess+0x3a>
    {
        printf("E: network handle is NULL\r\n");
 80016ca:	4854      	ldr	r0, [pc, #336]	; (800181c <aiSystemPerformanceProcess+0x180>)
 80016cc:	f00a fd4c 	bl	800c168 <puts>
        return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d4:	e09b      	b.n	800180e <aiSystemPerformanceProcess+0x172>
    }

    ai_input[0] = net_exec_ctx[idx].report.inputs[0];
 80016d6:	4950      	ldr	r1, [pc, #320]	; (8001818 <aiSystemPerformanceProcess+0x17c>)
 80016d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016da:	4613      	mov	r3, r2
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	1a9b      	subs	r3, r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	3338      	adds	r3, #56	; 0x38
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f107 0420 	add.w	r4, r7, #32
 80016ec:	461d      	mov	r5, r3
 80016ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016f6:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_output[0] = net_exec_ctx[idx].report.outputs[0];
 80016fa:	4947      	ldr	r1, [pc, #284]	; (8001818 <aiSystemPerformanceProcess+0x17c>)
 80016fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016fe:	4613      	mov	r3, r2
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	1a9b      	subs	r3, r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	333c      	adds	r3, #60	; 0x3c
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f107 0408 	add.w	r4, r7, #8
 8001710:	461d      	mov	r5, r3
 8001712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800171a:	e884 0003 	stmia.w	r4, {r0, r1}

//    ai_float test_data[] = {0, 1, 2, 3, 4, 5, 6, 7};

    for (int i=0; i < 999; i++)
 800171e:	2300      	movs	r3, #0
 8001720:	647b      	str	r3, [r7, #68]	; 0x44
 8001722:	e06f      	b.n	8001804 <aiSystemPerformanceProcess+0x168>
    {
    	input[0] = rand()%20 - 15;  // 随机生成[-10, 10] 的值
 8001724:	f00a fd4c 	bl	800c1c0 <rand>
 8001728:	4601      	mov	r1, r0
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <aiSystemPerformanceProcess+0x184>)
 800172c:	fb83 2301 	smull	r2, r3, r3, r1
 8001730:	10da      	asrs	r2, r3, #3
 8001732:	17cb      	asrs	r3, r1, #31
 8001734:	1ad2      	subs	r2, r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	1aca      	subs	r2, r1, r3
 8001740:	f1a2 030f 	sub.w	r3, r2, #15
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174c:	edc7 7a01 	vstr	s15, [r7, #4]
    	output[0] = 0;
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
    	ai_input[0].data = AI_HANDLE_PTR(input);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	633b      	str	r3, [r7, #48]	; 0x30
    	ai_output[0].data = AI_HANDLE_PTR(output);
 800175a:	463b      	mov	r3, r7
 800175c:	61bb      	str	r3, [r7, #24]
    	batch = ai_mnetwork_run(net_exec_ctx[idx].handle, &ai_input[0], &ai_output[0]);
 800175e:	492e      	ldr	r1, [pc, #184]	; (8001818 <aiSystemPerformanceProcess+0x17c>)
 8001760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001762:	4613      	mov	r3, r2
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	1a9b      	subs	r3, r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f107 0208 	add.w	r2, r7, #8
 8001772:	f107 0120 	add.w	r1, r7, #32
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa4c 	bl	8001c14 <ai_mnetwork_run>
 800177c:	63f8      	str	r0, [r7, #60]	; 0x3c
    	if (batch != 1)
 800177e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001780:	2b01      	cmp	r3, #1
 8001782:	d010      	beq.n	80017a6 <aiSystemPerformanceProcess+0x10a>
    	{
    		aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 8001784:	4924      	ldr	r1, [pc, #144]	; (8001818 <aiSystemPerformanceProcess+0x17c>)
 8001786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001788:	4613      	mov	r3, r2
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	1a9b      	subs	r3, r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f000 f9cc 	bl	8001b32 <ai_mnetwork_get_error>
 800179a:	4603      	mov	r3, r0
 800179c:	4921      	ldr	r1, [pc, #132]	; (8001824 <aiSystemPerformanceProcess+0x188>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fb44 	bl	8000e2c <aiLogErr>
    				"ai_mnetwork_run");
    		break;
 80017a4:	e033      	b.n	800180e <aiSystemPerformanceProcess+0x172>
    	}
    	y_pred = 6 * input[0] + 10;
 80017a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017aa:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80017ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017be:	ee17 3a90 	vmov	r3, s15
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38
    	printf("input  : %.2f \r\n", input[0]);
 80017c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017cc:	ec53 2b17 	vmov	r2, r3, d7
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <aiSystemPerformanceProcess+0x18c>)
 80017d2:	f00a fc55 	bl	800c080 <iprintf>
    	printf("y_pre  : %.2f \r\n", output[0]);
 80017d6:	edd7 7a00 	vldr	s15, [r7]
 80017da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017de:	ec53 2b17 	vmov	r2, r3, d7
 80017e2:	4812      	ldr	r0, [pc, #72]	; (800182c <aiSystemPerformanceProcess+0x190>)
 80017e4:	f00a fc4c 	bl	800c080 <iprintf>
    	printf("y_true : %d \r\n", y_pred);
 80017e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017ea:	4811      	ldr	r0, [pc, #68]	; (8001830 <aiSystemPerformanceProcess+0x194>)
 80017ec:	f00a fc48 	bl	800c080 <iprintf>
    	printf("\r\n===========================\r\n\r\n\r\n");
 80017f0:	4810      	ldr	r0, [pc, #64]	; (8001834 <aiSystemPerformanceProcess+0x198>)
 80017f2:	f00a fcb9 	bl	800c168 <puts>
    	HAL_Delay(5000);
 80017f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80017fa:	f001 f9ed 	bl	8002bd8 <HAL_Delay>
    for (int i=0; i < 999; i++)
 80017fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001800:	3301      	adds	r3, #1
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
 8001804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001806:	f240 32e6 	movw	r2, #998	; 0x3e6
 800180a:	4293      	cmp	r3, r2
 800180c:	dd8a      	ble.n	8001724 <aiSystemPerformanceProcess+0x88>
//        }
//    } while (r==0);
//
//    return r;

}
 800180e:	4618      	mov	r0, r3
 8001810:	3748      	adds	r7, #72	; 0x48
 8001812:	46bd      	mov	sp, r7
 8001814:	bdb0      	pop	{r4, r5, r7, pc}
 8001816:	bf00      	nop
 8001818:	24000624 	.word	0x24000624
 800181c:	0800e1f8 	.word	0x0800e1f8
 8001820:	66666667 	.word	0x66666667
 8001824:	0800e314 	.word	0x0800e314
 8001828:	0800e5e4 	.word	0x0800e5e4
 800182c:	0800e5f8 	.word	0x0800e5f8
 8001830:	0800e60c 	.word	0x0800e60c
 8001834:	0800e61c 	.word	0x0800e61c

08001838 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 800183c:	f000 fbd0 	bl	8001fe0 <MX_USART3_UART_Init>
    aiSystemPerformanceInit();
 8001840:	f7ff fefe 	bl	8001640 <aiSystemPerformanceInit>
    /* USER CODE BEGIN 0 */
    /* USER CODE END 0 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    aiSystemPerformanceProcess();
 800184c:	f7ff ff26 	bl	800169c <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 8001850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001854:	f001 f9c0 	bl	8002bd8 <HAL_Delay>
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01d      	beq.n	80018a8 <ai_mnetwork_is_valid+0x4c>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fd35 	bl	80002e0 <strlen>
 8001876:	4604      	mov	r4, r0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7fe fd31 	bl	80002e0 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	429c      	cmp	r4, r3
 8001882:	d111      	bne.n	80018a8 <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681c      	ldr	r4, [r3, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fd27 	bl	80002e0 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4620      	mov	r0, r4
 800189a:	f00a fd18 	bl	800c2ce <strncmp>
 800189e:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <ai_mnetwork_is_valid+0x4c>
        return true;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <ai_mnetwork_is_valid+0x4e>
    return false;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
	...

080018b4 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e026      	b.n	8001910 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <ai_mnetwork_handle+0x2c>
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <ai_mnetwork_handle+0x70>)
 80018d4:	4413      	add	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d101      	bne.n	80018e0 <ai_mnetwork_handle+0x2c>
            return inst;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	e01b      	b.n	8001918 <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d111      	bne.n	800190a <ai_mnetwork_handle+0x56>
 80018e6:	490f      	ldr	r1, [pc, #60]	; (8001924 <ai_mnetwork_handle+0x70>)
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d107      	bne.n	800190a <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <ai_mnetwork_handle+0x70>)
 8001906:	4413      	add	r3, r2
 8001908:	e006      	b.n	8001918 <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	ddd5      	ble.n	80018c2 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	240006b0 	.word	0x240006b0

08001928 <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8001930:	2300      	movs	r3, #0
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e019      	b.n	800196a <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <ai_mnetwork_release_handle+0x3c>
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <ai_mnetwork_release_handle+0x54>)
 8001948:	4413      	add	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	d109      	bne.n	8001964 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 8001950:	490a      	ldr	r1, [pc, #40]	; (800197c <ai_mnetwork_release_handle+0x54>)
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
            return;
 8001962:	e005      	b.n	8001970 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dde2      	ble.n	8001936 <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	240006b0 	.word	0x240006b0

08001980 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e01c      	b.n	80019ca <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <ai_mnetwork_find+0x5c>)
 800199c:	4413      	add	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff5a 	bl	800185c <ai_mnetwork_is_valid>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <ai_mnetwork_find+0x34>
            return entry->name;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	e00e      	b.n	80019d2 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	1e5a      	subs	r2, r3, #1
 80019b8:	603a      	str	r2, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <ai_mnetwork_find+0x44>
                return entry->name;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e006      	b.n	80019d2 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3301      	adds	r3, #1
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dddf      	ble.n	8001990 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	0800e6d8 	.word	0x0800e6d8

080019e0 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff ff5f 	bl	80018b4 <ai_mnetwork_handle>
 80019f6:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d108      	bne.n	8001a10 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 80019fe:	2331      	movs	r3, #49	; 0x31
 8001a00:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2210      	movs	r2, #16
 8001a06:	f362 231f 	bfi	r3, r2, #8, #24
 8001a0a:	617b      	str	r3, [r7, #20]
        return err;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	e04d      	b.n	8001aac <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	e014      	b.n	8001a40 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 8001a16:	6a3a      	ldr	r2, [r7, #32]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	4a24      	ldr	r2, [pc, #144]	; (8001ab4 <ai_mnetwork_create+0xd4>)
 8001a22:	4413      	add	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff ff17 	bl	800185c <ai_mnetwork_is_valid>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <ai_mnetwork_create+0x5a>
            found = entry;
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a38:	e005      	b.n	8001a46 <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dde7      	ble.n	8001a16 <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 8001a4c:	2314      	movs	r3, #20
 8001a4e:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2210      	movs	r2, #16
 8001a54:	f362 231f 	bfi	r3, r2, #8, #24
 8001a58:	617b      	str	r3, [r7, #20]
        return err;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	e026      	b.n	8001aac <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	68b8      	ldr	r0, [r7, #8]
 8001a70:	4798      	blx	r3
 8001a72:	4603      	mov	r3, r0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e006      	b.n	8001a86 <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	68b8      	ldr	r0, [r7, #8]
 8001a80:	4798      	blx	r3
 8001a82:	4603      	mov	r3, r0
 8001a84:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10c      	bne.n	8001aaa <ai_mnetwork_create+0xca>
 8001a90:	7d3b      	ldrb	r3, [r7, #20]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <ai_mnetwork_create+0xca>
        inst->entry = found;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9a:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	601a      	str	r2, [r3, #0]
    }

    return err;
 8001aaa:	697b      	ldr	r3, [r7, #20]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	0800e6d8 	.word	0x0800e6d8

08001ab8 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fef7 	bl	80018b4 <ai_mnetwork_handle>
 8001ac6:	60f8      	str	r0, [r7, #12]
    if (inn) {
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d011      	beq.n	8001af2 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	6852      	ldr	r2, [r2, #4]
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4798      	blx	r3
 8001adc:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d004      	beq.n	8001af2 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff ff1d 	bl	8001928 <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fed4 	bl	80018b4 <ai_mnetwork_handle>
 8001b0c:	60f8      	str	r0, [r7, #12]
    if (inn)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6852      	ldr	r2, [r2, #4]
 8001b1e:	6839      	ldr	r1, [r7, #0]
 8001b20:	4610      	mov	r0, r2
 8001b22:	4798      	blx	r3
 8001b24:	4603      	mov	r3, r0
 8001b26:	e000      	b.n	8001b2a <ai_mnetwork_get_info+0x2e>
    else
        return false;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 8001b3a:	2314      	movs	r3, #20
 8001b3c:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2210      	movs	r2, #16
 8001b42:	f362 231f 	bfi	r3, r2, #8, #24
 8001b46:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff feb3 	bl	80018b4 <ai_mnetwork_handle>
 8001b4e:	60f8      	str	r0, [r7, #12]
    if (inn)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	6852      	ldr	r2, [r2, #4]
 8001b60:	4610      	mov	r0, r2
 8001b62:	4798      	blx	r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	e000      	b.n	8001b6a <ai_mnetwork_get_error+0x38>
    else
        return err;
 8001b68:	68bb      	ldr	r3, [r7, #8]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8001b72:	b5b0      	push	{r4, r5, r7, lr}
 8001b74:	b090      	sub	sp, #64	; 0x40
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff fe99 	bl	80018b4 <ai_mnetwork_handle>
 8001b82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 8001b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d03f      	beq.n	8001c0a <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 8001b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f107 040c 	add.w	r4, r7, #12
 8001b92:	1d1d      	adds	r5, r3, #4
 8001b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ba0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	8b9b      	ldrh	r3, [r3, #28]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001bb2:	f103 0518 	add.w	r5, r3, #24
 8001bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bbe:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bc2:	e002      	b.n	8001bca <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <ai_mnetwork_init+0x76>
            par.params = params->params;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f107 040c 	add.w	r4, r7, #12
 8001bd8:	461d      	mov	r5, r3
 8001bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bde:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001be6:	e005      	b.n	8001bf4 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 8001be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	4798      	blx	r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 8001bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bfc:	6852      	ldr	r2, [r2, #4]
 8001bfe:	f107 010c 	add.w	r1, r7, #12
 8001c02:	4610      	mov	r0, r2
 8001c04:	4798      	blx	r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	e000      	b.n	8001c0c <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3740      	adds	r7, #64	; 0x40
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}

08001c14 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fe47 	bl	80018b4 <ai_mnetwork_handle>
 8001c26:	6178      	str	r0, [r7, #20]
    if (inn)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	6850      	ldr	r0, [r2, #4]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	4798      	blx	r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	e000      	b.n	8001c44 <ai_mnetwork_run+0x30>
    else
        return 0;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fe2b 	bl	80018b4 <ai_mnetwork_handle>
 8001c5e:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d011      	beq.n	8001c8a <ai_mnetwork_get_ext_data_activations+0x3e>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00e      	beq.n	8001c8a <ai_mnetwork_get_ext_data_activations+0x3e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	601a      	str	r2, [r3, #0]
         return 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e001      	b.n	8001c8e <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ca0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <SCB_EnableICache+0x3c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <SCB_EnableICache+0x3c>)
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <SCB_EnableICache+0x3c>)
 8001cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001cc4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <SCB_EnableDCache+0x7c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <SCB_EnableDCache+0x7c>)
 8001cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0b5b      	lsrs	r3, r3, #13
 8001cf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001cfa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d04:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001d0e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001d14:	490f      	ldr	r1, [pc, #60]	; (8001d54 <SCB_EnableDCache+0x7c>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ef      	bne.n	8001d06 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e5a      	subs	r2, r3, #1
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e5      	bne.n	8001cfc <SCB_EnableDCache+0x24>
 8001d30:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <SCB_EnableDCache+0x7c>)
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <SCB_EnableDCache+0x7c>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6153      	str	r3, [r2, #20]
 8001d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d44:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001d5c:	f7ff ff9c 	bl	8001c98 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001d60:	f7ff ffba 	bl	8001cd8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d64:	f000 fea6 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d68:	f000 f80e 	bl	8001d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6c:	f000 f9b6 	bl	80020dc <MX_GPIO_Init>
  MX_CRC_Init();
 8001d70:	f000 f8c2 	bl	8001ef8 <MX_CRC_Init>
  MX_ETH_Init();
 8001d74:	f000 f8e2 	bl	8001f3c <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d78:	f000 f97e 	bl	8002078 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 8001d7c:	f7ff fd5c 	bl	8001838 <MX_X_CUBE_AI_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_X_CUBE_AI_Process();
 8001d80:	f7ff fd62 	bl	8001848 <MX_X_CUBE_AI_Process>
 8001d84:	e7fc      	b.n	8001d80 <main+0x28>
	...

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b0cc      	sub	sp, #304	; 0x130
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f009 fc85 	bl	800b6a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001da0:	2220      	movs	r2, #32
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f009 fc7e 	bl	800b6a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	4618      	mov	r0, r3
 8001db0:	23bc      	movs	r3, #188	; 0xbc
 8001db2:	461a      	mov	r2, r3
 8001db4:	2100      	movs	r1, #0
 8001db6:	f009 fc76 	bl	800b6a6 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f002 f85c 	bl	8003e78 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <SystemClock_Config+0x164>)
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	4a48      	ldr	r2, [pc, #288]	; (8001eec <SystemClock_Config+0x164>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <SystemClock_Config+0x164>)
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <SystemClock_Config+0x168>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4a43      	ldr	r2, [pc, #268]	; (8001ef0 <SystemClock_Config+0x168>)
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de8:	6193      	str	r3, [r2, #24]
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <SystemClock_Config+0x168>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dfa:	bf00      	nop
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <SystemClock_Config+0x168>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e08:	d1f8      	bne.n	8001dfc <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001e2a:	2318      	movs	r3, #24
 8001e2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e36:	2304      	movs	r3, #4
 8001e38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e42:	230c      	movs	r3, #12
 8001e44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 f857 	bl	8003f0c <HAL_RCC_OscConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001e64:	f000 f9ee 	bl	8002244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e68:	233f      	movs	r3, #63	; 0x3f
 8001e6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e98:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fc0c 	bl	80046bc <HAL_RCC_ClockConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x126>
  {
    Error_Handler();
 8001eaa:	f000 f9cb 	bl	8002244 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <SystemClock_Config+0x16c>)
 8001eb4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	2200      	movs	r2, #0
 8001ebc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 ff78 	bl	8004dc4 <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x156>
  {
    Error_Handler();
 8001eda:	f000 f9b3 	bl	8002244 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001ede:	f002 f805 	bl	8003eec <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001ee2:	bf00      	nop
 8001ee4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	58000400 	.word	0x58000400
 8001ef0:	58024800 	.word	0x58024800
 8001ef4:	00040002 	.word	0x00040002

08001ef8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001efc:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001efe:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <MX_CRC_Init+0x40>)
 8001f00:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_CRC_Init+0x3c>)
 8001f22:	f000 ff97 	bl	8002e54 <HAL_CRC_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001f2c:	f000 f98a 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	24000bf0 	.word	0x24000bf0
 8001f38:	58024c00 	.word	0x58024c00

08001f3c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <MX_ETH_Init+0x94>)
 8001f44:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001f4e:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	3301      	adds	r3, #1
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	22e1      	movs	r2, #225	; 0xe1
 8001f60:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	3303      	adds	r3, #3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	3305      	adds	r3, #5
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <MX_ETH_Init+0x98>)
 8001f8a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_ETH_Init+0x9c>)
 8001f90:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f98:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <MX_ETH_Init+0x90>)
 8001f9c:	f001 f844 	bl	8003028 <HAL_ETH_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f000 f94d 	bl	8002244 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001faa:	2234      	movs	r2, #52	; 0x34
 8001fac:	2100      	movs	r1, #0
 8001fae:	480b      	ldr	r0, [pc, #44]	; (8001fdc <MX_ETH_Init+0xa0>)
 8001fb0:	f009 fb79 	bl	800b6a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_ETH_Init+0xa0>)
 8001fb6:	2221      	movs	r2, #33	; 0x21
 8001fb8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <MX_ETH_Init+0xa0>)
 8001fbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fc0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_ETH_Init+0xa0>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24000c14 	.word	0x24000c14
 8001fd0:	40028000 	.word	0x40028000
 8001fd4:	2400059c 	.word	0x2400059c
 8001fd8:	2400053c 	.word	0x2400053c
 8001fdc:	24000c84 	.word	0x24000c84

08001fe0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8001fe6:	4a23      	ldr	r2, [pc, #140]	; (8002074 <MX_USART3_UART_Init+0x94>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <MX_USART3_UART_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800201c:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_USART3_UART_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <MX_USART3_UART_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <MX_USART3_UART_Init+0x90>)
 800202a:	f004 f9bb 	bl	80063a4 <HAL_UART_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002034:	f000 f906 	bl	8002244 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002038:	2100      	movs	r1, #0
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_USART3_UART_Init+0x90>)
 800203c:	f006 fdb9 	bl	8008bb2 <HAL_UARTEx_SetTxFifoThreshold>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002046:	f000 f8fd 	bl	8002244 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800204a:	2100      	movs	r1, #0
 800204c:	4808      	ldr	r0, [pc, #32]	; (8002070 <MX_USART3_UART_Init+0x90>)
 800204e:	f006 fdee 	bl	8008c2e <HAL_UARTEx_SetRxFifoThreshold>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002058:	f000 f8f4 	bl	8002244 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_USART3_UART_Init+0x90>)
 800205e:	f006 fd6f 	bl	8008b40 <HAL_UARTEx_DisableFifoMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002068:	f000 f8ec 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2400075c 	.word	0x2400075c
 8002074:	40004800 	.word	0x40004800

08002078 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800207c:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002080:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002082:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002084:	2209      	movs	r2, #9
 8002086:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800208a:	2202      	movs	r2, #2
 800208c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002096:	2202      	movs	r2, #2
 8002098:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800209c:	2201      	movs	r2, #1
 800209e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020a6:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020c0:	f001 fd91 	bl	8003be6 <HAL_PCD_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80020ca:	f000 f8bb 	bl	8002244 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	240007e8 	.word	0x240007e8
 80020d8:	40080000 	.word	0x40080000

080020dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08c      	sub	sp, #48	; 0x30
 80020e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	4b4f      	ldr	r3, [pc, #316]	; (8002230 <MX_GPIO_Init+0x154>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	4a4d      	ldr	r2, [pc, #308]	; (8002230 <MX_GPIO_Init+0x154>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002102:	4b4b      	ldr	r3, [pc, #300]	; (8002230 <MX_GPIO_Init+0x154>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002110:	4b47      	ldr	r3, [pc, #284]	; (8002230 <MX_GPIO_Init+0x154>)
 8002112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002116:	4a46      	ldr	r2, [pc, #280]	; (8002230 <MX_GPIO_Init+0x154>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <MX_GPIO_Init+0x154>)
 8002122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <MX_GPIO_Init+0x154>)
 8002130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002134:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <MX_GPIO_Init+0x154>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800213e:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <MX_GPIO_Init+0x154>)
 8002140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	4b38      	ldr	r3, [pc, #224]	; (8002230 <MX_GPIO_Init+0x154>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002152:	4a37      	ldr	r2, [pc, #220]	; (8002230 <MX_GPIO_Init+0x154>)
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800215c:	4b34      	ldr	r3, [pc, #208]	; (8002230 <MX_GPIO_Init+0x154>)
 800215e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216a:	4b31      	ldr	r3, [pc, #196]	; (8002230 <MX_GPIO_Init+0x154>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a2f      	ldr	r2, [pc, #188]	; (8002230 <MX_GPIO_Init+0x154>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <MX_GPIO_Init+0x154>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <MX_GPIO_Init+0x154>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	4a28      	ldr	r2, [pc, #160]	; (8002230 <MX_GPIO_Init+0x154>)
 8002190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <MX_GPIO_Init+0x154>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80021ac:	4821      	ldr	r0, [pc, #132]	; (8002234 <MX_GPIO_Init+0x158>)
 80021ae:	f001 fd01 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2140      	movs	r1, #64	; 0x40
 80021b6:	4820      	ldr	r0, [pc, #128]	; (8002238 <MX_GPIO_Init+0x15c>)
 80021b8:	f001 fcfc 	bl	8003bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <MX_GPIO_Init+0x160>)
 80021c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	481b      	ldr	r0, [pc, #108]	; (8002240 <MX_GPIO_Init+0x164>)
 80021d2:	f001 fb3f 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80021d6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4811      	ldr	r0, [pc, #68]	; (8002234 <MX_GPIO_Init+0x158>)
 80021f0:	f001 fb30 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021f4:	2340      	movs	r3, #64	; 0x40
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <MX_GPIO_Init+0x15c>)
 800220c:	f001 fb22 	bl	8003854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_GPIO_Init+0x15c>)
 8002224:	f001 fb16 	bl	8003854 <HAL_GPIO_Init>

}
 8002228:	bf00      	nop
 800222a:	3730      	adds	r7, #48	; 0x30
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	58024400 	.word	0x58024400
 8002234:	58020400 	.word	0x58020400
 8002238:	58021800 	.word	0x58021800
 800223c:	11110000 	.word	0x11110000
 8002240:	58020800 	.word	0x58020800

08002244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	3303      	adds	r3, #3
 8002264:	f023 0303 	bic.w	r3, r3, #3
 8002268:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <network_configure_activations+0x48>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <network_configure_activations+0x48>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <network_configure_activations+0x4c>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <network_configure_activations+0x4c>)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(NULL);
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <network_configure_activations+0x50>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
    dense_1_output_array.data_start = AI_PTR(NULL);
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <network_configure_activations+0x50>)
 800228a:	2200      	movs	r2, #0
 800228c:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	240000a0 	.word	0x240000a0
 80022a0:	240000b0 	.word	0x240000b0
 80022a4:	240000c0 	.word	0x240000c0

080022a8 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80022b8:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <network_configure_weights+0x8c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <network_configure_weights+0x8c>)
 80022c2:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 60);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	333c      	adds	r3, #60	; 0x3c
 80022c8:	4a1a      	ldr	r2, [pc, #104]	; (8002334 <network_configure_weights+0x8c>)
 80022ca:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 60);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <network_configure_weights+0x8c>)
 80022d2:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <network_configure_weights+0x90>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <network_configure_weights+0x90>)
 80022de:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 40);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3328      	adds	r3, #40	; 0x28
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <network_configure_weights+0x90>)
 80022e6:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 40);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3328      	adds	r3, #40	; 0x28
 80022ec:	4a12      	ldr	r2, [pc, #72]	; (8002338 <network_configure_weights+0x90>)
 80022ee:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <network_configure_weights+0x94>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022f8:	4a10      	ldr	r2, [pc, #64]	; (800233c <network_configure_weights+0x94>)
 80022fa:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 20);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3314      	adds	r3, #20
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <network_configure_weights+0x94>)
 8002302:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 20);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3314      	adds	r3, #20
 8002308:	4a0c      	ldr	r2, [pc, #48]	; (800233c <network_configure_weights+0x94>)
 800230a:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <network_configure_weights+0x98>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002314:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <network_configure_weights+0x98>)
 8002316:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 8002318:	4a09      	ldr	r2, [pc, #36]	; (8002340 <network_configure_weights+0x98>)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 800231e:	4a08      	ldr	r2, [pc, #32]	; (8002340 <network_configure_weights+0x98>)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	24000060 	.word	0x24000060
 8002338:	24000070 	.word	0x24000070
 800233c:	24000080 	.word	0x24000080
 8002340:	24000090 	.word	0x24000090

08002344 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b0a0      	sub	sp, #128	; 0x80
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f007 f932 	bl	80095b8 <ai_platform_context_acquire>
 8002354:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d04c      	beq.n	80023f6 <ai_network_get_info+0xb2>
 800235c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d049      	beq.n	80023f6 <ai_network_get_info+0xb2>
  {
    ai_network_report r = {
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	2274      	movs	r2, #116	; 0x74
 8002368:	2100      	movs	r1, #0
 800236a:	4618      	mov	r0, r3
 800236c:	f009 f99b 	bl	800b6a6 <memset>
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <ai_network_get_info+0xbc>)
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <ai_network_get_info+0xc0>)
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <ai_network_get_info+0xc4>)
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <ai_network_get_info+0xc8>)
 800237e:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8002380:	f006 ffa6 	bl	80092d0 <ai_platform_runtime_get_revision>
 8002384:	4603      	mov	r3, r0
    ai_network_report r = {
 8002386:	61bb      	str	r3, [r7, #24]
 8002388:	f006 fff0 	bl	800936c <ai_platform_runtime_get_version>
 800238c:	4603      	mov	r3, r0
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <ai_network_get_info+0xcc>)
 8002392:	623b      	str	r3, [r7, #32]
 8002394:	2305      	movs	r3, #5
 8002396:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800239a:	2301      	movs	r3, #1
 800239c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80023ac:	2303      	movs	r3, #3
 80023ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80023b2:	f007 f83d 	bl	8009430 <ai_platform_api_get_version>
 80023b6:	4603      	mov	r3, r0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ba:	f007 f89b 	bl	80094f4 <ai_platform_interface_api_get_version>
 80023be:	4603      	mov	r3, r0
 80023c0:	633b      	str	r3, [r7, #48]	; 0x30
 80023c2:	230a      	movs	r3, #10
 80023c4:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 80023c6:	f107 0308 	add.w	r3, r7, #8
 80023ca:	4619      	mov	r1, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f007 f9d3 	bl	8009778 <ai_platform_api_get_network_report>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f083 0301 	eor.w	r3, r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <ai_network_get_info+0x9e>
 80023de:	2300      	movs	r3, #0
 80023e0:	e00a      	b.n	80023f8 <ai_network_get_info+0xb4>

    *report = r;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	2274      	movs	r2, #116	; 0x74
 80023ec:	4619      	mov	r1, r3
 80023ee:	f009 f94f 	bl	800b690 <memcpy>
    return true;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <ai_network_get_info+0xb4>
  }

  return false;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3780      	adds	r7, #128	; 0x80
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	0800e658 	.word	0x0800e658
 8002404:	0800e660 	.word	0x0800e660
 8002408:	0800e684 	.word	0x0800e684
 800240c:	0800e6a0 	.word	0x0800e6a0
 8002410:	0800e6b8 	.word	0x0800e6b8

08002414 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f007 f91d 	bl	800965c <ai_platform_network_get_error>
 8002422:	4603      	mov	r3, r0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af02      	add	r7, sp, #8
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8002436:	2300      	movs	r3, #0
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	2303      	movs	r3, #3
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	2301      	movs	r3, #1
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <ai_network_create+0x28>)
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f007 fc25 	bl	8009c94 <ai_platform_network_create>
 800244a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	24000000 	.word	0x24000000

08002458 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f007 fc9b 	bl	8009d9c <ai_platform_network_destroy>
 8002466:	4603      	mov	r3, r0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800247a:	6839      	ldr	r1, [r7, #0]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f007 fd17 	bl	8009eb0 <ai_platform_network_init>
 8002482:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <ai_network_init+0x1e>
 800248a:	2300      	movs	r3, #0
 800248c:	e02b      	b.n	80024e6 <ai_network_init+0x76>

  ai_bool ok = true;
 800248e:	2301      	movs	r3, #1
 8002490:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff06 	bl	80022a8 <network_configure_weights>
 800249c:	4603      	mov	r3, r0
 800249e:	461a      	mov	r2, r3
 80024a0:	7afb      	ldrb	r3, [r7, #11]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf14      	ite	ne
 80024a8:	2301      	movne	r3, #1
 80024aa:	2300      	moveq	r3, #0
 80024ac:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3318      	adds	r3, #24
 80024b2:	4619      	mov	r1, r3
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff fecd 	bl	8002254 <network_configure_activations>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	7afb      	ldrb	r3, [r7, #11]
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f007 fdd7 	bl	800a080 <ai_platform_network_post_init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	72fb      	strb	r3, [r7, #11]

  return ok;
 80024e4:	7afb      	ldrb	r3, [r7, #11]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f007 fe6a 	bl	800a1d8 <ai_platform_network_process>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <ai_network_forward>:

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 8002518:	2200      	movs	r2, #0
 800251a:	6839      	ldr	r1, [r7, #0]
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f007 fe5b 	bl	800a1d8 <ai_platform_network_process>
 8002522:	4603      	mov	r3, r0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
    0xa6, 0x81, 0xbf, 0xc1, 0x7c, 0x09, 0x3f, 0x0d, 0x54,
    0xd2, 0xbf, 0xbf, 0x88, 0x0f, 0xc0, 0xd1, 0x06, 0xad,
    0xbf, 0xe3, 0xc5, 0x8c, 0xbf, 0xdc, 0x84, 0xa2, 0x3f
  };

  return AI_HANDLE_PTR(s_network_weights);
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <ai_network_data_weights_get+0x10>)

}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	0800e748 	.word	0x0800e748

08002540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_MspInit+0x30>)
 8002548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800254c:	4a08      	ldr	r2, [pc, #32]	; (8002570 <HAL_MspInit+0x30>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_MspInit+0x30>)
 8002558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	58024400 	.word	0x58024400

08002574 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_CRC_MspInit+0x3c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10e      	bne.n	80025a4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_CRC_MspInit+0x40>)
 8002588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800258c:	4a09      	ldr	r2, [pc, #36]	; (80025b4 <HAL_CRC_MspInit+0x40>)
 800258e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002596:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_CRC_MspInit+0x40>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	58024c00 	.word	0x58024c00
 80025b4:	58024400 	.word	0x58024400

080025b8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08e      	sub	sp, #56	; 0x38
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a59      	ldr	r2, [pc, #356]	; (800273c <HAL_ETH_MspInit+0x184>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	f040 80ab 	bne.w	8002732 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80025dc:	4b58      	ldr	r3, [pc, #352]	; (8002740 <HAL_ETH_MspInit+0x188>)
 80025de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025e2:	4a57      	ldr	r2, [pc, #348]	; (8002740 <HAL_ETH_MspInit+0x188>)
 80025e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ec:	4b54      	ldr	r3, [pc, #336]	; (8002740 <HAL_ETH_MspInit+0x188>)
 80025ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80025fa:	4b51      	ldr	r3, [pc, #324]	; (8002740 <HAL_ETH_MspInit+0x188>)
 80025fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002606:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800260a:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <HAL_ETH_MspInit+0x188>)
 800260c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002618:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_ETH_MspInit+0x188>)
 800261a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800261e:	4a48      	ldr	r2, [pc, #288]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002628:	4b45      	ldr	r3, [pc, #276]	; (8002740 <HAL_ETH_MspInit+0x188>)
 800262a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <HAL_ETH_MspInit+0x188>)
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b3a      	ldr	r3, [pc, #232]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265a:	4a39      	ldr	r2, [pc, #228]	; (8002740 <HAL_ETH_MspInit+0x188>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002678:	4a31      	ldr	r2, [pc, #196]	; (8002740 <HAL_ETH_MspInit+0x188>)
 800267a:	f043 0302 	orr.w	r3, r3, #2
 800267e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002696:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <HAL_ETH_MspInit+0x188>)
 8002698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800269c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_ETH_MspInit+0x188>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80026ae:	2332      	movs	r3, #50	; 0x32
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026be:	230b      	movs	r3, #11
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	481e      	ldr	r0, [pc, #120]	; (8002744 <HAL_ETH_MspInit+0x18c>)
 80026ca:	f001 f8c3 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80026ce:	2386      	movs	r3, #134	; 0x86
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026de:	230b      	movs	r3, #11
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e6:	4619      	mov	r1, r3
 80026e8:	4817      	ldr	r0, [pc, #92]	; (8002748 <HAL_ETH_MspInit+0x190>)
 80026ea:	f001 f8b3 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80026ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002700:	230b      	movs	r3, #11
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002708:	4619      	mov	r1, r3
 800270a:	4810      	ldr	r0, [pc, #64]	; (800274c <HAL_ETH_MspInit+0x194>)
 800270c:	f001 f8a2 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002710:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	2300      	movs	r3, #0
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002722:	230b      	movs	r3, #11
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272a:	4619      	mov	r1, r3
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <HAL_ETH_MspInit+0x198>)
 800272e:	f001 f891 	bl	8003854 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3738      	adds	r7, #56	; 0x38
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40028000 	.word	0x40028000
 8002740:	58024400 	.word	0x58024400
 8002744:	58020800 	.word	0x58020800
 8002748:	58020000 	.word	0x58020000
 800274c:	58020400 	.word	0x58020400
 8002750:	58021800 	.word	0x58021800

08002754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	; 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_UART_MspInit+0x88>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d12e      	bne.n	80027d4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 8002778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800277c:	4a18      	ldr	r2, [pc, #96]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 800277e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002782:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 8002788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800278c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 8002796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a4:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_UART_MspInit+0x8c>)
 80027a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80027b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c4:	2307      	movs	r3, #7
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <HAL_UART_MspInit+0x90>)
 80027d0:	f001 f840 	bl	8003854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40004800 	.word	0x40004800
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58020c00 	.word	0x58020c00

080027e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a21      	ldr	r2, [pc, #132]	; (800288c <HAL_PCD_MspInit+0xa4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d13b      	bne.n	8002882 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_PCD_MspInit+0xa8>)
 800280c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_PCD_MspInit+0xa8>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_PCD_MspInit+0xa8>)
 800281c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002828:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800283a:	230a      	movs	r3, #10
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4813      	ldr	r0, [pc, #76]	; (8002894 <HAL_PCD_MspInit+0xac>)
 8002846:	f001 f805 	bl	8003854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800284a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	4619      	mov	r1, r3
 800285e:	480d      	ldr	r0, [pc, #52]	; (8002894 <HAL_PCD_MspInit+0xac>)
 8002860:	f000 fff8 	bl	8003854 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <HAL_PCD_MspInit+0xa8>)
 8002866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <HAL_PCD_MspInit+0xa8>)
 800286c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002870:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_PCD_MspInit+0xa8>)
 8002876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800287a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	; 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40080000 	.word	0x40080000
 8002890:	58024400 	.word	0x58024400
 8002894:	58020000 	.word	0x58020000

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028a6:	b480      	push	{r7}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028aa:	e7fe      	b.n	80028aa <HardFault_Handler+0x4>

080028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <MemManage_Handler+0x4>

080028b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <BusFault_Handler+0x4>

080028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <UsageFault_Handler+0x4>

080028be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028ec:	f000 f954 	bl	8002b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	e00a      	b.n	800291c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002906:	f3af 8000 	nop.w
 800290a:	4601      	mov	r1, r0
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	60ba      	str	r2, [r7, #8]
 8002912:	b2ca      	uxtb	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	dbf0      	blt.n	8002906 <_read+0x12>
	}

return len;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_close>:
	}
	return len;
}

int _close(int file)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
	return -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002956:	605a      	str	r2, [r3, #4]
	return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_isatty>:

int _isatty(int file)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
	return 1;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <_sbrk+0x50>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d102      	bne.n	80029ae <_sbrk+0x16>
		heap_end = &end;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <_sbrk+0x50>)
 80029aa:	4a10      	ldr	r2, [pc, #64]	; (80029ec <_sbrk+0x54>)
 80029ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <_sbrk+0x50>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <_sbrk+0x50>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	466a      	mov	r2, sp
 80029be:	4293      	cmp	r3, r2
 80029c0:	d907      	bls.n	80029d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029c2:	f008 fcb9 	bl	800b338 <__errno>
 80029c6:	4602      	mov	r2, r0
 80029c8:	230c      	movs	r3, #12
 80029ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80029cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d0:	e006      	b.n	80029e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <_sbrk+0x50>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <_sbrk+0x50>)
 80029dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	24000750 	.word	0x24000750
 80029ec:	24000cc0 	.word	0x24000cc0

080029f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <SystemInit+0xac>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <SystemInit+0xac>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a04:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <SystemInit+0xb0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a25      	ldr	r2, [pc, #148]	; (8002aa0 <SystemInit+0xb0>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a10:	4b23      	ldr	r3, [pc, #140]	; (8002aa0 <SystemInit+0xb0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <SystemInit+0xb0>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4921      	ldr	r1, [pc, #132]	; (8002aa0 <SystemInit+0xb0>)
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <SystemInit+0xb4>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <SystemInit+0xb0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <SystemInit+0xb0>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <SystemInit+0xb0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <SystemInit+0xb0>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <SystemInit+0xb0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <SystemInit+0xb0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <SystemInit+0xb0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <SystemInit+0xb0>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <SystemInit+0xb0>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <SystemInit+0xb0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <SystemInit+0xb0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <SystemInit+0xb0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <SystemInit+0xb0>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <SystemInit+0xb0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <SystemInit+0xb8>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <SystemInit+0xbc>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a82:	d202      	bcs.n	8002a8a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <SystemInit+0xc0>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SystemInit+0xac>)
 8002a8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a90:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002aa8:	5c001000 	.word	0x5c001000
 8002aac:	ffff0000 	.word	0xffff0000
 8002ab0:	51008108 	.word	0x51008108

08002ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aba:	2003      	movs	r0, #3
 8002abc:	f000 f998 	bl	8002df0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ac0:	f001 ffb2 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_Init+0x68>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <HAL_Init+0x6c>)
 8002ad2:	5cd3      	ldrb	r3, [r2, r3]
 8002ad4:	f003 031f 	and.w	r3, r3, #31
 8002ad8:	fa21 f303 	lsr.w	r3, r1, r3
 8002adc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_Init+0x68>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <HAL_Init+0x6c>)
 8002ae8:	5cd3      	ldrb	r3, [r2, r3]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
 8002af4:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <HAL_Init+0x70>)
 8002af6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <HAL_Init+0x74>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002afe:	2000      	movs	r0, #0
 8002b00:	f000 f814 	bl	8002b2c <HAL_InitTick>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e002      	b.n	8002b14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b0e:	f7ff fd17 	bl	8002540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	0800e788 	.word	0x0800e788
 8002b24:	24000360 	.word	0x24000360
 8002b28:	2400035c 	.word	0x2400035c

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_InitTick+0x60>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e021      	b.n	8002b84 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b40:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <HAL_InitTick+0x64>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <HAL_InitTick+0x60>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f96f 	bl	8002e3a <HAL_SYSTICK_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00e      	b.n	8002b84 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b0f      	cmp	r3, #15
 8002b6a:	d80a      	bhi.n	8002b82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b74:	f000 f947 	bl	8002e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <HAL_InitTick+0x68>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	24000368 	.word	0x24000368
 8002b90:	2400035c 	.word	0x2400035c
 8002b94:	24000364 	.word	0x24000364

08002b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x20>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_IncTick+0x24>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_IncTick+0x24>)
 8002baa:	6013      	str	r3, [r2, #0]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	24000368 	.word	0x24000368
 8002bbc:	24000cb8 	.word	0x24000cb8

08002bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_GetTick+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	24000cb8 	.word	0x24000cb8

08002bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff ffee 	bl	8002bc0 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf0:	d005      	beq.n	8002bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_Delay+0x40>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfe:	bf00      	nop
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d8f7      	bhi.n	8002c00 <HAL_Delay+0x28>
  {
  }
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24000368 	.word	0x24000368

08002c1c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
 8002c20:	f04f 7384 	mov.w	r3, #17301504	; 0x1080000
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetREVID+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0c1b      	lsrs	r3, r3, #16
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	5c001000 	.word	0x5c001000

08002c48 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <HAL_GetDEVID+0x18>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	5c001000 	.word	0x5c001000

08002c64 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	58000400 	.word	0x58000400

08002c8c <__NVIC_SetPriorityGrouping>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cba:	4a04      	ldr	r2, [pc, #16]	; (8002ccc <__NVIC_SetPriorityGrouping+0x40>)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	60d3      	str	r3, [r2, #12]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00
 8002cd0:	05fa0000 	.word	0x05fa0000

08002cd4 <__NVIC_GetPriorityGrouping>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <__NVIC_GetPriorityGrouping+0x18>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 0307 	and.w	r3, r3, #7
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_SetPriority>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	; (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dbc:	d301      	bcc.n	8002dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <SysTick_Config+0x40>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dca:	210f      	movs	r1, #15
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd0:	f7ff ff8e 	bl	8002cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <SysTick_Config+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <SysTick_Config+0x40>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff47 	bl	8002c8c <__NVIC_SetPriorityGrouping>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff5e 	bl	8002cd4 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff90 	bl	8002d44 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5f 	bl	8002cf0 <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff ffb2 	bl	8002dac <SysTick_Config>
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e054      	b.n	8002f10 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7f5b      	ldrb	r3, [r3, #29]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fb7c 	bl	8002574 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a22      	ldr	r2, [pc, #136]	; (8002f18 <HAL_CRC_Init+0xc4>)
 8002e90:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0218 	bic.w	r2, r2, #24
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	e00c      	b.n	8002ebe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	461a      	mov	r2, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f834 	bl	8002f1c <HAL_CRCEx_Polynomial_Set>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e028      	b.n	8002f10 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	795b      	ldrb	r3, [r3, #5]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ece:	611a      	str	r2, [r3, #16]
 8002ed0:	e004      	b.n	8002edc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6912      	ldr	r2, [r2, #16]
 8002eda:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	04c11db7 	.word	0x04c11db7

08002f1c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f2c:	231f      	movs	r3, #31
 8002f2e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f30:	bf00      	nop
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1e5a      	subs	r2, r3, #1
 8002f36:	613a      	str	r2, [r7, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_CRCEx_Polynomial_Set+0x34>
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b18      	cmp	r3, #24
 8002f54:	d846      	bhi.n	8002fe4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f56:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5c:	08002feb 	.word	0x08002feb
 8002f60:	08002fe5 	.word	0x08002fe5
 8002f64:	08002fe5 	.word	0x08002fe5
 8002f68:	08002fe5 	.word	0x08002fe5
 8002f6c:	08002fe5 	.word	0x08002fe5
 8002f70:	08002fe5 	.word	0x08002fe5
 8002f74:	08002fe5 	.word	0x08002fe5
 8002f78:	08002fe5 	.word	0x08002fe5
 8002f7c:	08002fd9 	.word	0x08002fd9
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	08002fe5 	.word	0x08002fe5
 8002f88:	08002fe5 	.word	0x08002fe5
 8002f8c:	08002fe5 	.word	0x08002fe5
 8002f90:	08002fe5 	.word	0x08002fe5
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fe5 	.word	0x08002fe5
 8002f9c:	08002fcd 	.word	0x08002fcd
 8002fa0:	08002fe5 	.word	0x08002fe5
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08002fe5 	.word	0x08002fe5
 8002fac:	08002fe5 	.word	0x08002fe5
 8002fb0:	08002fe5 	.word	0x08002fe5
 8002fb4:	08002fe5 	.word	0x08002fe5
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002fc1 	.word	0x08002fc1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d913      	bls.n	8002fee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fca:	e010      	b.n	8002fee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	d90f      	bls.n	8002ff2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fd6:	e00c      	b.n	8002ff2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	d90b      	bls.n	8002ff6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fe2:	e008      	b.n	8002ff6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	e006      	b.n	8002ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fea:	bf00      	nop
 8002fec:	e004      	b.n	8002ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ff6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ff8:	7dfb      	ldrb	r3, [r7, #23]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 0118 	bic.w	r1, r3, #24
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e0c6      	b.n	80031c8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fab8 	bl	80025b8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2223      	movs	r2, #35	; 0x23
 800304c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <HAL_ETH_Init+0x1a8>)
 8003050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003054:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_ETH_Init+0x1a8>)
 8003056:	f043 0302 	orr.w	r3, r3, #2
 800305a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800305e:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <HAL_ETH_Init+0x1a8>)
 8003060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	7a1b      	ldrb	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003074:	2000      	movs	r0, #0
 8003076:	f7ff fdf5 	bl	8002c64 <HAL_SYSCFG_ETHInterfaceSelect>
 800307a:	e003      	b.n	8003084 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800307c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003080:	f7ff fdf0 	bl	8002c64 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800309c:	f7ff fd90 	bl	8002bc0 <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80030a2:	e00f      	b.n	80030c4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80030a4:	f7ff fd8c 	bl	8002bc0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030b2:	d907      	bls.n	80030c4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2204      	movs	r2, #4
 80030b8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	22e0      	movs	r2, #224	; 0xe0
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e081      	b.n	80031c8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1e6      	bne.n	80030a4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fac0 	bl	800365c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80030dc:	f001 fe16 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <HAL_ETH_Init+0x1ac>)
 80030e4:	fba3 2302 	umull	r2, r3, r3, r2
 80030e8:	0c9a      	lsrs	r2, r3, #18
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3a01      	subs	r2, #1
 80030f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fa13 	bl	8003520 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003110:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003114:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	22e0      	movs	r2, #224	; 0xe0
 800312c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e04a      	b.n	80031c8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	f241 1308 	movw	r3, #4360	; 0x1108
 800313a:	4413      	add	r3, r2
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <HAL_ETH_Init+0x1b0>)
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6952      	ldr	r2, [r2, #20]
 8003146:	0052      	lsls	r2, r2, #1
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	431a      	orrs	r2, r3
 800314e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003152:	440b      	add	r3, r1
 8003154:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fad8 	bl	800370c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fb1c 	bl	800379a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	3305      	adds	r3, #5
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	3303      	adds	r3, #3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	061a      	lsls	r2, r3, #24
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	3302      	adds	r3, #2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	3301      	adds	r3, #1
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80031ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80031b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2210      	movs	r2, #16
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2210      	movs	r2, #16
 80031c4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58024400 	.word	0x58024400
 80031d4:	431bde83 	.word	0x431bde83
 80031d8:	ffff8001 	.word	0xffff8001

080031dc <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80031ee:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	791b      	ldrb	r3, [r3, #4]
 80031f4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80031f6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	7b1b      	ldrb	r3, [r3, #12]
 80031fc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80031fe:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	7b5b      	ldrb	r3, [r3, #13]
 8003204:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003206:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	7b9b      	ldrb	r3, [r3, #14]
 800320c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800320e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	7bdb      	ldrb	r3, [r3, #15]
 8003214:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003216:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	7c12      	ldrb	r2, [r2, #16]
 800321c:	2a00      	cmp	r2, #0
 800321e:	d102      	bne.n	8003226 <ETH_SetMACConfig+0x4a>
 8003220:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003224:	e000      	b.n	8003228 <ETH_SetMACConfig+0x4c>
 8003226:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003228:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	7c52      	ldrb	r2, [r2, #17]
 800322e:	2a00      	cmp	r2, #0
 8003230:	d102      	bne.n	8003238 <ETH_SetMACConfig+0x5c>
 8003232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003236:	e000      	b.n	800323a <ETH_SetMACConfig+0x5e>
 8003238:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800323a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	7c9b      	ldrb	r3, [r3, #18]
 8003240:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003242:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003248:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800324e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	7f1b      	ldrb	r3, [r3, #28]
 8003254:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8003256:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	7f5b      	ldrb	r3, [r3, #29]
 800325c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800325e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	7f92      	ldrb	r2, [r2, #30]
 8003264:	2a00      	cmp	r2, #0
 8003266:	d102      	bne.n	800326e <ETH_SetMACConfig+0x92>
 8003268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326c:	e000      	b.n	8003270 <ETH_SetMACConfig+0x94>
 800326e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003270:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	7fdb      	ldrb	r3, [r3, #31]
 8003276:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003278:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003280:	2a00      	cmp	r2, #0
 8003282:	d102      	bne.n	800328a <ETH_SetMACConfig+0xae>
 8003284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003288:	e000      	b.n	800328c <ETH_SetMACConfig+0xb0>
 800328a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800328c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003292:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800329a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800329c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b56      	ldr	r3, [pc, #344]	; (8003408 <ETH_SetMACConfig+0x22c>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	68f9      	ldr	r1, [r7, #12]
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032c6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80032c8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032d0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80032d2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032da:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80032dc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d102      	bne.n	80032ee <ETH_SetMACConfig+0x112>
 80032e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032ec:	e000      	b.n	80032f0 <ETH_SetMACConfig+0x114>
 80032ee:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80032f0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4b42      	ldr	r3, [pc, #264]	; (800340c <ETH_SetMACConfig+0x230>)
 8003302:	4013      	ands	r3, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	430b      	orrs	r3, r1
 800330c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003314:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <ETH_SetMACConfig+0x234>)
 8003326:	4013      	ands	r3, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	430b      	orrs	r3, r1
 8003330:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003338:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800333e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003346:	2a00      	cmp	r2, #0
 8003348:	d101      	bne.n	800334e <ETH_SetMACConfig+0x172>
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	e000      	b.n	8003350 <ETH_SetMACConfig+0x174>
 800334e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003350:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003362:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003366:	4013      	ands	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	430b      	orrs	r3, r1
 8003370:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003378:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003380:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f023 0103 	bic.w	r1, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	430a      	orrs	r2, r1
 800339a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80033a6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	d101      	bne.n	80033ca <ETH_SetMACConfig+0x1ee>
 80033c6:	2240      	movs	r2, #64	; 0x40
 80033c8:	e000      	b.n	80033cc <ETH_SetMACConfig+0x1f0>
 80033ca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80033cc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80033d4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033d6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80033de:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80033ec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	00048083 	.word	0x00048083
 800340c:	c0f88000 	.word	0xc0f88000
 8003410:	fffffef0 	.word	0xfffffef0

08003414 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b38      	ldr	r3, [pc, #224]	; (800350c <ETH_SetDMAConfig+0xf8>)
 800342a:	4013      	ands	r3, r2
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	6809      	ldr	r1, [r1, #0]
 8003434:	431a      	orrs	r2, r3
 8003436:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800343a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	791b      	ldrb	r3, [r3, #4]
 8003440:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003446:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	7b1b      	ldrb	r3, [r3, #12]
 800344c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	f241 0304 	movw	r3, #4100	; 0x1004
 800345a:	4413      	add	r3, r2
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <ETH_SetDMAConfig+0xfc>)
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	431a      	orrs	r2, r3
 800346a:	f241 0304 	movw	r3, #4100	; 0x1004
 800346e:	440b      	add	r3, r1
 8003470:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	7b5b      	ldrb	r3, [r3, #13]
 8003476:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <ETH_SetDMAConfig+0x100>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6811      	ldr	r1, [r2, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	431a      	orrs	r2, r3
 8003496:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800349a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	7d1b      	ldrb	r3, [r3, #20]
 80034a4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80034a6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	7f5b      	ldrb	r3, [r3, #29]
 80034ac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f241 1304 	movw	r3, #4356	; 0x1104
 80034ba:	4413      	add	r3, r2
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <ETH_SetDMAConfig+0x104>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6811      	ldr	r1, [r2, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	f241 1304 	movw	r3, #4356	; 0x1104
 80034ce:	440b      	add	r3, r1
 80034d0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	7f1b      	ldrb	r3, [r3, #28]
 80034d6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	f241 1308 	movw	r3, #4360	; 0x1108
 80034e8:	4413      	add	r3, r2
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <ETH_SetDMAConfig+0x108>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6811      	ldr	r1, [r2, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	f241 1308 	movw	r3, #4360	; 0x1108
 80034fc:	440b      	add	r3, r1
 80034fe:	601a      	str	r2, [r3, #0]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	ffff87fd 	.word	0xffff87fd
 8003510:	ffff2ffe 	.word	0xffff2ffe
 8003514:	fffec000 	.word	0xfffec000
 8003518:	ffc0efef 	.word	0xffc0efef
 800351c:	7fc0ffff 	.word	0x7fc0ffff

08003520 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0a4      	sub	sp, #144	; 0x90
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800352e:	2300      	movs	r3, #0
 8003530:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003532:	2300      	movs	r3, #0
 8003534:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003538:	2300      	movs	r3, #0
 800353a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800355c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003568:	2300      	movs	r3, #0
 800356a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003578:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800357c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003584:	2300      	movs	r3, #0
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800359a:	2300      	movs	r3, #0
 800359c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800359e:	2300      	movs	r3, #0
 80035a0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80035a2:	2300      	movs	r3, #0
 80035a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80035b8:	2320      	movs	r3, #32
 80035ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80035ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035d4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80035dc:	2302      	movs	r3, #2
 80035de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80035fa:	2300      	movs	r3, #0
 80035fc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fde6 	bl	80031dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003610:	2301      	movs	r3, #1
 8003612:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800361c:	2300      	movs	r3, #0
 800361e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003626:	2300      	movs	r3, #0
 8003628:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800362a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800362e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003634:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003638:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003640:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003646:	f107 0308 	add.w	r3, r7, #8
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fee1 	bl	8003414 <ETH_SetDMAConfig>
}
 8003652:	bf00      	nop
 8003654:	3790      	adds	r7, #144	; 0x90
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800366c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003674:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003676:	f001 fb49 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 800367a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d908      	bls.n	8003696 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d804      	bhi.n	8003696 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	e027      	b.n	80036e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	4a18      	ldr	r2, [pc, #96]	; (80036fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d908      	bls.n	80036b0 <ETH_MAC_MDIO_ClkConfig+0x54>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4a17      	ldr	r2, [pc, #92]	; (8003700 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d804      	bhi.n	80036b0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e01a      	b.n	80036e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d903      	bls.n	80036c0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d911      	bls.n	80036e4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4a10      	ldr	r2, [pc, #64]	; (8003704 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d908      	bls.n	80036da <ETH_MAC_MDIO_ClkConfig+0x7e>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a0f      	ldr	r2, [pc, #60]	; (8003708 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d804      	bhi.n	80036da <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	e005      	b.n	80036e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e000      	b.n	80036e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80036e4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	01312cff 	.word	0x01312cff
 80036fc:	02160ebf 	.word	0x02160ebf
 8003700:	039386ff 	.word	0x039386ff
 8003704:	05f5e0ff 	.word	0x05f5e0ff
 8003708:	08f0d17f 	.word	0x08f0d17f

0800370c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e01d      	b.n	8003756 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68d9      	ldr	r1, [r3, #12]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	440b      	add	r3, r1
 800372a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	3206      	adds	r2, #6
 800374c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	3301      	adds	r3, #1
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d9de      	bls.n	800371a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f241 132c 	movw	r3, #4396	; 0x112c
 800376a:	4413      	add	r3, r2
 800376c:	2203      	movs	r2, #3
 800376e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f241 1314 	movw	r3, #4372	; 0x1114
 800377c:	4413      	add	r3, r2
 800377e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800378c:	601a      	str	r2, [r3, #0]
}
 800378e:	bf00      	nop
 8003790:	3714      	adds	r7, #20
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e024      	b.n	80037f2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6919      	ldr	r1, [r3, #16]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2200      	movs	r2, #0
 80037dc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	330a      	adds	r3, #10
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3301      	adds	r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d9d7      	bls.n	80037a8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f241 1330 	movw	r3, #4400	; 0x1130
 800381e:	4413      	add	r3, r2
 8003820:	2203      	movs	r2, #3
 8003822:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6919      	ldr	r1, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f241 131c 	movw	r3, #4380	; 0x111c
 8003830:	4413      	add	r3, r2
 8003832:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	f241 1328 	movw	r3, #4392	; 0x1128
 8003844:	4413      	add	r3, r2
 8003846:	6019      	str	r1, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003862:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_GPIO_Init+0x234>)
 8003864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003866:	e194      	b.n	8003b92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2101      	movs	r1, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa01 f303 	lsl.w	r3, r1, r3
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8186 	beq.w	8003b8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d00b      	beq.n	80038a0 <HAL_GPIO_Init+0x4c>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d007      	beq.n	80038a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003894:	2b11      	cmp	r3, #17
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b12      	cmp	r3, #18
 800389e:	d130      	bne.n	8003902 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038d6:	2201      	movs	r2, #1
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 0201 	and.w	r2, r3, #1
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_Init+0xee>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b12      	cmp	r3, #18
 8003940:	d123      	bne.n	800398a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	08da      	lsrs	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	08da      	lsrs	r2, r3, #3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3208      	adds	r2, #8
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	2203      	movs	r2, #3
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0203 	and.w	r2, r3, #3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80e0 	beq.w	8003b8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039cc:	4b2f      	ldr	r3, [pc, #188]	; (8003a8c <HAL_GPIO_Init+0x238>)
 80039ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039d2:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_GPIO_Init+0x238>)
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80039dc:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <HAL_GPIO_Init+0x238>)
 80039de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ea:	4a29      	ldr	r2, [pc, #164]	; (8003a90 <HAL_GPIO_Init+0x23c>)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	3302      	adds	r3, #2
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <HAL_GPIO_Init+0x240>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d052      	beq.n	8003abc <HAL_GPIO_Init+0x268>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_GPIO_Init+0x244>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d031      	beq.n	8003a82 <HAL_GPIO_Init+0x22e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_GPIO_Init+0x248>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02b      	beq.n	8003a7e <HAL_GPIO_Init+0x22a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	; (8003aa0 <HAL_GPIO_Init+0x24c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d025      	beq.n	8003a7a <HAL_GPIO_Init+0x226>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_GPIO_Init+0x250>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d01f      	beq.n	8003a76 <HAL_GPIO_Init+0x222>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_GPIO_Init+0x254>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d019      	beq.n	8003a72 <HAL_GPIO_Init+0x21e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <HAL_GPIO_Init+0x258>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_GPIO_Init+0x21a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_GPIO_Init+0x25c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00d      	beq.n	8003a6a <HAL_GPIO_Init+0x216>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a18      	ldr	r2, [pc, #96]	; (8003ab4 <HAL_GPIO_Init+0x260>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <HAL_GPIO_Init+0x212>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a17      	ldr	r2, [pc, #92]	; (8003ab8 <HAL_GPIO_Init+0x264>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d101      	bne.n	8003a62 <HAL_GPIO_Init+0x20e>
 8003a5e:	2309      	movs	r3, #9
 8003a60:	e02d      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a62:	230a      	movs	r3, #10
 8003a64:	e02b      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a66:	2308      	movs	r3, #8
 8003a68:	e029      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a6a:	2307      	movs	r3, #7
 8003a6c:	e027      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a6e:	2306      	movs	r3, #6
 8003a70:	e025      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a72:	2305      	movs	r3, #5
 8003a74:	e023      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a76:	2304      	movs	r3, #4
 8003a78:	e021      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e01f      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e01d      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e01b      	b.n	8003abe <HAL_GPIO_Init+0x26a>
 8003a86:	bf00      	nop
 8003a88:	58000080 	.word	0x58000080
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	58000400 	.word	0x58000400
 8003a94:	58020000 	.word	0x58020000
 8003a98:	58020400 	.word	0x58020400
 8003a9c:	58020800 	.word	0x58020800
 8003aa0:	58020c00 	.word	0x58020c00
 8003aa4:	58021000 	.word	0x58021000
 8003aa8:	58021400 	.word	0x58021400
 8003aac:	58021800 	.word	0x58021800
 8003ab0:	58021c00 	.word	0x58021c00
 8003ab4:	58022000 	.word	0x58022000
 8003ab8:	58022400 	.word	0x58022400
 8003abc:	2300      	movs	r3, #0
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	f002 0203 	and.w	r2, r2, #3
 8003ac4:	0092      	lsls	r2, r2, #2
 8003ac6:	4093      	lsls	r3, r2
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ace:	4938      	ldr	r1, [pc, #224]	; (8003bb0 <HAL_GPIO_Init+0x35c>)
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f47f ae63 	bne.w	8003868 <HAL_GPIO_Init+0x14>
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	58000400 	.word	0x58000400

08003bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	807b      	strh	r3, [r7, #2]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc4:	787b      	ldrb	r3, [r7, #1]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bca:	887a      	ldrh	r2, [r7, #2]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bd0:	e003      	b.n	8003bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	041a      	lsls	r2, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	619a      	str	r2, [r3, #24]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be8:	b08f      	sub	sp, #60	; 0x3c
 8003bea:	af0a      	add	r7, sp, #40	; 0x28
 8003bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e116      	b.n	8003e26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fe fde8 	bl	80027e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f005 f902 	bl	8008e40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	687e      	ldr	r6, [r7, #4]
 8003c44:	466d      	mov	r5, sp
 8003c46:	f106 0410 	add.w	r4, r6, #16
 8003c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c5a:	1d33      	adds	r3, r6, #4
 8003c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5e:	6838      	ldr	r0, [r7, #0]
 8003c60:	f005 f88c 	bl	8008d7c <USB_CoreInit>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d005      	beq.n	8003c76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e0d7      	b.n	8003e26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f005 f8f0 	bl	8008e62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
 8003c86:	e04a      	b.n	8003d1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	333d      	adds	r3, #61	; 0x3d
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	333c      	adds	r3, #60	; 0x3c
 8003cac:	7bfa      	ldrb	r2, [r7, #15]
 8003cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	b298      	uxth	r0, r3
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3342      	adds	r3, #66	; 0x42
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	333f      	adds	r3, #63	; 0x3f
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3344      	adds	r3, #68	; 0x44
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3348      	adds	r3, #72	; 0x48
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d04:	7bfa      	ldrb	r2, [r7, #15]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	3350      	adds	r3, #80	; 0x50
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3af      	bcc.n	8003c88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e044      	b.n	8003db8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d44:	7bfa      	ldrb	r2, [r7, #15]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	440b      	add	r3, r1
 8003d68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d86:	7bfa      	ldrb	r2, [r7, #15]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	3301      	adds	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d3b5      	bcc.n	8003d2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	687e      	ldr	r6, [r7, #4]
 8003dca:	466d      	mov	r5, sp
 8003dcc:	f106 0410 	add.w	r4, r6, #16
 8003dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ddc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003de0:	1d33      	adds	r3, r6, #4
 8003de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de4:	6838      	ldr	r0, [r7, #0]
 8003de6:	f005 f867 	bl	8008eb8 <USB_DevInit>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e014      	b.n	8003e26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d102      	bne.n	8003e1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f80b 	bl	8003e30 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f005 fa09 	bl	8009236 <USB_DevDisconnect>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e5e:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	10000003 	.word	0x10000003

08003e78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d001      	beq.n	8003e9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e01f      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e01d      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	490f      	ldr	r1, [pc, #60]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003eb2:	f7fe fe85 	bl	8002bc0 <HAL_GetTick>
 8003eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eb8:	e009      	b.n	8003ece <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eba:	f7fe fe81 	bl	8002bc0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec8:	d901      	bls.n	8003ece <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e007      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eda:	d1ee      	bne.n	8003eba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024800 	.word	0x58024800

08003eec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	58024800 	.word	0x58024800

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	; 0x30
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e3c4      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8087 	beq.w	800403a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2c:	4ba2      	ldr	r3, [pc, #648]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f36:	4ba0      	ldr	r3, [pc, #640]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d007      	beq.n	8003f52 <HAL_RCC_OscConfig+0x46>
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2b18      	cmp	r3, #24
 8003f46:	d110      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5e>
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f52:	4b99      	ldr	r3, [pc, #612]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d06c      	beq.n	8004038 <HAL_RCC_OscConfig+0x12c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d168      	bne.n	8004038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e39e      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x76>
 8003f74:	4b90      	ldr	r3, [pc, #576]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a8f      	ldr	r2, [pc, #572]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e02e      	b.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b8b      	ldr	r3, [pc, #556]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a8a      	ldr	r2, [pc, #552]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a87      	ldr	r2, [pc, #540]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xbc>
 8003fae:	4b82      	ldr	r3, [pc, #520]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a81      	ldr	r2, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7e      	ldr	r2, [pc, #504]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
 8003fc8:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a7a      	ldr	r2, [pc, #488]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a77      	ldr	r2, [pc, #476]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fdea 	bl	8002bc0 <HAL_GetTick>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fde6 	bl	8002bc0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e352      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004002:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xe4>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe fdd6 	bl	8002bc0 <HAL_GetTick>
 8004014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004018:	f7fe fdd2 	bl	8002bc0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e33e      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x10c>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 8092 	beq.w	800416c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004048:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004050:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004052:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_RCC_OscConfig+0x162>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	2b18      	cmp	r3, #24
 8004062:	d12d      	bne.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d128      	bne.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800406e:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RCC_OscConfig+0x17a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e310      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	f7fe fdd3 	bl	8002c30 <HAL_GetREVID>
 800408a:	4602      	mov	r2, r0
 800408c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004090:	429a      	cmp	r2, r3
 8004092:	d80a      	bhi.n	80040aa <HAL_RCC_OscConfig+0x19e>
 8004094:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	4945      	ldr	r1, [pc, #276]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a8:	e060      	b.n	800416c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	493f      	ldr	r1, [pc, #252]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040be:	e055      	b.n	800416c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d038      	beq.n	800413a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040c8:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 0219 	bic.w	r2, r3, #25
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4938      	ldr	r1, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7fe fd71 	bl	8002bc0 <HAL_GetTick>
 80040de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e2:	f7fe fd6d 	bl	8002bc0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e2d9      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004100:	f7fe fd96 	bl	8002c30 <HAL_GetREVID>
 8004104:	4602      	mov	r2, r0
 8004106:	f241 0303 	movw	r3, #4099	; 0x1003
 800410a:	429a      	cmp	r2, r3
 800410c:	d80a      	bhi.n	8004124 <HAL_RCC_OscConfig+0x218>
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	031b      	lsls	r3, r3, #12
 800411c:	4926      	ldr	r1, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
 8004122:	e023      	b.n	800416c <HAL_RCC_OscConfig+0x260>
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	4921      	ldr	r1, [pc, #132]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
 8004138:	e018      	b.n	800416c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800413a:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fe fd3b 	bl	8002bc0 <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414e:	f7fe fd37 	bl	8002bc0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e2a3      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8091 	beq.w	800429c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004182:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d007      	beq.n	80041a0 <HAL_RCC_OscConfig+0x294>
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b18      	cmp	r3, #24
 8004194:	d12f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2ea>
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d12a      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_RCC_OscConfig+0x2b0>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	2b80      	cmp	r3, #128	; 0x80
 80041b2:	d003      	beq.n	80041bc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e277      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
 80041b8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041bc:	f7fe fd38 	bl	8002c30 <HAL_GetREVID>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d80a      	bhi.n	80041e0 <HAL_RCC_OscConfig+0x2d4>
 80041ca:	4ba2      	ldr	r3, [pc, #648]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	069b      	lsls	r3, r3, #26
 80041d8:	499e      	ldr	r1, [pc, #632]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041de:	e05d      	b.n	800429c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041e0:	4b9c      	ldr	r3, [pc, #624]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	4999      	ldr	r1, [pc, #612]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80041f4:	e052      	b.n	800429c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d035      	beq.n	800426a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041fe:	4b95      	ldr	r3, [pc, #596]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a94      	ldr	r2, [pc, #592]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420a:	f7fe fcd9 	bl	8002bc0 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004212:	f7fe fcd5 	bl	8002bc0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e241      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004224:	4b8b      	ldr	r3, [pc, #556]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004230:	f7fe fcfe 	bl	8002c30 <HAL_GetREVID>
 8004234:	4602      	mov	r2, r0
 8004236:	f241 0303 	movw	r3, #4099	; 0x1003
 800423a:	429a      	cmp	r2, r3
 800423c:	d80a      	bhi.n	8004254 <HAL_RCC_OscConfig+0x348>
 800423e:	4b85      	ldr	r3, [pc, #532]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	4981      	ldr	r1, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
 8004252:	e023      	b.n	800429c <HAL_RCC_OscConfig+0x390>
 8004254:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	497c      	ldr	r1, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004264:	4313      	orrs	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
 8004268:	e018      	b.n	800429c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800426a:	4b7a      	ldr	r3, [pc, #488]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a79      	ldr	r2, [pc, #484]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fe fca3 	bl	8002bc0 <HAL_GetTick>
 800427a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800427e:	f7fe fc9f 	bl	8002bc0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e20b      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004290:	4b70      	ldr	r3, [pc, #448]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d036      	beq.n	8004316 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b0:	4b68      	ldr	r3, [pc, #416]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80042b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b4:	4a67      	ldr	r2, [pc, #412]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fe fc80 	bl	8002bc0 <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fe fc7c 	bl	8002bc0 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1e8      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80042d6:	4b5f      	ldr	r3, [pc, #380]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80042d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x3b8>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e4:	4b5b      	ldr	r3, [pc, #364]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e8:	4a5a      	ldr	r2, [pc, #360]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f0:	f7fe fc66 	bl	8002bc0 <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f8:	f7fe fc62 	bl	8002bc0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1ce      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800430a:	4b52      	ldr	r3, [pc, #328]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d036      	beq.n	8004390 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d019      	beq.n	800435e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800432a:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a49      	ldr	r2, [pc, #292]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004334:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004336:	f7fe fc43 	bl	8002bc0 <HAL_GetTick>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800433e:	f7fe fc3f 	bl	8002bc0 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1ab      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004350:	4b40      	ldr	r3, [pc, #256]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x432>
 800435c:	e018      	b.n	8004390 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800435e:	4b3d      	ldr	r3, [pc, #244]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004368:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800436a:	f7fe fc29 	bl	8002bc0 <HAL_GetTick>
 800436e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004372:	f7fe fc25 	bl	8002bc0 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e191      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004384:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f0      	bne.n	8004372 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8086 	beq.w	80044aa <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800439e:	4b2e      	ldr	r3, [pc, #184]	; (8004458 <HAL_RCC_OscConfig+0x54c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <HAL_RCC_OscConfig+0x54c>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043aa:	f7fe fc09 	bl	8002bc0 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fe fc05 	bl	8002bc0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b64      	cmp	r3, #100	; 0x64
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e171      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c4:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCC_OscConfig+0x54c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <HAL_RCC_OscConfig+0x4da>
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6713      	str	r3, [r2, #112]	; 0x70
 80043e4:	e02d      	b.n	8004442 <HAL_RCC_OscConfig+0x536>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0x4fc>
 80043ee:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a18      	ldr	r2, [pc, #96]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
 8004406:	e01c      	b.n	8004442 <HAL_RCC_OscConfig+0x536>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b05      	cmp	r3, #5
 800440e:	d10c      	bne.n	800442a <HAL_RCC_OscConfig+0x51e>
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004414:	4a0f      	ldr	r2, [pc, #60]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	6713      	str	r3, [r2, #112]	; 0x70
 800441c:	4b0d      	ldr	r3, [pc, #52]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800441e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004422:	f043 0301 	orr.w	r3, r3, #1
 8004426:	6713      	str	r3, [r2, #112]	; 0x70
 8004428:	e00b      	b.n	8004442 <HAL_RCC_OscConfig+0x536>
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800442c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	6713      	str	r3, [r2, #112]	; 0x70
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	4a06      	ldr	r2, [pc, #24]	; (8004454 <HAL_RCC_OscConfig+0x548>)
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01a      	beq.n	8004480 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fe fbb9 	bl	8002bc0 <HAL_GetTick>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004450:	e00f      	b.n	8004472 <HAL_RCC_OscConfig+0x566>
 8004452:	bf00      	nop
 8004454:	58024400 	.word	0x58024400
 8004458:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fe fbb0 	bl	8002bc0 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e11a      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004472:	4b8f      	ldr	r3, [pc, #572]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0ee      	beq.n	800445c <HAL_RCC_OscConfig+0x550>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fe fb9e 	bl	8002bc0 <HAL_GetTick>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004486:	e00a      	b.n	800449e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004488:	f7fe fb9a 	bl	8002bc0 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f241 3288 	movw	r2, #5000	; 0x1388
 8004496:	4293      	cmp	r3, r2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e104      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800449e:	4b84      	ldr	r3, [pc, #528]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ee      	bne.n	8004488 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80f9 	beq.w	80046a6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80044b4:	4b7e      	ldr	r3, [pc, #504]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044bc:	2b18      	cmp	r3, #24
 80044be:	f000 80b4 	beq.w	800462a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	f040 8095 	bne.w	80045f6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044cc:	4b78      	ldr	r3, [pc, #480]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a77      	ldr	r2, [pc, #476]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80044d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fe fb72 	bl	8002bc0 <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fe fb6e 	bl	8002bc0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0da      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044f2:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fe:	4b6c      	ldr	r3, [pc, #432]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004502:	4b6c      	ldr	r3, [pc, #432]	; (80046b4 <HAL_RCC_OscConfig+0x7a8>)
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	430a      	orrs	r2, r1
 8004512:	4967      	ldr	r1, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	628b      	str	r3, [r1, #40]	; 0x28
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	3b01      	subs	r3, #1
 800451e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	3b01      	subs	r3, #1
 8004528:	025b      	lsls	r3, r3, #9
 800452a:	b29b      	uxth	r3, r3
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	3b01      	subs	r3, #1
 8004542:	061b      	lsls	r3, r3, #24
 8004544:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004548:	4959      	ldr	r1, [pc, #356]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800454a:	4313      	orrs	r3, r2
 800454c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800454e:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	4a57      	ldr	r2, [pc, #348]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800455a:	4b55      	ldr	r3, [pc, #340]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800455c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455e:	4b56      	ldr	r3, [pc, #344]	; (80046b8 <HAL_RCC_OscConfig+0x7ac>)
 8004560:	4013      	ands	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004566:	00d2      	lsls	r2, r2, #3
 8004568:	4951      	ldr	r1, [pc, #324]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800456a:	4313      	orrs	r3, r2
 800456c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800456e:	4b50      	ldr	r3, [pc, #320]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	f023 020c 	bic.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	494d      	ldr	r1, [pc, #308]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	f023 0202 	bic.w	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458c:	4948      	ldr	r1, [pc, #288]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800458e:	4313      	orrs	r3, r2
 8004590:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004592:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	4a46      	ldr	r2, [pc, #280]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800459c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800459e:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80045aa:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ae:	4a40      	ldr	r2, [pc, #256]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80045b6:	4b3e      	ldr	r3, [pc, #248]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	4a3d      	ldr	r2, [pc, #244]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a3a      	ldr	r2, [pc, #232]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fe faf7 	bl	8002bc0 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fe faf3 	bl	8002bc0 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e05f      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x6ca>
 80045f4:	e057      	b.n	80046a6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 80045fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fe fadd 	bl	8002bc0 <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460a:	f7fe fad9 	bl	8002bc0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e045      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x6fe>
 8004628:	e03d      	b.n	80046a6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800462a:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <HAL_RCC_OscConfig+0x7a4>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	2b01      	cmp	r3, #1
 800463c:	d031      	beq.n	80046a2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0203 	and.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d12a      	bne.n	80046a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d122      	bne.n	80046a2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004668:	429a      	cmp	r2, r3
 800466a:	d11a      	bne.n	80046a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0a5b      	lsrs	r3, r3, #9
 8004670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d111      	bne.n	80046a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	0c1b      	lsrs	r3, r3, #16
 8004682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d108      	bne.n	80046a2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	0e1b      	lsrs	r3, r3, #24
 8004694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800469e:	429a      	cmp	r2, r3
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e000      	b.n	80046a8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3730      	adds	r7, #48	; 0x30
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	58024400 	.word	0x58024400
 80046b4:	fffffc0c 	.word	0xfffffc0c
 80046b8:	ffff0007 	.word	0xffff0007

080046bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e19c      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b8a      	ldr	r3, [pc, #552]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d910      	bls.n	8004700 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b87      	ldr	r3, [pc, #540]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 020f 	bic.w	r2, r3, #15
 80046e6:	4985      	ldr	r1, [pc, #532]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b83      	ldr	r3, [pc, #524]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e184      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d010      	beq.n	800472e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	4b7b      	ldr	r3, [pc, #492]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004718:	429a      	cmp	r2, r3
 800471a:	d908      	bls.n	800472e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800471c:	4b78      	ldr	r3, [pc, #480]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	4975      	ldr	r1, [pc, #468]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800472a:	4313      	orrs	r3, r2
 800472c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d010      	beq.n	800475c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004746:	429a      	cmp	r2, r3
 8004748:	d908      	bls.n	800475c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800474a:	4b6d      	ldr	r3, [pc, #436]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	496a      	ldr	r1, [pc, #424]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 8004758:	4313      	orrs	r3, r2
 800475a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d010      	beq.n	800478a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	4b64      	ldr	r3, [pc, #400]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004774:	429a      	cmp	r2, r3
 8004776:	d908      	bls.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004778:	4b61      	ldr	r3, [pc, #388]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	495e      	ldr	r1, [pc, #376]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 8004786:	4313      	orrs	r3, r2
 8004788:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d010      	beq.n	80047b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d908      	bls.n	80047b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047a6:	4b56      	ldr	r3, [pc, #344]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	4953      	ldr	r1, [pc, #332]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d010      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4b4d      	ldr	r3, [pc, #308]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d908      	bls.n	80047e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d4:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	f023 020f 	bic.w	r2, r3, #15
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4947      	ldr	r1, [pc, #284]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d055      	beq.n	800489e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80047f2:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4940      	ldr	r1, [pc, #256]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 8004800:	4313      	orrs	r3, r2
 8004802:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d107      	bne.n	800481c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800480c:	4b3c      	ldr	r3, [pc, #240]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d121      	bne.n	800485c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0f6      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004824:	4b36      	ldr	r3, [pc, #216]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d115      	bne.n	800485c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0ea      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d107      	bne.n	800484c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800483c:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d109      	bne.n	800485c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0de      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800484c:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0d6      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f023 0207 	bic.w	r2, r3, #7
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4925      	ldr	r1, [pc, #148]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800486a:	4313      	orrs	r3, r2
 800486c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486e:	f7fe f9a7 	bl	8002bc0 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004874:	e00a      	b.n	800488c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004876:	f7fe f9a3 	bl	8002bc0 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e0be      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488c:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	429a      	cmp	r2, r3
 800489c:	d1eb      	bne.n	8004876 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d208      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f023 020f 	bic.w	r2, r3, #15
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	490e      	ldr	r1, [pc, #56]	; (8004900 <HAL_RCC_ClockConfig+0x244>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d214      	bcs.n	8004904 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 020f 	bic.w	r2, r3, #15
 80048e2:	4906      	ldr	r1, [pc, #24]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b04      	ldr	r3, [pc, #16]	; (80048fc <HAL_RCC_ClockConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d005      	beq.n	8004904 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e086      	b.n	8004a0a <HAL_RCC_ClockConfig+0x34e>
 80048fc:	52002000 	.word	0x52002000
 8004900:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d010      	beq.n	8004932 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800491c:	429a      	cmp	r2, r3
 800491e:	d208      	bcs.n	8004932 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004920:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	4939      	ldr	r1, [pc, #228]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 800492e:	4313      	orrs	r3, r2
 8004930:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d010      	beq.n	8004960 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800494a:	429a      	cmp	r2, r3
 800494c:	d208      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800494e:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	492e      	ldr	r1, [pc, #184]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 800495c:	4313      	orrs	r3, r2
 800495e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0310 	and.w	r3, r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699a      	ldr	r2, [r3, #24]
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004978:	429a      	cmp	r2, r3
 800497a:	d208      	bcs.n	800498e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4922      	ldr	r1, [pc, #136]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 800498a:	4313      	orrs	r3, r2
 800498c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d208      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80049aa:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	4917      	ldr	r1, [pc, #92]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80049bc:	f000 f834 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049c0:	4601      	mov	r1, r0
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 030f 	and.w	r3, r3, #15
 80049cc:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <HAL_RCC_ClockConfig+0x35c>)
 80049ce:	5cd3      	ldrb	r3, [r2, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa21 f303 	lsr.w	r3, r1, r3
 80049d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_RCC_ClockConfig+0x358>)
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <HAL_RCC_ClockConfig+0x35c>)
 80049e4:	5cd3      	ldrb	r3, [r2, r3]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x360>)
 80049f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049f4:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <HAL_RCC_ClockConfig+0x364>)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCC_ClockConfig+0x368>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe f894 	bl	8002b2c <HAL_InitTick>
 8004a04:	4603      	mov	r3, r0
 8004a06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	58024400 	.word	0x58024400
 8004a18:	0800e788 	.word	0x0800e788
 8004a1c:	24000360 	.word	0x24000360
 8004a20:	2400035c 	.word	0x2400035c
 8004a24:	24000364 	.word	0x24000364

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b089      	sub	sp, #36	; 0x24
 8004a2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2e:	4baf      	ldr	r3, [pc, #700]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a36:	2b18      	cmp	r3, #24
 8004a38:	f200 814e 	bhi.w	8004cd8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004aa9 	.word	0x08004aa9
 8004a48:	08004cd9 	.word	0x08004cd9
 8004a4c:	08004cd9 	.word	0x08004cd9
 8004a50:	08004cd9 	.word	0x08004cd9
 8004a54:	08004cd9 	.word	0x08004cd9
 8004a58:	08004cd9 	.word	0x08004cd9
 8004a5c:	08004cd9 	.word	0x08004cd9
 8004a60:	08004cd9 	.word	0x08004cd9
 8004a64:	08004acf 	.word	0x08004acf
 8004a68:	08004cd9 	.word	0x08004cd9
 8004a6c:	08004cd9 	.word	0x08004cd9
 8004a70:	08004cd9 	.word	0x08004cd9
 8004a74:	08004cd9 	.word	0x08004cd9
 8004a78:	08004cd9 	.word	0x08004cd9
 8004a7c:	08004cd9 	.word	0x08004cd9
 8004a80:	08004cd9 	.word	0x08004cd9
 8004a84:	08004ad5 	.word	0x08004ad5
 8004a88:	08004cd9 	.word	0x08004cd9
 8004a8c:	08004cd9 	.word	0x08004cd9
 8004a90:	08004cd9 	.word	0x08004cd9
 8004a94:	08004cd9 	.word	0x08004cd9
 8004a98:	08004cd9 	.word	0x08004cd9
 8004a9c:	08004cd9 	.word	0x08004cd9
 8004aa0:	08004cd9 	.word	0x08004cd9
 8004aa4:	08004adb 	.word	0x08004adb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa8:	4b90      	ldr	r3, [pc, #576]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ab4:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	08db      	lsrs	r3, r3, #3
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	4a8c      	ldr	r2, [pc, #560]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004ac6:	e10a      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ac8:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004aca:	61bb      	str	r3, [r7, #24]
    break;
 8004acc:	e107      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004ace:	4b89      	ldr	r3, [pc, #548]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004ad0:	61bb      	str	r3, [r7, #24]
    break;
 8004ad2:	e104      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ad4:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004ad6:	61bb      	str	r3, [r7, #24]
    break;
 8004ad8:	e101      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ada:	4b84      	ldr	r3, [pc, #528]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004ae4:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004af0:	4b7e      	ldr	r3, [pc, #504]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004afa:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afe:	08db      	lsrs	r3, r3, #3
 8004b00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80da 	beq.w	8004cd2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d05a      	beq.n	8004bda <HAL_RCC_GetSysClockFreq+0x1b2>
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d302      	bcc.n	8004b2e <HAL_RCC_GetSysClockFreq+0x106>
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d078      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x1f6>
 8004b2c:	e099      	b.n	8004c62 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b2e:	4b6f      	ldr	r3, [pc, #444]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02d      	beq.n	8004b96 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	4a6a      	ldr	r2, [pc, #424]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b64:	4b61      	ldr	r3, [pc, #388]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b74:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b78:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b94:	e087      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004d00 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba8:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bbc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bd8:	e065      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004d04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bec:	4b3f      	ldr	r3, [pc, #252]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c00:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c1c:	e043      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c28:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004d08 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c30:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c44:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c60:	e021      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004d04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004c70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c88:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004cfc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ca4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ca6:	4b11      	ldr	r3, [pc, #68]	; (8004cec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	0a5b      	lsrs	r3, r3, #9
 8004cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cca:	ee17 3a90 	vmov	r3, s15
 8004cce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004cd0:	e005      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
    break;
 8004cd6:	e002      	b.n	8004cde <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004cd8:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004cda:	61bb      	str	r3, [r7, #24]
    break;
 8004cdc:	bf00      	nop
  }

  return sysclockfreq;
 8004cde:	69bb      	ldr	r3, [r7, #24]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3724      	adds	r7, #36	; 0x24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	58024400 	.word	0x58024400
 8004cf0:	03d09000 	.word	0x03d09000
 8004cf4:	003d0900 	.word	0x003d0900
 8004cf8:	007a1200 	.word	0x007a1200
 8004cfc:	46000000 	.word	0x46000000
 8004d00:	4c742400 	.word	0x4c742400
 8004d04:	4a742400 	.word	0x4a742400
 8004d08:	4af42400 	.word	0x4af42400

08004d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d12:	f7ff fe89 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 8004d16:	4601      	mov	r1, r0
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <HAL_RCC_GetHCLKFreq+0x50>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d3a:	5cd3      	ldrb	r3, [r2, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	fa22 f303 	lsr.w	r3, r2, r3
 8004d46:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d4a:	4a07      	ldr	r2, [pc, #28]	; (8004d68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004d50:	4b04      	ldr	r3, [pc, #16]	; (8004d64 <HAL_RCC_GetHCLKFreq+0x58>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	0800e788 	.word	0x0800e788
 8004d64:	24000360 	.word	0x24000360
 8004d68:	2400035c 	.word	0x2400035c

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d70:	f7ff ffcc 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d74:	4601      	mov	r1, r0
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d82:	5cd3      	ldrb	r3, [r2, r3]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	58024400 	.word	0x58024400
 8004d94:	0800e788 	.word	0x0800e788

08004d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d9c:	f7ff ffb6 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004da0:	4601      	mov	r1, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	0a1b      	lsrs	r3, r3, #8
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4a04      	ldr	r2, [pc, #16]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dae:	5cd3      	ldrb	r3, [r2, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	0800e788 	.word	0x0800e788

08004dc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004dcc:	2300      	movs	r3, #0
 8004dce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03d      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de8:	d013      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d802      	bhi.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004df4:	e01f      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfa:	d013      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e00:	d01c      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004e02:	e018      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e04:	4baf      	ldr	r3, [pc, #700]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4aae      	ldr	r2, [pc, #696]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e10:	e015      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2102      	movs	r1, #2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 f95f 	bl	80060dc <RCCEx_PLL2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e22:	e00c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fa08 	bl	8006240 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004e44:	4b9f      	ldr	r3, [pc, #636]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e50:	499c      	ldr	r1, [pc, #624]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	650b      	str	r3, [r1, #80]	; 0x50
 8004e56:	e001      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d03d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d826      	bhi.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004e70:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e8d 	.word	0x08004e8d
 8004e7c:	08004e9b 	.word	0x08004e9b
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	08004ec5 	.word	0x08004ec5
 8004e88:	08004ec5 	.word	0x08004ec5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8c:	4b8d      	ldr	r3, [pc, #564]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4a8c      	ldr	r2, [pc, #560]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e98:	e015      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f91b 	bl	80060dc <RCCEx_PLL2_Config>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eaa:	e00c      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f9c4 	bl	8006240 <RCCEx_PLL3_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ebc:	e003      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d109      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ecc:	4b7d      	ldr	r3, [pc, #500]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	f023 0207 	bic.w	r2, r3, #7
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	497a      	ldr	r1, [pc, #488]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	650b      	str	r3, [r1, #80]	; 0x50
 8004ede:	e001      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d03e      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d01c      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d804      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d00d      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f04:	e01e      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d01f      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0e:	d01e      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f10:	e018      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f12:	4b6c      	ldr	r3, [pc, #432]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a6b      	ldr	r2, [pc, #428]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f1e:	e017      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f8d8 	bl	80060dc <RCCEx_PLL2_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f30:	e00e      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3324      	adds	r3, #36	; 0x24
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 f981 	bl	8006240 <RCCEx_PLL3_Config>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f42:	e005      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	75fb      	strb	r3, [r7, #23]
      break;
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d109      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004f56:	4b5b      	ldr	r3, [pc, #364]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f62:	4958      	ldr	r1, [pc, #352]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	650b      	str	r3, [r1, #80]	; 0x50
 8004f68:	e001      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d044      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f84:	d01f      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8a:	d805      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f94:	d00e      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004f96:	e01f      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004f98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004f9c:	d01f      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fa2:	d01e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004fa4:	e018      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a46      	ldr	r2, [pc, #280]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e017      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f88e 	bl	80060dc <RCCEx_PLL2_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fc4:	e00e      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3324      	adds	r3, #36	; 0x24
 8004fca:	2100      	movs	r1, #0
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 f937 	bl	8006240 <RCCEx_PLL3_Config>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	75fb      	strb	r3, [r7, #23]
      break;
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004fea:	4b36      	ldr	r3, [pc, #216]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ff8:	4932      	ldr	r1, [pc, #200]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	658b      	str	r3, [r1, #88]	; 0x58
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500c:	2b00      	cmp	r3, #0
 800500e:	d044      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800501a:	d01f      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800501c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005020:	d805      	bhi.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800502a:	d00e      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800502c:	e01f      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800502e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005032:	d01f      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005034:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005038:	d01e      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800503a:	e018      	b.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503c:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005048:	e017      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3304      	adds	r3, #4
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f001 f843 	bl	80060dc <RCCEx_PLL2_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800505a:	e00e      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3324      	adds	r3, #36	; 0x24
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f8ec 	bl	8006240 <RCCEx_PLL3_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800506c:	e005      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	75fb      	strb	r3, [r7, #23]
      break;
 8005072:	e002      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005080:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800508e:	490d      	ldr	r1, [pc, #52]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005090:	4313      	orrs	r3, r2
 8005092:	658b      	str	r3, [r1, #88]	; 0x58
 8005094:	e001      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
 8005098:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d035      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d00c      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d802      	bhi.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80050b6:	e017      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d00c      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80050bc:	2b30      	cmp	r3, #48	; 0x30
 80050be:	d018      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80050c0:	e012      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80050c2:	bf00      	nop
 80050c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050c8:	4baf      	ldr	r3, [pc, #700]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4aae      	ldr	r2, [pc, #696]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050d4:	e00e      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	2102      	movs	r1, #2
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 fffd 	bl	80060dc <RCCEx_PLL2_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80050e6:	e005      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	75fb      	strb	r3, [r7, #23]
      break;
 80050ec:	e002      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80050ee:	bf00      	nop
 80050f0:	e000      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80050f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050fa:	4ba3      	ldr	r3, [pc, #652]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	49a0      	ldr	r1, [pc, #640]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005108:	4313      	orrs	r3, r2
 800510a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800510c:	e001      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
 8005110:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d042      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005126:	d01f      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d805      	bhi.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005136:	d00e      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005138:	e01f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800513a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800513e:	d01f      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005144:	d01e      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005146:	e018      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005148:	4b8f      	ldr	r3, [pc, #572]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a8e      	ldr	r2, [pc, #568]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800514e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005154:	e017      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3304      	adds	r3, #4
 800515a:	2100      	movs	r1, #0
 800515c:	4618      	mov	r0, r3
 800515e:	f000 ffbd 	bl	80060dc <RCCEx_PLL2_Config>
 8005162:	4603      	mov	r3, r0
 8005164:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005166:	e00e      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3324      	adds	r3, #36	; 0x24
 800516c:	2100      	movs	r1, #0
 800516e:	4618      	mov	r0, r3
 8005170:	f001 f866 	bl	8006240 <RCCEx_PLL3_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005178:	e005      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
      break;
 800517e:	e002      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005180:	bf00      	nop
 8005182:	e000      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800518c:	4b7e      	ldr	r3, [pc, #504]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005198:	497b      	ldr	r1, [pc, #492]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800519a:	4313      	orrs	r3, r2
 800519c:	650b      	str	r3, [r1, #80]	; 0x50
 800519e:	e001      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	7dfb      	ldrb	r3, [r7, #23]
 80051a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d042      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b8:	d01b      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80051ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051be:	d805      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d022      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80051c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80051ca:	e01b      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80051cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051d0:	d01d      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80051d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051d6:	d01c      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80051d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051dc:	d01b      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80051de:	e011      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2101      	movs	r1, #1
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 ff78 	bl	80060dc <RCCEx_PLL2_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80051f0:	e012      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3324      	adds	r3, #36	; 0x24
 80051f6:	2101      	movs	r1, #1
 80051f8:	4618      	mov	r0, r3
 80051fa:	f001 f821 	bl	8006240 <RCCEx_PLL3_Config>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005202:	e009      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800521e:	4b5a      	ldr	r3, [pc, #360]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522a:	4957      	ldr	r1, [pc, #348]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	650b      	str	r3, [r1, #80]	; 0x50
 8005230:	e001      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
 8005234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d044      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524c:	d01b      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800524e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005252:	d805      	bhi.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d022      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525c:	d00a      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800525e:	e01b      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d01d      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005266:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800526a:	d01c      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800526c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005270:	d01b      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005272:	e011      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	2101      	movs	r1, #1
 800527a:	4618      	mov	r0, r3
 800527c:	f000 ff2e 	bl	80060dc <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005284:	e012      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3324      	adds	r3, #36	; 0x24
 800528a:	2101      	movs	r1, #1
 800528c:	4618      	mov	r0, r3
 800528e:	f000 ffd7 	bl	8006240 <RCCEx_PLL3_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005296:	e009      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
      break;
 800529c:	e006      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800529e:	bf00      	nop
 80052a0:	e004      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80052aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052b2:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052c0:	4931      	ldr	r1, [pc, #196]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	658b      	str	r3, [r1, #88]	; 0x58
 80052c6:	e001      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02d      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052e0:	d005      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80052e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e6:	d009      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d013      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80052ec:	e00f      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ee:	4b26      	ldr	r3, [pc, #152]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	4a25      	ldr	r2, [pc, #148]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80052fa:	e00c      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f000 feea 	bl	80060dc <RCCEx_PLL2_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800530c:	e003      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
      break;
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d109      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800531e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005320:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005328:	4917      	ldr	r1, [pc, #92]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800532a:	4313      	orrs	r3, r2
 800532c:	650b      	str	r3, [r1, #80]	; 0x50
 800532e:	e001      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d035      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	2b03      	cmp	r3, #3
 8005346:	d81b      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005348:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534e:	bf00      	nop
 8005350:	0800538d 	.word	0x0800538d
 8005354:	08005361 	.word	0x08005361
 8005358:	0800536f 	.word	0x0800536f
 800535c:	0800538d 	.word	0x0800538d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800536c:	e00f      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3304      	adds	r3, #4
 8005372:	2102      	movs	r1, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 feb1 	bl	80060dc <RCCEx_PLL2_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800537e:	e006      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
      break;
 8005384:	e003      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005386:	bf00      	nop
 8005388:	58024400 	.word	0x58024400
      break;
 800538c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005394:	4bba      	ldr	r3, [pc, #744]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005398:	f023 0203 	bic.w	r2, r3, #3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	49b7      	ldr	r1, [pc, #732]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053a6:	e001      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8086 	beq.w	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ba:	4bb2      	ldr	r3, [pc, #712]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4ab1      	ldr	r2, [pc, #708]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80053c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053c6:	f7fd fbfb 	bl	8002bc0 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053cc:	e009      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ce:	f7fd fbf7 	bl	8002bc0 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b64      	cmp	r3, #100	; 0x64
 80053da:	d902      	bls.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	75fb      	strb	r3, [r7, #23]
        break;
 80053e0:	e005      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e2:	4ba8      	ldr	r3, [pc, #672]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ef      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d166      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80053f4:	4ba2      	ldr	r3, [pc, #648]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053fe:	4053      	eors	r3, r2
 8005400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005408:	4b9d      	ldr	r3, [pc, #628]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	4b9b      	ldr	r3, [pc, #620]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	4a9a      	ldr	r2, [pc, #616]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800541e:	4b98      	ldr	r3, [pc, #608]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a97      	ldr	r2, [pc, #604]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800542a:	4a95      	ldr	r2, [pc, #596]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543a:	d115      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fd fbc0 	bl	8002bc0 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005442:	e00b      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fd fbbc 	bl	8002bc0 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d902      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	75fb      	strb	r3, [r7, #23]
            break;
 800545a:	e005      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800545c:	4b88      	ldr	r3, [pc, #544]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ed      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d126      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547c:	d10d      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800547e:	4b80      	ldr	r3, [pc, #512]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800548c:	0919      	lsrs	r1, r3, #4
 800548e:	4b7e      	ldr	r3, [pc, #504]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005490:	400b      	ands	r3, r1
 8005492:	497b      	ldr	r1, [pc, #492]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005494:	4313      	orrs	r3, r2
 8005496:	610b      	str	r3, [r1, #16]
 8005498:	e005      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800549a:	4b79      	ldr	r3, [pc, #484]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	4a78      	ldr	r2, [pc, #480]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80054a4:	6113      	str	r3, [r2, #16]
 80054a6:	4b76      	ldr	r3, [pc, #472]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b4:	4972      	ldr	r1, [pc, #456]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	670b      	str	r3, [r1, #112]	; 0x70
 80054ba:	e004      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
 80054be:	75bb      	strb	r3, [r7, #22]
 80054c0:	e001      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d07d      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	2b28      	cmp	r3, #40	; 0x28
 80054d8:	d866      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80054da:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80054dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e0:	080055af 	.word	0x080055af
 80054e4:	080055a9 	.word	0x080055a9
 80054e8:	080055a9 	.word	0x080055a9
 80054ec:	080055a9 	.word	0x080055a9
 80054f0:	080055a9 	.word	0x080055a9
 80054f4:	080055a9 	.word	0x080055a9
 80054f8:	080055a9 	.word	0x080055a9
 80054fc:	080055a9 	.word	0x080055a9
 8005500:	08005585 	.word	0x08005585
 8005504:	080055a9 	.word	0x080055a9
 8005508:	080055a9 	.word	0x080055a9
 800550c:	080055a9 	.word	0x080055a9
 8005510:	080055a9 	.word	0x080055a9
 8005514:	080055a9 	.word	0x080055a9
 8005518:	080055a9 	.word	0x080055a9
 800551c:	080055a9 	.word	0x080055a9
 8005520:	08005597 	.word	0x08005597
 8005524:	080055a9 	.word	0x080055a9
 8005528:	080055a9 	.word	0x080055a9
 800552c:	080055a9 	.word	0x080055a9
 8005530:	080055a9 	.word	0x080055a9
 8005534:	080055a9 	.word	0x080055a9
 8005538:	080055a9 	.word	0x080055a9
 800553c:	080055a9 	.word	0x080055a9
 8005540:	080055af 	.word	0x080055af
 8005544:	080055a9 	.word	0x080055a9
 8005548:	080055a9 	.word	0x080055a9
 800554c:	080055a9 	.word	0x080055a9
 8005550:	080055a9 	.word	0x080055a9
 8005554:	080055a9 	.word	0x080055a9
 8005558:	080055a9 	.word	0x080055a9
 800555c:	080055a9 	.word	0x080055a9
 8005560:	080055af 	.word	0x080055af
 8005564:	080055a9 	.word	0x080055a9
 8005568:	080055a9 	.word	0x080055a9
 800556c:	080055a9 	.word	0x080055a9
 8005570:	080055a9 	.word	0x080055a9
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055a9 	.word	0x080055a9
 800557c:	080055a9 	.word	0x080055a9
 8005580:	080055af 	.word	0x080055af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fda6 	bl	80060dc <RCCEx_PLL2_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005594:	e00c      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3324      	adds	r3, #36	; 0x24
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fe4f 	bl	8006240 <RCCEx_PLL3_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
      break;
 80055ac:	e000      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80055ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80055b6:	4b32      	ldr	r3, [pc, #200]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c2:	492f      	ldr	r1, [pc, #188]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	654b      	str	r3, [r1, #84]	; 0x54
 80055c8:	e001      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d037      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d820      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	0800562b 	.word	0x0800562b
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005613 	.word	0x08005613
 80055f4:	0800562b 	.word	0x0800562b
 80055f8:	0800562b 	.word	0x0800562b
 80055fc:	0800562b 	.word	0x0800562b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd68 	bl	80060dc <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005610:	e00c      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3324      	adds	r3, #36	; 0x24
 8005616:	2101      	movs	r1, #1
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe11 	bl	8006240 <RCCEx_PLL3_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005622:	e003      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800562a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005632:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005636:	f023 0207 	bic.w	r2, r3, #7
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563e:	4910      	ldr	r1, [pc, #64]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005640:	4313      	orrs	r3, r2
 8005642:	654b      	str	r3, [r1, #84]	; 0x54
 8005644:	e001      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d040      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	2b05      	cmp	r3, #5
 800565e:	d827      	bhi.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	080056b7 	.word	0x080056b7
 800566c:	0800568d 	.word	0x0800568d
 8005670:	0800569f 	.word	0x0800569f
 8005674:	080056b7 	.word	0x080056b7
 8005678:	080056b7 	.word	0x080056b7
 800567c:	080056b7 	.word	0x080056b7
 8005680:	58024400 	.word	0x58024400
 8005684:	58024800 	.word	0x58024800
 8005688:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	2101      	movs	r1, #1
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fd22 	bl	80060dc <RCCEx_PLL2_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3324      	adds	r3, #36	; 0x24
 80056a2:	2101      	movs	r1, #1
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fdcb 	bl	8006240 <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80056ae:	e003      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	75fb      	strb	r3, [r7, #23]
      break;
 80056b4:	e000      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80056b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b8:	7dfb      	ldrb	r3, [r7, #23]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056be:	4bb2      	ldr	r3, [pc, #712]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	f023 0207 	bic.w	r2, r3, #7
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	49ae      	ldr	r1, [pc, #696]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	658b      	str	r3, [r1, #88]	; 0x58
 80056d2:	e001      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d044      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ee:	d01b      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80056f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f4:	d805      	bhi.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d022      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80056fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005700:	e01b      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005706:	d01d      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800570c:	d01c      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800570e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005712:	d01b      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005714:	e011      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	2100      	movs	r1, #0
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fcdd 	bl	80060dc <RCCEx_PLL2_Config>
 8005722:	4603      	mov	r3, r0
 8005724:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005726:	e012      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3324      	adds	r3, #36	; 0x24
 800572c:	2102      	movs	r1, #2
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fd86 	bl	8006240 <RCCEx_PLL3_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005738:	e009      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
      break;
 800573e:	e006      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005740:	bf00      	nop
 8005742:	e004      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800574c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005754:	4b8c      	ldr	r3, [pc, #560]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005758:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005762:	4989      	ldr	r1, [pc, #548]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005764:	4313      	orrs	r3, r2
 8005766:	654b      	str	r3, [r1, #84]	; 0x54
 8005768:	e001      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d044      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005780:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005784:	d01b      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005786:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800578a:	d805      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d022      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d00a      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005796:	e01b      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579c:	d01d      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800579e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80057a2:	d01c      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80057a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057a8:	d01b      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80057aa:	e011      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fc92 	bl	80060dc <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057bc:	e012      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	2102      	movs	r1, #2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fd3b 	bl	8006240 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80057ce:	e009      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057d6:	bf00      	nop
 80057d8:	e004      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057da:	bf00      	nop
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80057e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e4:	7dfb      	ldrb	r3, [r7, #23]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057ea:	4b67      	ldr	r3, [pc, #412]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f8:	4963      	ldr	r1, [pc, #396]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	658b      	str	r3, [r1, #88]	; 0x58
 80057fe:	e001      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	d044      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800581a:	d01b      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800581c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005820:	d805      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005822:	2b00      	cmp	r3, #0
 8005824:	d022      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800582c:	e01b      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800582e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005832:	d01d      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005834:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005838:	d01c      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800583a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800583e:	d01b      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005840:	e011      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fc47 	bl	80060dc <RCCEx_PLL2_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005852:	e012      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3324      	adds	r3, #36	; 0x24
 8005858:	2102      	movs	r1, #2
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fcf0 	bl	8006240 <RCCEx_PLL3_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005864:	e009      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
      break;
 800586a:	e006      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800586c:	bf00      	nop
 800586e:	e004      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005870:	bf00      	nop
 8005872:	e002      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005880:	4b41      	ldr	r3, [pc, #260]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800588e:	493e      	ldr	r1, [pc, #248]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	658b      	str	r3, [r1, #88]	; 0x58
 8005894:	e001      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d01a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b0:	d10a      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3324      	adds	r3, #36	; 0x24
 80058b6:	2102      	movs	r1, #2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fcc1 	bl	8006240 <RCCEx_PLL3_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058d6:	492c      	ldr	r1, [pc, #176]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	2102      	movs	r1, #2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fca0 	bl	8006240 <RCCEx_PLL3_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800590a:	4b1f      	ldr	r3, [pc, #124]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800590c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005918:	491b      	ldr	r1, [pc, #108]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d032      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d00d      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8005936:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800593a:	d016      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d111      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	3304      	adds	r3, #4
 8005944:	2100      	movs	r1, #0
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fbc8 	bl	80060dc <RCCEx_PLL2_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005950:	e00c      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3324      	adds	r3, #36	; 0x24
 8005956:	2102      	movs	r1, #2
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fc71 	bl	8006240 <RCCEx_PLL3_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005962:	e003      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	75fb      	strb	r3, [r7, #23]
      break;
 8005968:	e000      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800596a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800596c:	7dfb      	ldrb	r3, [r7, #23]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10c      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005980:	4901      	ldr	r1, [pc, #4]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005982:	4313      	orrs	r3, r2
 8005984:	658b      	str	r3, [r1, #88]	; 0x58
 8005986:	e003      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	7dfb      	ldrb	r3, [r7, #23]
 800598e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02f      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a6:	d00c      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80059a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80059ac:	d015      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80059ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b2:	d10f      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b4:	4b71      	ldr	r3, [pc, #452]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	4a70      	ldr	r2, [pc, #448]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80059c0:	e00c      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3324      	adds	r3, #36	; 0x24
 80059c6:	2101      	movs	r1, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fc39 	bl	8006240 <RCCEx_PLL3_Config>
 80059ce:	4603      	mov	r3, r0
 80059d0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80059d2:	e003      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	75fb      	strb	r3, [r7, #23]
      break;
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80059da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059e2:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f0:	4962      	ldr	r1, [pc, #392]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	654b      	str	r3, [r1, #84]	; 0x54
 80059f6:	e001      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d029      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a14:	d007      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005a16:	e00f      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a18:	4b58      	ldr	r3, [pc, #352]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1c:	4a57      	ldr	r2, [pc, #348]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a24:	e00b      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	2102      	movs	r1, #2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fb55 	bl	80060dc <RCCEx_PLL2_Config>
 8005a32:	4603      	mov	r3, r0
 8005a34:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a44:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a50:	494a      	ldr	r1, [pc, #296]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a56:	e001      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3324      	adds	r3, #36	; 0x24
 8005a6c:	2102      	movs	r1, #2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fbe6 	bl	8006240 <RCCEx_PLL3_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d02f      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a92:	d00c      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a98:	d802      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005a9e:	e00d      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa4:	d00f      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aaa:	d00e      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005aac:	e006      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aae:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	4a32      	ldr	r2, [pc, #200]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005aba:	e007      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
      break;
 8005ac0:	e004      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005aca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ad2:	4b2a      	ldr	r3, [pc, #168]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ade:	4927      	ldr	r1, [pc, #156]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	654b      	str	r3, [r1, #84]	; 0x54
 8005ae4:	e001      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
 8005ae8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d008      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005af6:	4b21      	ldr	r3, [pc, #132]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	491e      	ldr	r1, [pc, #120]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b14:	4b19      	ldr	r3, [pc, #100]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b20:	4916      	ldr	r1, [pc, #88]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b32:	4b12      	ldr	r3, [pc, #72]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b3c:	6113      	str	r3, [r2, #16]
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005b48:	490c      	ldr	r1, [pc, #48]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	da08      	bge.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b56:	4b09      	ldr	r3, [pc, #36]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	4906      	ldr	r1, [pc, #24]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005b68:	7dbb      	ldrb	r3, [r7, #22]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	58024400 	.word	0x58024400

08005b80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b84:	f7ff f8c2 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	4a04      	ldr	r2, [pc, #16]	; (8005ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	58024400 	.word	0x58024400
 8005ba8:	0800e788 	.word	0x0800e788

08005bac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b089      	sub	sp, #36	; 0x24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bb4:	4b9d      	ldr	r3, [pc, #628]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	f003 0303 	and.w	r3, r3, #3
 8005bbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005bbe:	4b9b      	ldr	r3, [pc, #620]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	0b1b      	lsrs	r3, r3, #12
 8005bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bca:	4b98      	ldr	r3, [pc, #608]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005bd6:	4b95      	ldr	r3, [pc, #596]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 810a 	beq.w	8005e0e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d05a      	beq.n	8005cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d302      	bcc.n	8005c0a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d078      	beq.n	8005cfa <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005c08:	e099      	b.n	8005d3e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c0a:	4b88      	ldr	r3, [pc, #544]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d02d      	beq.n	8005c72 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c16:	4b85      	ldr	r3, [pc, #532]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f003 0303 	and.w	r3, r3, #3
 8005c20:	4a83      	ldr	r2, [pc, #524]	; (8005e30 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005c22:	fa22 f303 	lsr.w	r3, r2, r3
 8005c26:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c40:	4b7a      	ldr	r3, [pc, #488]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c50:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c54:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c70:	e087      	b.n	8005d82 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c84:	4b69      	ldr	r3, [pc, #420]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c94:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c98:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb4:	e065      	b.n	8005d82 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	ee07 3a90 	vmov	s15, r3
 8005cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc8:	4b58      	ldr	r3, [pc, #352]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cdc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf8:	e043      	b.n	8005d82 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	ee07 3a90 	vmov	s15, r3
 8005d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d04:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005e40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0c:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d20:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3c:	e021      	b.n	8005d82 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d48:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d50:	4b36      	ldr	r3, [pc, #216]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d64:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e34 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d80:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d82:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	0a5b      	lsrs	r3, r3, #9
 8005d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8c:	ee07 3a90 	vmov	s15, r3
 8005d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da8:	ee17 2a90 	vmov	r2, s15
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005db0:	4b1e      	ldr	r3, [pc, #120]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	0c1b      	lsrs	r3, r3, #16
 8005db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dd6:	ee17 2a90 	vmov	r2, s15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005dde:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	0e1b      	lsrs	r3, r3, #24
 8005de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e04:	ee17 2a90 	vmov	r2, s15
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e0c:	e008      	b.n	8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	3724      	adds	r7, #36	; 0x24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	03d09000 	.word	0x03d09000
 8005e34:	46000000 	.word	0x46000000
 8005e38:	4c742400 	.word	0x4c742400
 8005e3c:	4a742400 	.word	0x4a742400
 8005e40:	4af42400 	.word	0x4af42400

08005e44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	; 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e4c:	4b9d      	ldr	r3, [pc, #628]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e56:	4b9b      	ldr	r3, [pc, #620]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	0d1b      	lsrs	r3, r3, #20
 8005e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e62:	4b98      	ldr	r3, [pc, #608]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e6e:	4b95      	ldr	r3, [pc, #596]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	fb02 f303 	mul.w	r3, r2, r3
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 810a 	beq.w	80060a6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d05a      	beq.n	8005f4e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d302      	bcc.n	8005ea2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d078      	beq.n	8005f92 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005ea0:	e099      	b.n	8005fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea2:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0320 	and.w	r3, r3, #32
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d02d      	beq.n	8005f0a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eae:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0303 	and.w	r3, r3, #3
 8005eb8:	4a83      	ldr	r2, [pc, #524]	; (80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed8:	4b7a      	ldr	r3, [pc, #488]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ee8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eec:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005ef0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ef8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f04:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f08:	e087      	b.n	800601a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1c:	4b69      	ldr	r3, [pc, #420]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f30:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f4c:	e065      	b.n	800601a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f60:	4b58      	ldr	r3, [pc, #352]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f68:	ee07 3a90 	vmov	s15, r3
 8005f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f74:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f90:	e043      	b.n	800601a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80060d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa4:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fac:	ee07 3a90 	vmov	s15, r3
 8005fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fd4:	e021      	b.n	800601a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	ee07 3a90 	vmov	s15, r3
 8005fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80060d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe8:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffc:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006014:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006018:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800601a:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	0a5b      	lsrs	r3, r3, #9
 8006020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006024:	ee07 3a90 	vmov	s15, r3
 8006028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006034:	edd7 6a07 	vldr	s13, [r7, #28]
 8006038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800603c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006040:	ee17 2a90 	vmov	r2, s15
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006048:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	0c1b      	lsrs	r3, r3, #16
 800604e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800605e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006062:	edd7 6a07 	vldr	s13, [r7, #28]
 8006066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800606a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800606e:	ee17 2a90 	vmov	r2, s15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	0e1b      	lsrs	r3, r3, #24
 800607c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800608c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006090:	edd7 6a07 	vldr	s13, [r7, #28]
 8006094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609c:	ee17 2a90 	vmov	r2, s15
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060a4:	e008      	b.n	80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	3724      	adds	r7, #36	; 0x24
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	58024400 	.word	0x58024400
 80060c8:	03d09000 	.word	0x03d09000
 80060cc:	46000000 	.word	0x46000000
 80060d0:	4c742400 	.word	0x4c742400
 80060d4:	4a742400 	.word	0x4a742400
 80060d8:	4af42400 	.word	0x4af42400

080060dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060ea:	4b53      	ldr	r3, [pc, #332]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d101      	bne.n	80060fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e099      	b.n	800622e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060fa:	4b4f      	ldr	r3, [pc, #316]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a4e      	ldr	r2, [pc, #312]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006100:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006106:	f7fc fd5b 	bl	8002bc0 <HAL_GetTick>
 800610a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800610c:	e008      	b.n	8006120 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800610e:	f7fc fd57 	bl	8002bc0 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e086      	b.n	800622e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006120:	4b45      	ldr	r3, [pc, #276]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800612c:	4b42      	ldr	r3, [pc, #264]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	493f      	ldr	r1, [pc, #252]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	628b      	str	r3, [r1, #40]	; 0x28
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	3b01      	subs	r3, #1
 8006146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	3b01      	subs	r3, #1
 8006150:	025b      	lsls	r3, r3, #9
 8006152:	b29b      	uxth	r3, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	3b01      	subs	r3, #1
 800615c:	041b      	lsls	r3, r3, #16
 800615e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	3b01      	subs	r3, #1
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006170:	4931      	ldr	r1, [pc, #196]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006172:	4313      	orrs	r3, r2
 8006174:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006176:	4b30      	ldr	r3, [pc, #192]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	492d      	ldr	r1, [pc, #180]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006184:	4313      	orrs	r3, r2
 8006186:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006188:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	f023 0220 	bic.w	r2, r3, #32
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	4928      	ldr	r1, [pc, #160]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006196:	4313      	orrs	r3, r2
 8006198:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a26      	ldr	r2, [pc, #152]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	f023 0310 	bic.w	r3, r3, #16
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061a6:	4b24      	ldr	r3, [pc, #144]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061aa:	4b24      	ldr	r3, [pc, #144]	; (800623c <RCCEx_PLL2_Config+0x160>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	69d2      	ldr	r2, [r2, #28]
 80061b2:	00d2      	lsls	r2, r2, #3
 80061b4:	4920      	ldr	r1, [pc, #128]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061c0:	f043 0310 	orr.w	r3, r3, #16
 80061c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061cc:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061d8:	e00f      	b.n	80061fa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d106      	bne.n	80061ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061e0:	4b15      	ldr	r3, [pc, #84]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	4a14      	ldr	r2, [pc, #80]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061ec:	e005      	b.n	80061fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	4a11      	ldr	r2, [pc, #68]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061fa:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a0e      	ldr	r2, [pc, #56]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006206:	f7fc fcdb 	bl	8002bc0 <HAL_GetTick>
 800620a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800620c:	e008      	b.n	8006220 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800620e:	f7fc fcd7 	bl	8002bc0 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <RCCEx_PLL2_Config+0x15c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	58024400 	.word	0x58024400
 800623c:	ffff0007 	.word	0xffff0007

08006240 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800624e:	4b53      	ldr	r3, [pc, #332]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b03      	cmp	r3, #3
 8006258:	d101      	bne.n	800625e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e099      	b.n	8006392 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800625e:	4b4f      	ldr	r3, [pc, #316]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4e      	ldr	r2, [pc, #312]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800626a:	f7fc fca9 	bl	8002bc0 <HAL_GetTick>
 800626e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006270:	e008      	b.n	8006284 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006272:	f7fc fca5 	bl	8002bc0 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b02      	cmp	r3, #2
 800627e:	d901      	bls.n	8006284 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e086      	b.n	8006392 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006284:	4b45      	ldr	r3, [pc, #276]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f0      	bne.n	8006272 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006290:	4b42      	ldr	r3, [pc, #264]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	493f      	ldr	r1, [pc, #252]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	628b      	str	r3, [r1, #40]	; 0x28
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	025b      	lsls	r3, r3, #9
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	3b01      	subs	r3, #1
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	061b      	lsls	r3, r3, #24
 80062d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062d4:	4931      	ldr	r1, [pc, #196]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062da:	4b30      	ldr	r3, [pc, #192]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	492d      	ldr	r1, [pc, #180]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	4928      	ldr	r1, [pc, #160]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062fe:	4b27      	ldr	r3, [pc, #156]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	4a26      	ldr	r2, [pc, #152]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006308:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800630a:	4b24      	ldr	r3, [pc, #144]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800630c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630e:	4b24      	ldr	r3, [pc, #144]	; (80063a0 <RCCEx_PLL3_Config+0x160>)
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	69d2      	ldr	r2, [r2, #28]
 8006316:	00d2      	lsls	r2, r2, #3
 8006318:	4920      	ldr	r1, [pc, #128]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800631a:	4313      	orrs	r3, r2
 800631c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800631e:	4b1f      	ldr	r3, [pc, #124]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d106      	bne.n	800633e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006330:	4b1a      	ldr	r3, [pc, #104]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	4a19      	ldr	r2, [pc, #100]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006336:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800633a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800633c:	e00f      	b.n	800635e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d106      	bne.n	8006352 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 800634a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006350:	e005      	b.n	800635e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	4a11      	ldr	r2, [pc, #68]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800635e:	4b0f      	ldr	r3, [pc, #60]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a0e      	ldr	r2, [pc, #56]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636a:	f7fc fc29 	bl	8002bc0 <HAL_GetTick>
 800636e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006370:	e008      	b.n	8006384 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006372:	f7fc fc25 	bl	8002bc0 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e006      	b.n	8006392 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006384:	4b05      	ldr	r3, [pc, #20]	; (800639c <RCCEx_PLL3_Config+0x15c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	58024400 	.word	0x58024400
 80063a0:	ffff0007 	.word	0xffff0007

080063a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e042      	b.n	800643c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fc f9c3 	bl	8002754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2224      	movs	r2, #36	; 0x24
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f8c2 	bl	8006570 <UART_SetConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e022      	b.n	800643c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f002 fa34 	bl	800886c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f002 fabb 	bl	80089b0 <UART_CheckIdleState>
 800643a:	4603      	mov	r3, r0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645a:	2b20      	cmp	r3, #32
 800645c:	f040 8083 	bne.w	8006566 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Transmit+0x28>
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e07b      	b.n	8006568 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UART_Transmit+0x3a>
 800647a:	2302      	movs	r3, #2
 800647c:	e074      	b.n	8006568 <HAL_UART_Transmit+0x124>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2221      	movs	r2, #33	; 0x21
 8006492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006496:	f7fc fb93 	bl	8002bc0 <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b4:	d108      	bne.n	80064c8 <HAL_UART_Transmit+0x84>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064d0:	e02c      	b.n	800652c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f002 faaf 	bl	8008a40 <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e03d      	b.n	8006568 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006500:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	3302      	adds	r3, #2
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	e007      	b.n	800651a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006532:	b29b      	uxth	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1cc      	bne.n	80064d2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2200      	movs	r2, #0
 8006540:	2140      	movs	r1, #64	; 0x40
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f002 fa7c 	bl	8008a40 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e00a      	b.n	8006568 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	e000      	b.n	8006568 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006566:	2302      	movs	r3, #2
  }
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006570:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006574:	b090      	sub	sp, #64	; 0x40
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800657a:	2300      	movs	r3, #0
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006584:	2300      	movs	r3, #0
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	4313      	orrs	r3, r2
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065a6:	4313      	orrs	r3, r2
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4bc1      	ldr	r3, [pc, #772]	; (80068b8 <UART_SetConfig+0x348>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6812      	ldr	r2, [r2, #0]
 80065b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ba:	430b      	orrs	r3, r1
 80065bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4ab7      	ldr	r2, [pc, #732]	; (80068bc <UART_SetConfig+0x34c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065ea:	4313      	orrs	r3, r2
 80065ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	4bb2      	ldr	r3, [pc, #712]	; (80068c0 <UART_SetConfig+0x350>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fe:	430b      	orrs	r3, r1
 8006600:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	f023 010f 	bic.w	r1, r3, #15
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4aa9      	ldr	r2, [pc, #676]	; (80068c4 <UART_SetConfig+0x354>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d177      	bne.n	8006712 <UART_SetConfig+0x1a2>
 8006622:	4ba9      	ldr	r3, [pc, #676]	; (80068c8 <UART_SetConfig+0x358>)
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800662a:	2b28      	cmp	r3, #40	; 0x28
 800662c:	d86c      	bhi.n	8006708 <UART_SetConfig+0x198>
 800662e:	a201      	add	r2, pc, #4	; (adr r2, 8006634 <UART_SetConfig+0xc4>)
 8006630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006634:	080066d9 	.word	0x080066d9
 8006638:	08006709 	.word	0x08006709
 800663c:	08006709 	.word	0x08006709
 8006640:	08006709 	.word	0x08006709
 8006644:	08006709 	.word	0x08006709
 8006648:	08006709 	.word	0x08006709
 800664c:	08006709 	.word	0x08006709
 8006650:	08006709 	.word	0x08006709
 8006654:	080066e1 	.word	0x080066e1
 8006658:	08006709 	.word	0x08006709
 800665c:	08006709 	.word	0x08006709
 8006660:	08006709 	.word	0x08006709
 8006664:	08006709 	.word	0x08006709
 8006668:	08006709 	.word	0x08006709
 800666c:	08006709 	.word	0x08006709
 8006670:	08006709 	.word	0x08006709
 8006674:	080066e9 	.word	0x080066e9
 8006678:	08006709 	.word	0x08006709
 800667c:	08006709 	.word	0x08006709
 8006680:	08006709 	.word	0x08006709
 8006684:	08006709 	.word	0x08006709
 8006688:	08006709 	.word	0x08006709
 800668c:	08006709 	.word	0x08006709
 8006690:	08006709 	.word	0x08006709
 8006694:	080066f1 	.word	0x080066f1
 8006698:	08006709 	.word	0x08006709
 800669c:	08006709 	.word	0x08006709
 80066a0:	08006709 	.word	0x08006709
 80066a4:	08006709 	.word	0x08006709
 80066a8:	08006709 	.word	0x08006709
 80066ac:	08006709 	.word	0x08006709
 80066b0:	08006709 	.word	0x08006709
 80066b4:	080066f9 	.word	0x080066f9
 80066b8:	08006709 	.word	0x08006709
 80066bc:	08006709 	.word	0x08006709
 80066c0:	08006709 	.word	0x08006709
 80066c4:	08006709 	.word	0x08006709
 80066c8:	08006709 	.word	0x08006709
 80066cc:	08006709 	.word	0x08006709
 80066d0:	08006709 	.word	0x08006709
 80066d4:	08006701 	.word	0x08006701
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066de:	e233      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80066e0:	2304      	movs	r3, #4
 80066e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066e6:	e22f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80066e8:	2308      	movs	r3, #8
 80066ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066ee:	e22b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80066f0:	2310      	movs	r3, #16
 80066f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066f6:	e227      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80066f8:	2320      	movs	r3, #32
 80066fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066fe:	e223      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006700:	2340      	movs	r3, #64	; 0x40
 8006702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006706:	e21f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800670e:	bf00      	nop
 8006710:	e21a      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6d      	ldr	r2, [pc, #436]	; (80068cc <UART_SetConfig+0x35c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d132      	bne.n	8006782 <UART_SetConfig+0x212>
 800671c:	4b6a      	ldr	r3, [pc, #424]	; (80068c8 <UART_SetConfig+0x358>)
 800671e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	2b05      	cmp	r3, #5
 8006726:	d827      	bhi.n	8006778 <UART_SetConfig+0x208>
 8006728:	a201      	add	r2, pc, #4	; (adr r2, 8006730 <UART_SetConfig+0x1c0>)
 800672a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672e:	bf00      	nop
 8006730:	08006749 	.word	0x08006749
 8006734:	08006751 	.word	0x08006751
 8006738:	08006759 	.word	0x08006759
 800673c:	08006761 	.word	0x08006761
 8006740:	08006769 	.word	0x08006769
 8006744:	08006771 	.word	0x08006771
 8006748:	2300      	movs	r3, #0
 800674a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800674e:	e1fb      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006756:	e1f7      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800675e:	e1f3      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006766:	e1ef      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006768:	2320      	movs	r3, #32
 800676a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800676e:	e1eb      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006770:	2340      	movs	r3, #64	; 0x40
 8006772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006776:	e1e7      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800677e:	bf00      	nop
 8006780:	e1e2      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a52      	ldr	r2, [pc, #328]	; (80068d0 <UART_SetConfig+0x360>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d132      	bne.n	80067f2 <UART_SetConfig+0x282>
 800678c:	4b4e      	ldr	r3, [pc, #312]	; (80068c8 <UART_SetConfig+0x358>)
 800678e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006790:	f003 0307 	and.w	r3, r3, #7
 8006794:	2b05      	cmp	r3, #5
 8006796:	d827      	bhi.n	80067e8 <UART_SetConfig+0x278>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <UART_SetConfig+0x230>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067c9 	.word	0x080067c9
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067be:	e1c3      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067c6:	e1bf      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ce:	e1bb      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067d6:	e1b7      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067de:	e1b3      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067e6:	e1af      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ee:	bf00      	nop
 80067f0:	e1aa      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a37      	ldr	r2, [pc, #220]	; (80068d4 <UART_SetConfig+0x364>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d132      	bne.n	8006862 <UART_SetConfig+0x2f2>
 80067fc:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <UART_SetConfig+0x358>)
 80067fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	2b05      	cmp	r3, #5
 8006806:	d827      	bhi.n	8006858 <UART_SetConfig+0x2e8>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <UART_SetConfig+0x2a0>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006829 	.word	0x08006829
 8006814:	08006831 	.word	0x08006831
 8006818:	08006839 	.word	0x08006839
 800681c:	08006841 	.word	0x08006841
 8006820:	08006849 	.word	0x08006849
 8006824:	08006851 	.word	0x08006851
 8006828:	2300      	movs	r3, #0
 800682a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800682e:	e18b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006830:	2304      	movs	r3, #4
 8006832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006836:	e187      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006838:	2308      	movs	r3, #8
 800683a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800683e:	e183      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006840:	2310      	movs	r3, #16
 8006842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006846:	e17f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006848:	2320      	movs	r3, #32
 800684a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800684e:	e17b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006850:	2340      	movs	r3, #64	; 0x40
 8006852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006856:	e177      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800685e:	bf00      	nop
 8006860:	e172      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1c      	ldr	r2, [pc, #112]	; (80068d8 <UART_SetConfig+0x368>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d144      	bne.n	80068f6 <UART_SetConfig+0x386>
 800686c:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <UART_SetConfig+0x358>)
 800686e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	2b05      	cmp	r3, #5
 8006876:	d839      	bhi.n	80068ec <UART_SetConfig+0x37c>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x310>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006899 	.word	0x08006899
 8006884:	080068a1 	.word	0x080068a1
 8006888:	080068a9 	.word	0x080068a9
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068dd 	.word	0x080068dd
 8006894:	080068e5 	.word	0x080068e5
 8006898:	2300      	movs	r3, #0
 800689a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800689e:	e153      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068a0:	2304      	movs	r3, #4
 80068a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068a6:	e14f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068a8:	2308      	movs	r3, #8
 80068aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ae:	e14b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068b0:	2310      	movs	r3, #16
 80068b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068b6:	e147      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068b8:	cfff69f3 	.word	0xcfff69f3
 80068bc:	58000c00 	.word	0x58000c00
 80068c0:	11fff4ff 	.word	0x11fff4ff
 80068c4:	40011000 	.word	0x40011000
 80068c8:	58024400 	.word	0x58024400
 80068cc:	40004400 	.word	0x40004400
 80068d0:	40004800 	.word	0x40004800
 80068d4:	40004c00 	.word	0x40004c00
 80068d8:	40005000 	.word	0x40005000
 80068dc:	2320      	movs	r3, #32
 80068de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068e2:	e131      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068ea:	e12d      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068ec:	2380      	movs	r3, #128	; 0x80
 80068ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068f2:	bf00      	nop
 80068f4:	e128      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4ac3      	ldr	r2, [pc, #780]	; (8006c08 <UART_SetConfig+0x698>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d178      	bne.n	80069f2 <UART_SetConfig+0x482>
 8006900:	4bc2      	ldr	r3, [pc, #776]	; (8006c0c <UART_SetConfig+0x69c>)
 8006902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006908:	2b28      	cmp	r3, #40	; 0x28
 800690a:	d86d      	bhi.n	80069e8 <UART_SetConfig+0x478>
 800690c:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x3a4>)
 800690e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006912:	bf00      	nop
 8006914:	080069b9 	.word	0x080069b9
 8006918:	080069e9 	.word	0x080069e9
 800691c:	080069e9 	.word	0x080069e9
 8006920:	080069e9 	.word	0x080069e9
 8006924:	080069e9 	.word	0x080069e9
 8006928:	080069e9 	.word	0x080069e9
 800692c:	080069e9 	.word	0x080069e9
 8006930:	080069e9 	.word	0x080069e9
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069e9 	.word	0x080069e9
 800693c:	080069e9 	.word	0x080069e9
 8006940:	080069e9 	.word	0x080069e9
 8006944:	080069e9 	.word	0x080069e9
 8006948:	080069e9 	.word	0x080069e9
 800694c:	080069e9 	.word	0x080069e9
 8006950:	080069e9 	.word	0x080069e9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069e9 	.word	0x080069e9
 800695c:	080069e9 	.word	0x080069e9
 8006960:	080069e9 	.word	0x080069e9
 8006964:	080069e9 	.word	0x080069e9
 8006968:	080069e9 	.word	0x080069e9
 800696c:	080069e9 	.word	0x080069e9
 8006970:	080069e9 	.word	0x080069e9
 8006974:	080069d1 	.word	0x080069d1
 8006978:	080069e9 	.word	0x080069e9
 800697c:	080069e9 	.word	0x080069e9
 8006980:	080069e9 	.word	0x080069e9
 8006984:	080069e9 	.word	0x080069e9
 8006988:	080069e9 	.word	0x080069e9
 800698c:	080069e9 	.word	0x080069e9
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069d9 	.word	0x080069d9
 8006998:	080069e9 	.word	0x080069e9
 800699c:	080069e9 	.word	0x080069e9
 80069a0:	080069e9 	.word	0x080069e9
 80069a4:	080069e9 	.word	0x080069e9
 80069a8:	080069e9 	.word	0x080069e9
 80069ac:	080069e9 	.word	0x080069e9
 80069b0:	080069e9 	.word	0x080069e9
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069be:	e0c3      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069c6:	e0bf      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ce:	e0bb      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069d6:	e0b7      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069d8:	2320      	movs	r3, #32
 80069da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069de:	e0b3      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069e6:	e0af      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ee:	bf00      	nop
 80069f0:	e0aa      	b.n	8006b48 <UART_SetConfig+0x5d8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a86      	ldr	r2, [pc, #536]	; (8006c10 <UART_SetConfig+0x6a0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d132      	bne.n	8006a62 <UART_SetConfig+0x4f2>
 80069fc:	4b83      	ldr	r3, [pc, #524]	; (8006c0c <UART_SetConfig+0x69c>)
 80069fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	d827      	bhi.n	8006a58 <UART_SetConfig+0x4e8>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <UART_SetConfig+0x4a0>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a29 	.word	0x08006a29
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	08006a39 	.word	0x08006a39
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a2e:	e08b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a30:	2304      	movs	r3, #4
 8006a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a36:	e087      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a38:	2308      	movs	r3, #8
 8006a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a3e:	e083      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a40:	2310      	movs	r3, #16
 8006a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a46:	e07f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a48:	2320      	movs	r3, #32
 8006a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a4e:	e07b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a50:	2340      	movs	r3, #64	; 0x40
 8006a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a56:	e077      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a58:	2380      	movs	r3, #128	; 0x80
 8006a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a5e:	bf00      	nop
 8006a60:	e072      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a6b      	ldr	r2, [pc, #428]	; (8006c14 <UART_SetConfig+0x6a4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d132      	bne.n	8006ad2 <UART_SetConfig+0x562>
 8006a6c:	4b67      	ldr	r3, [pc, #412]	; (8006c0c <UART_SetConfig+0x69c>)
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	2b05      	cmp	r3, #5
 8006a76:	d827      	bhi.n	8006ac8 <UART_SetConfig+0x558>
 8006a78:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0x510>)
 8006a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7e:	bf00      	nop
 8006a80:	08006a99 	.word	0x08006a99
 8006a84:	08006aa1 	.word	0x08006aa1
 8006a88:	08006aa9 	.word	0x08006aa9
 8006a8c:	08006ab1 	.word	0x08006ab1
 8006a90:	08006ab9 	.word	0x08006ab9
 8006a94:	08006ac1 	.word	0x08006ac1
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a9e:	e053      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006aa0:	2304      	movs	r3, #4
 8006aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aa6:	e04f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006aa8:	2308      	movs	r3, #8
 8006aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aae:	e04b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ab6:	e047      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006ab8:	2320      	movs	r3, #32
 8006aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006abe:	e043      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ac6:	e03f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ace:	bf00      	nop
 8006ad0:	e03a      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a50      	ldr	r2, [pc, #320]	; (8006c18 <UART_SetConfig+0x6a8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d132      	bne.n	8006b42 <UART_SetConfig+0x5d2>
 8006adc:	4b4b      	ldr	r3, [pc, #300]	; (8006c0c <UART_SetConfig+0x69c>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d827      	bhi.n	8006b38 <UART_SetConfig+0x5c8>
 8006ae8:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <UART_SetConfig+0x580>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b09 	.word	0x08006b09
 8006af4:	08006b11 	.word	0x08006b11
 8006af8:	08006b19 	.word	0x08006b19
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b29 	.word	0x08006b29
 8006b04:	08006b31 	.word	0x08006b31
 8006b08:	2302      	movs	r3, #2
 8006b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0e:	e01b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b10:	2304      	movs	r3, #4
 8006b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b16:	e017      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b18:	2308      	movs	r3, #8
 8006b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b1e:	e013      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b20:	2310      	movs	r3, #16
 8006b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b26:	e00f      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b2e:	e00b      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b36:	e007      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b38:	2380      	movs	r3, #128	; 0x80
 8006b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b3e:	bf00      	nop
 8006b40:	e002      	b.n	8006b48 <UART_SetConfig+0x5d8>
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a32      	ldr	r2, [pc, #200]	; (8006c18 <UART_SetConfig+0x6a8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	f040 86f7 	bne.w	8007942 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b54:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b58:	2b08      	cmp	r3, #8
 8006b5a:	f000 80c0 	beq.w	8006cde <UART_SetConfig+0x76e>
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	dc04      	bgt.n	8006b6c <UART_SetConfig+0x5fc>
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d00c      	beq.n	8006b80 <UART_SetConfig+0x610>
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d065      	beq.n	8006c36 <UART_SetConfig+0x6c6>
 8006b6a:	e27a      	b.n	8007062 <UART_SetConfig+0xaf2>
 8006b6c:	2b20      	cmp	r3, #32
 8006b6e:	f000 81b0 	beq.w	8006ed2 <UART_SetConfig+0x962>
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	f000 821e 	beq.w	8006fb4 <UART_SetConfig+0xa44>
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	f000 8104 	beq.w	8006d86 <UART_SetConfig+0x816>
 8006b7e:	e270      	b.n	8007062 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b80:	f7fe fffe 	bl	8005b80 <HAL_RCCEx_GetD3PCLK1Freq>
 8006b84:	4602      	mov	r2, r0
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d04e      	beq.n	8006c2c <UART_SetConfig+0x6bc>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d048      	beq.n	8006c28 <UART_SetConfig+0x6b8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d042      	beq.n	8006c24 <UART_SetConfig+0x6b4>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d03c      	beq.n	8006c20 <UART_SetConfig+0x6b0>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d036      	beq.n	8006c1c <UART_SetConfig+0x6ac>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2b05      	cmp	r3, #5
 8006bb4:	d026      	beq.n	8006c04 <UART_SetConfig+0x694>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	d020      	beq.n	8006c00 <UART_SetConfig+0x690>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b07      	cmp	r3, #7
 8006bc4:	d01a      	beq.n	8006bfc <UART_SetConfig+0x68c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d014      	beq.n	8006bf8 <UART_SetConfig+0x688>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b09      	cmp	r3, #9
 8006bd4:	d00e      	beq.n	8006bf4 <UART_SetConfig+0x684>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	2b0a      	cmp	r3, #10
 8006bdc:	d008      	beq.n	8006bf0 <UART_SetConfig+0x680>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	2b0b      	cmp	r3, #11
 8006be4:	d102      	bne.n	8006bec <UART_SetConfig+0x67c>
 8006be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bea:	e020      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e01e      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	e01c      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006bf4:	2340      	movs	r3, #64	; 0x40
 8006bf6:	e01a      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	e018      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	e016      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c00:	230c      	movs	r3, #12
 8006c02:	e014      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c04:	230a      	movs	r3, #10
 8006c06:	e012      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c08:	40011400 	.word	0x40011400
 8006c0c:	58024400 	.word	0x58024400
 8006c10:	40007800 	.word	0x40007800
 8006c14:	40007c00 	.word	0x40007c00
 8006c18:	58000c00 	.word	0x58000c00
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	e006      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c20:	2306      	movs	r3, #6
 8006c22:	e004      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c24:	2304      	movs	r3, #4
 8006c26:	e002      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e000      	b.n	8006c2e <UART_SetConfig+0x6be>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c34:	e219      	b.n	800706a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c36:	f107 0318 	add.w	r3, r7, #24
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe ffb6 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d044      	beq.n	8006cd4 <UART_SetConfig+0x764>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d03e      	beq.n	8006cd0 <UART_SetConfig+0x760>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d038      	beq.n	8006ccc <UART_SetConfig+0x75c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d032      	beq.n	8006cc8 <UART_SetConfig+0x758>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d02c      	beq.n	8006cc4 <UART_SetConfig+0x754>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d026      	beq.n	8006cc0 <UART_SetConfig+0x750>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d020      	beq.n	8006cbc <UART_SetConfig+0x74c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b07      	cmp	r3, #7
 8006c80:	d01a      	beq.n	8006cb8 <UART_SetConfig+0x748>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d014      	beq.n	8006cb4 <UART_SetConfig+0x744>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b09      	cmp	r3, #9
 8006c90:	d00e      	beq.n	8006cb0 <UART_SetConfig+0x740>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b0a      	cmp	r3, #10
 8006c98:	d008      	beq.n	8006cac <UART_SetConfig+0x73c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b0b      	cmp	r3, #11
 8006ca0:	d102      	bne.n	8006ca8 <UART_SetConfig+0x738>
 8006ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ca6:	e016      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e014      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cac:	2380      	movs	r3, #128	; 0x80
 8006cae:	e012      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	e010      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cb4:	2320      	movs	r3, #32
 8006cb6:	e00e      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	e00c      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	e00a      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cc0:	230a      	movs	r3, #10
 8006cc2:	e008      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	e006      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cc8:	2306      	movs	r3, #6
 8006cca:	e004      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	e002      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e000      	b.n	8006cd6 <UART_SetConfig+0x766>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cdc:	e1c5      	b.n	800706a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cde:	f107 030c 	add.w	r3, r7, #12
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff f8ae 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d044      	beq.n	8006d7c <UART_SetConfig+0x80c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d03e      	beq.n	8006d78 <UART_SetConfig+0x808>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d038      	beq.n	8006d74 <UART_SetConfig+0x804>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d032      	beq.n	8006d70 <UART_SetConfig+0x800>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d02c      	beq.n	8006d6c <UART_SetConfig+0x7fc>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	d026      	beq.n	8006d68 <UART_SetConfig+0x7f8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b06      	cmp	r3, #6
 8006d20:	d020      	beq.n	8006d64 <UART_SetConfig+0x7f4>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b07      	cmp	r3, #7
 8006d28:	d01a      	beq.n	8006d60 <UART_SetConfig+0x7f0>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b08      	cmp	r3, #8
 8006d30:	d014      	beq.n	8006d5c <UART_SetConfig+0x7ec>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b09      	cmp	r3, #9
 8006d38:	d00e      	beq.n	8006d58 <UART_SetConfig+0x7e8>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	2b0a      	cmp	r3, #10
 8006d40:	d008      	beq.n	8006d54 <UART_SetConfig+0x7e4>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b0b      	cmp	r3, #11
 8006d48:	d102      	bne.n	8006d50 <UART_SetConfig+0x7e0>
 8006d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d4e:	e016      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e014      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	e012      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	e010      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d5c:	2320      	movs	r3, #32
 8006d5e:	e00e      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d60:	2310      	movs	r3, #16
 8006d62:	e00c      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d64:	230c      	movs	r3, #12
 8006d66:	e00a      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d68:	230a      	movs	r3, #10
 8006d6a:	e008      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	e006      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d70:	2306      	movs	r3, #6
 8006d72:	e004      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d74:	2304      	movs	r3, #4
 8006d76:	e002      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e000      	b.n	8006d7e <UART_SetConfig+0x80e>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d84:	e171      	b.n	800706a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d86:	4b7a      	ldr	r3, [pc, #488]	; (8006f70 <UART_SetConfig+0xa00>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d054      	beq.n	8006e3c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d92:	4b77      	ldr	r3, [pc, #476]	; (8006f70 <UART_SetConfig+0xa00>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	08db      	lsrs	r3, r3, #3
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	4a75      	ldr	r2, [pc, #468]	; (8006f74 <UART_SetConfig+0xa04>)
 8006d9e:	40da      	lsrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d044      	beq.n	8006e32 <UART_SetConfig+0x8c2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d03e      	beq.n	8006e2e <UART_SetConfig+0x8be>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d038      	beq.n	8006e2a <UART_SetConfig+0x8ba>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d032      	beq.n	8006e26 <UART_SetConfig+0x8b6>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d02c      	beq.n	8006e22 <UART_SetConfig+0x8b2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b05      	cmp	r3, #5
 8006dce:	d026      	beq.n	8006e1e <UART_SetConfig+0x8ae>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b06      	cmp	r3, #6
 8006dd6:	d020      	beq.n	8006e1a <UART_SetConfig+0x8aa>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b07      	cmp	r3, #7
 8006dde:	d01a      	beq.n	8006e16 <UART_SetConfig+0x8a6>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d014      	beq.n	8006e12 <UART_SetConfig+0x8a2>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b09      	cmp	r3, #9
 8006dee:	d00e      	beq.n	8006e0e <UART_SetConfig+0x89e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	2b0a      	cmp	r3, #10
 8006df6:	d008      	beq.n	8006e0a <UART_SetConfig+0x89a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	2b0b      	cmp	r3, #11
 8006dfe:	d102      	bne.n	8006e06 <UART_SetConfig+0x896>
 8006e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e04:	e016      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e06:	2301      	movs	r3, #1
 8006e08:	e014      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e0a:	2380      	movs	r3, #128	; 0x80
 8006e0c:	e012      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e0e:	2340      	movs	r3, #64	; 0x40
 8006e10:	e010      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e12:	2320      	movs	r3, #32
 8006e14:	e00e      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e16:	2310      	movs	r3, #16
 8006e18:	e00c      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e1a:	230c      	movs	r3, #12
 8006e1c:	e00a      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e1e:	230a      	movs	r3, #10
 8006e20:	e008      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e22:	2308      	movs	r3, #8
 8006e24:	e006      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e26:	2306      	movs	r3, #6
 8006e28:	e004      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e002      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e000      	b.n	8006e34 <UART_SetConfig+0x8c4>
 8006e32:	2301      	movs	r3, #1
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006e3a:	e116      	b.n	800706a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d043      	beq.n	8006ecc <UART_SetConfig+0x95c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d03d      	beq.n	8006ec8 <UART_SetConfig+0x958>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d037      	beq.n	8006ec4 <UART_SetConfig+0x954>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d031      	beq.n	8006ec0 <UART_SetConfig+0x950>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d02b      	beq.n	8006ebc <UART_SetConfig+0x94c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	2b05      	cmp	r3, #5
 8006e6a:	d025      	beq.n	8006eb8 <UART_SetConfig+0x948>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	2b06      	cmp	r3, #6
 8006e72:	d01f      	beq.n	8006eb4 <UART_SetConfig+0x944>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2b07      	cmp	r3, #7
 8006e7a:	d019      	beq.n	8006eb0 <UART_SetConfig+0x940>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d013      	beq.n	8006eac <UART_SetConfig+0x93c>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b09      	cmp	r3, #9
 8006e8a:	d00d      	beq.n	8006ea8 <UART_SetConfig+0x938>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b0a      	cmp	r3, #10
 8006e92:	d007      	beq.n	8006ea4 <UART_SetConfig+0x934>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b0b      	cmp	r3, #11
 8006e9a:	d101      	bne.n	8006ea0 <UART_SetConfig+0x930>
 8006e9c:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <UART_SetConfig+0xa08>)
 8006e9e:	e016      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ea0:	4b34      	ldr	r3, [pc, #208]	; (8006f74 <UART_SetConfig+0xa04>)
 8006ea2:	e014      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ea4:	4b35      	ldr	r3, [pc, #212]	; (8006f7c <UART_SetConfig+0xa0c>)
 8006ea6:	e012      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ea8:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <UART_SetConfig+0xa10>)
 8006eaa:	e010      	b.n	8006ece <UART_SetConfig+0x95e>
 8006eac:	4b35      	ldr	r3, [pc, #212]	; (8006f84 <UART_SetConfig+0xa14>)
 8006eae:	e00e      	b.n	8006ece <UART_SetConfig+0x95e>
 8006eb0:	4b35      	ldr	r3, [pc, #212]	; (8006f88 <UART_SetConfig+0xa18>)
 8006eb2:	e00c      	b.n	8006ece <UART_SetConfig+0x95e>
 8006eb4:	4b35      	ldr	r3, [pc, #212]	; (8006f8c <UART_SetConfig+0xa1c>)
 8006eb6:	e00a      	b.n	8006ece <UART_SetConfig+0x95e>
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <UART_SetConfig+0xa20>)
 8006eba:	e008      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ebc:	4b35      	ldr	r3, [pc, #212]	; (8006f94 <UART_SetConfig+0xa24>)
 8006ebe:	e006      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <UART_SetConfig+0xa28>)
 8006ec2:	e004      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <UART_SetConfig+0xa2c>)
 8006ec6:	e002      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ec8:	4b35      	ldr	r3, [pc, #212]	; (8006fa0 <UART_SetConfig+0xa30>)
 8006eca:	e000      	b.n	8006ece <UART_SetConfig+0x95e>
 8006ecc:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <UART_SetConfig+0xa04>)
 8006ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ed0:	e0cb      	b.n	800706a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d046      	beq.n	8006f68 <UART_SetConfig+0x9f8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d040      	beq.n	8006f64 <UART_SetConfig+0x9f4>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d03a      	beq.n	8006f60 <UART_SetConfig+0x9f0>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d034      	beq.n	8006f5c <UART_SetConfig+0x9ec>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d02e      	beq.n	8006f58 <UART_SetConfig+0x9e8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d028      	beq.n	8006f54 <UART_SetConfig+0x9e4>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b06      	cmp	r3, #6
 8006f08:	d022      	beq.n	8006f50 <UART_SetConfig+0x9e0>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b07      	cmp	r3, #7
 8006f10:	d01c      	beq.n	8006f4c <UART_SetConfig+0x9dc>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b08      	cmp	r3, #8
 8006f18:	d016      	beq.n	8006f48 <UART_SetConfig+0x9d8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d00f      	beq.n	8006f42 <UART_SetConfig+0x9d2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b0a      	cmp	r3, #10
 8006f28:	d008      	beq.n	8006f3c <UART_SetConfig+0x9cc>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b0b      	cmp	r3, #11
 8006f30:	d102      	bne.n	8006f38 <UART_SetConfig+0x9c8>
 8006f32:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006f36:	e018      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <UART_SetConfig+0xa18>)
 8006f3a:	e016      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f3c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006f40:	e013      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f42:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f46:	e010      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <UART_SetConfig+0xa34>)
 8006f4a:	e00e      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <UART_SetConfig+0xa08>)
 8006f4e:	e00c      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f50:	4b15      	ldr	r3, [pc, #84]	; (8006fa8 <UART_SetConfig+0xa38>)
 8006f52:	e00a      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <UART_SetConfig+0xa3c>)
 8006f56:	e008      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f58:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <UART_SetConfig+0xa0c>)
 8006f5a:	e006      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f5c:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <UART_SetConfig+0xa40>)
 8006f5e:	e004      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <UART_SetConfig+0xa10>)
 8006f62:	e002      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <UART_SetConfig+0xa14>)
 8006f66:	e000      	b.n	8006f6a <UART_SetConfig+0x9fa>
 8006f68:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <UART_SetConfig+0xa18>)
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f6c:	e07d      	b.n	800706a <UART_SetConfig+0xafa>
 8006f6e:	bf00      	nop
 8006f70:	58024400 	.word	0x58024400
 8006f74:	03d09000 	.word	0x03d09000
 8006f78:	0003d090 	.word	0x0003d090
 8006f7c:	0007a120 	.word	0x0007a120
 8006f80:	000f4240 	.word	0x000f4240
 8006f84:	001e8480 	.word	0x001e8480
 8006f88:	003d0900 	.word	0x003d0900
 8006f8c:	00516155 	.word	0x00516155
 8006f90:	0061a800 	.word	0x0061a800
 8006f94:	007a1200 	.word	0x007a1200
 8006f98:	00a2c2aa 	.word	0x00a2c2aa
 8006f9c:	00f42400 	.word	0x00f42400
 8006fa0:	01e84800 	.word	0x01e84800
 8006fa4:	0001e848 	.word	0x0001e848
 8006fa8:	00051615 	.word	0x00051615
 8006fac:	00061a80 	.word	0x00061a80
 8006fb0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d04e      	beq.n	800705a <UART_SetConfig+0xaea>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d047      	beq.n	8007054 <UART_SetConfig+0xae4>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d040      	beq.n	800704e <UART_SetConfig+0xade>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d039      	beq.n	8007048 <UART_SetConfig+0xad8>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d032      	beq.n	8007042 <UART_SetConfig+0xad2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d02b      	beq.n	800703c <UART_SetConfig+0xacc>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b06      	cmp	r3, #6
 8006fea:	d024      	beq.n	8007036 <UART_SetConfig+0xac6>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b07      	cmp	r3, #7
 8006ff2:	d01d      	beq.n	8007030 <UART_SetConfig+0xac0>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d016      	beq.n	800702a <UART_SetConfig+0xaba>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	2b09      	cmp	r3, #9
 8007002:	d00f      	beq.n	8007024 <UART_SetConfig+0xab4>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2b0a      	cmp	r3, #10
 800700a:	d008      	beq.n	800701e <UART_SetConfig+0xaae>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	2b0b      	cmp	r3, #11
 8007012:	d101      	bne.n	8007018 <UART_SetConfig+0xaa8>
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	e022      	b.n	800705e <UART_SetConfig+0xaee>
 8007018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800701c:	e01f      	b.n	800705e <UART_SetConfig+0xaee>
 800701e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007022:	e01c      	b.n	800705e <UART_SetConfig+0xaee>
 8007024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007028:	e019      	b.n	800705e <UART_SetConfig+0xaee>
 800702a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800702e:	e016      	b.n	800705e <UART_SetConfig+0xaee>
 8007030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007034:	e013      	b.n	800705e <UART_SetConfig+0xaee>
 8007036:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800703a:	e010      	b.n	800705e <UART_SetConfig+0xaee>
 800703c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007040:	e00d      	b.n	800705e <UART_SetConfig+0xaee>
 8007042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007046:	e00a      	b.n	800705e <UART_SetConfig+0xaee>
 8007048:	f241 5355 	movw	r3, #5461	; 0x1555
 800704c:	e007      	b.n	800705e <UART_SetConfig+0xaee>
 800704e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007052:	e004      	b.n	800705e <UART_SetConfig+0xaee>
 8007054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007058:	e001      	b.n	800705e <UART_SetConfig+0xaee>
 800705a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007060:	e003      	b.n	800706a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007068:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	2b00      	cmp	r3, #0
 800706e:	f001 83e8 	beq.w	8008842 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707e:	429a      	cmp	r2, r3
 8007080:	d305      	bcc.n	800708e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800708a:	429a      	cmp	r2, r3
 800708c:	d904      	bls.n	8007098 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007094:	f001 bbd5 	b.w	8008842 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007098:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800709c:	2b08      	cmp	r3, #8
 800709e:	f000 8154 	beq.w	800734a <UART_SetConfig+0xdda>
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	dc06      	bgt.n	80070b4 <UART_SetConfig+0xb44>
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d00f      	beq.n	80070ca <UART_SetConfig+0xb5a>
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	f000 80ac 	beq.w	8007208 <UART_SetConfig+0xc98>
 80070b0:	f000 bc30 	b.w	8007914 <UART_SetConfig+0x13a4>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	f000 832d 	beq.w	8007714 <UART_SetConfig+0x11a4>
 80070ba:	2b40      	cmp	r3, #64	; 0x40
 80070bc:	f000 83a5 	beq.w	800780a <UART_SetConfig+0x129a>
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	f000 81e3 	beq.w	800748c <UART_SetConfig+0xf1c>
 80070c6:	f000 bc25 	b.w	8007914 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070ca:	f7fe fd59 	bl	8005b80 <HAL_RCCEx_GetD3PCLK1Freq>
 80070ce:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	4618      	mov	r0, r3
 80070d4:	f04f 0100 	mov.w	r1, #0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d067      	beq.n	80071b0 <UART_SetConfig+0xc40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d05e      	beq.n	80071a6 <UART_SetConfig+0xc36>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d055      	beq.n	800719c <UART_SetConfig+0xc2c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d04c      	beq.n	8007192 <UART_SetConfig+0xc22>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d043      	beq.n	8007188 <UART_SetConfig+0xc18>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	2b05      	cmp	r3, #5
 8007106:	d03a      	beq.n	800717e <UART_SetConfig+0xc0e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b06      	cmp	r3, #6
 800710e:	d031      	beq.n	8007174 <UART_SetConfig+0xc04>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b07      	cmp	r3, #7
 8007116:	d028      	beq.n	800716a <UART_SetConfig+0xbfa>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b08      	cmp	r3, #8
 800711e:	d01f      	beq.n	8007160 <UART_SetConfig+0xbf0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b09      	cmp	r3, #9
 8007126:	d016      	beq.n	8007156 <UART_SetConfig+0xbe6>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b0a      	cmp	r3, #10
 800712e:	d00d      	beq.n	800714c <UART_SetConfig+0xbdc>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	2b0b      	cmp	r3, #11
 8007136:	d104      	bne.n	8007142 <UART_SetConfig+0xbd2>
 8007138:	f44f 7380 	mov.w	r3, #256	; 0x100
 800713c:	f04f 0400 	mov.w	r4, #0
 8007140:	e03a      	b.n	80071b8 <UART_SetConfig+0xc48>
 8007142:	f04f 0301 	mov.w	r3, #1
 8007146:	f04f 0400 	mov.w	r4, #0
 800714a:	e035      	b.n	80071b8 <UART_SetConfig+0xc48>
 800714c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007150:	f04f 0400 	mov.w	r4, #0
 8007154:	e030      	b.n	80071b8 <UART_SetConfig+0xc48>
 8007156:	f04f 0340 	mov.w	r3, #64	; 0x40
 800715a:	f04f 0400 	mov.w	r4, #0
 800715e:	e02b      	b.n	80071b8 <UART_SetConfig+0xc48>
 8007160:	f04f 0320 	mov.w	r3, #32
 8007164:	f04f 0400 	mov.w	r4, #0
 8007168:	e026      	b.n	80071b8 <UART_SetConfig+0xc48>
 800716a:	f04f 0310 	mov.w	r3, #16
 800716e:	f04f 0400 	mov.w	r4, #0
 8007172:	e021      	b.n	80071b8 <UART_SetConfig+0xc48>
 8007174:	f04f 030c 	mov.w	r3, #12
 8007178:	f04f 0400 	mov.w	r4, #0
 800717c:	e01c      	b.n	80071b8 <UART_SetConfig+0xc48>
 800717e:	f04f 030a 	mov.w	r3, #10
 8007182:	f04f 0400 	mov.w	r4, #0
 8007186:	e017      	b.n	80071b8 <UART_SetConfig+0xc48>
 8007188:	f04f 0308 	mov.w	r3, #8
 800718c:	f04f 0400 	mov.w	r4, #0
 8007190:	e012      	b.n	80071b8 <UART_SetConfig+0xc48>
 8007192:	f04f 0306 	mov.w	r3, #6
 8007196:	f04f 0400 	mov.w	r4, #0
 800719a:	e00d      	b.n	80071b8 <UART_SetConfig+0xc48>
 800719c:	f04f 0304 	mov.w	r3, #4
 80071a0:	f04f 0400 	mov.w	r4, #0
 80071a4:	e008      	b.n	80071b8 <UART_SetConfig+0xc48>
 80071a6:	f04f 0302 	mov.w	r3, #2
 80071aa:	f04f 0400 	mov.w	r4, #0
 80071ae:	e003      	b.n	80071b8 <UART_SetConfig+0xc48>
 80071b0:	f04f 0301 	mov.w	r3, #1
 80071b4:	f04f 0400 	mov.w	r4, #0
 80071b8:	461a      	mov	r2, r3
 80071ba:	4623      	mov	r3, r4
 80071bc:	f7f9 f8e8 	bl	8000390 <__aeabi_uldivmod>
 80071c0:	4603      	mov	r3, r0
 80071c2:	460c      	mov	r4, r1
 80071c4:	4619      	mov	r1, r3
 80071c6:	4622      	mov	r2, r4
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	f04f 0400 	mov.w	r4, #0
 80071d0:	0214      	lsls	r4, r2, #8
 80071d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80071d6:	020b      	lsls	r3, r1, #8
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6852      	ldr	r2, [r2, #4]
 80071dc:	0852      	lsrs	r2, r2, #1
 80071de:	4611      	mov	r1, r2
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	eb13 0b01 	adds.w	fp, r3, r1
 80071e8:	eb44 0c02 	adc.w	ip, r4, r2
 80071ec:	4658      	mov	r0, fp
 80071ee:	4661      	mov	r1, ip
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f04f 0400 	mov.w	r4, #0
 80071f8:	461a      	mov	r2, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	f7f9 f8c8 	bl	8000390 <__aeabi_uldivmod>
 8007200:	4603      	mov	r3, r0
 8007202:	460c      	mov	r4, r1
 8007204:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007206:	e389      	b.n	800791c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007208:	f107 0318 	add.w	r3, r7, #24
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fccd 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	4618      	mov	r0, r3
 8007216:	f04f 0100 	mov.w	r1, #0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2b00      	cmp	r3, #0
 8007220:	d067      	beq.n	80072f2 <UART_SetConfig+0xd82>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b01      	cmp	r3, #1
 8007228:	d05e      	beq.n	80072e8 <UART_SetConfig+0xd78>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b02      	cmp	r3, #2
 8007230:	d055      	beq.n	80072de <UART_SetConfig+0xd6e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b03      	cmp	r3, #3
 8007238:	d04c      	beq.n	80072d4 <UART_SetConfig+0xd64>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b04      	cmp	r3, #4
 8007240:	d043      	beq.n	80072ca <UART_SetConfig+0xd5a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	2b05      	cmp	r3, #5
 8007248:	d03a      	beq.n	80072c0 <UART_SetConfig+0xd50>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b06      	cmp	r3, #6
 8007250:	d031      	beq.n	80072b6 <UART_SetConfig+0xd46>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2b07      	cmp	r3, #7
 8007258:	d028      	beq.n	80072ac <UART_SetConfig+0xd3c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b08      	cmp	r3, #8
 8007260:	d01f      	beq.n	80072a2 <UART_SetConfig+0xd32>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b09      	cmp	r3, #9
 8007268:	d016      	beq.n	8007298 <UART_SetConfig+0xd28>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b0a      	cmp	r3, #10
 8007270:	d00d      	beq.n	800728e <UART_SetConfig+0xd1e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b0b      	cmp	r3, #11
 8007278:	d104      	bne.n	8007284 <UART_SetConfig+0xd14>
 800727a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800727e:	f04f 0400 	mov.w	r4, #0
 8007282:	e03a      	b.n	80072fa <UART_SetConfig+0xd8a>
 8007284:	f04f 0301 	mov.w	r3, #1
 8007288:	f04f 0400 	mov.w	r4, #0
 800728c:	e035      	b.n	80072fa <UART_SetConfig+0xd8a>
 800728e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007292:	f04f 0400 	mov.w	r4, #0
 8007296:	e030      	b.n	80072fa <UART_SetConfig+0xd8a>
 8007298:	f04f 0340 	mov.w	r3, #64	; 0x40
 800729c:	f04f 0400 	mov.w	r4, #0
 80072a0:	e02b      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072a2:	f04f 0320 	mov.w	r3, #32
 80072a6:	f04f 0400 	mov.w	r4, #0
 80072aa:	e026      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072ac:	f04f 0310 	mov.w	r3, #16
 80072b0:	f04f 0400 	mov.w	r4, #0
 80072b4:	e021      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072b6:	f04f 030c 	mov.w	r3, #12
 80072ba:	f04f 0400 	mov.w	r4, #0
 80072be:	e01c      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072c0:	f04f 030a 	mov.w	r3, #10
 80072c4:	f04f 0400 	mov.w	r4, #0
 80072c8:	e017      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072ca:	f04f 0308 	mov.w	r3, #8
 80072ce:	f04f 0400 	mov.w	r4, #0
 80072d2:	e012      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072d4:	f04f 0306 	mov.w	r3, #6
 80072d8:	f04f 0400 	mov.w	r4, #0
 80072dc:	e00d      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072de:	f04f 0304 	mov.w	r3, #4
 80072e2:	f04f 0400 	mov.w	r4, #0
 80072e6:	e008      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072e8:	f04f 0302 	mov.w	r3, #2
 80072ec:	f04f 0400 	mov.w	r4, #0
 80072f0:	e003      	b.n	80072fa <UART_SetConfig+0xd8a>
 80072f2:	f04f 0301 	mov.w	r3, #1
 80072f6:	f04f 0400 	mov.w	r4, #0
 80072fa:	461a      	mov	r2, r3
 80072fc:	4623      	mov	r3, r4
 80072fe:	f7f9 f847 	bl	8000390 <__aeabi_uldivmod>
 8007302:	4603      	mov	r3, r0
 8007304:	460c      	mov	r4, r1
 8007306:	4619      	mov	r1, r3
 8007308:	4622      	mov	r2, r4
 800730a:	f04f 0300 	mov.w	r3, #0
 800730e:	f04f 0400 	mov.w	r4, #0
 8007312:	0214      	lsls	r4, r2, #8
 8007314:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007318:	020b      	lsls	r3, r1, #8
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	6852      	ldr	r2, [r2, #4]
 800731e:	0852      	lsrs	r2, r2, #1
 8007320:	4611      	mov	r1, r2
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	eb13 0b01 	adds.w	fp, r3, r1
 800732a:	eb44 0c02 	adc.w	ip, r4, r2
 800732e:	4658      	mov	r0, fp
 8007330:	4661      	mov	r1, ip
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f04f 0400 	mov.w	r4, #0
 800733a:	461a      	mov	r2, r3
 800733c:	4623      	mov	r3, r4
 800733e:	f7f9 f827 	bl	8000390 <__aeabi_uldivmod>
 8007342:	4603      	mov	r3, r0
 8007344:	460c      	mov	r4, r1
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007348:	e2e8      	b.n	800791c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800734a:	f107 030c 	add.w	r3, r7, #12
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fd78 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4618      	mov	r0, r3
 8007358:	f04f 0100 	mov.w	r1, #0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	d067      	beq.n	8007434 <UART_SetConfig+0xec4>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b01      	cmp	r3, #1
 800736a:	d05e      	beq.n	800742a <UART_SetConfig+0xeba>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b02      	cmp	r3, #2
 8007372:	d055      	beq.n	8007420 <UART_SetConfig+0xeb0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b03      	cmp	r3, #3
 800737a:	d04c      	beq.n	8007416 <UART_SetConfig+0xea6>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b04      	cmp	r3, #4
 8007382:	d043      	beq.n	800740c <UART_SetConfig+0xe9c>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b05      	cmp	r3, #5
 800738a:	d03a      	beq.n	8007402 <UART_SetConfig+0xe92>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b06      	cmp	r3, #6
 8007392:	d031      	beq.n	80073f8 <UART_SetConfig+0xe88>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b07      	cmp	r3, #7
 800739a:	d028      	beq.n	80073ee <UART_SetConfig+0xe7e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b08      	cmp	r3, #8
 80073a2:	d01f      	beq.n	80073e4 <UART_SetConfig+0xe74>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b09      	cmp	r3, #9
 80073aa:	d016      	beq.n	80073da <UART_SetConfig+0xe6a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b0a      	cmp	r3, #10
 80073b2:	d00d      	beq.n	80073d0 <UART_SetConfig+0xe60>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b0b      	cmp	r3, #11
 80073ba:	d104      	bne.n	80073c6 <UART_SetConfig+0xe56>
 80073bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c0:	f04f 0400 	mov.w	r4, #0
 80073c4:	e03a      	b.n	800743c <UART_SetConfig+0xecc>
 80073c6:	f04f 0301 	mov.w	r3, #1
 80073ca:	f04f 0400 	mov.w	r4, #0
 80073ce:	e035      	b.n	800743c <UART_SetConfig+0xecc>
 80073d0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073d4:	f04f 0400 	mov.w	r4, #0
 80073d8:	e030      	b.n	800743c <UART_SetConfig+0xecc>
 80073da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80073de:	f04f 0400 	mov.w	r4, #0
 80073e2:	e02b      	b.n	800743c <UART_SetConfig+0xecc>
 80073e4:	f04f 0320 	mov.w	r3, #32
 80073e8:	f04f 0400 	mov.w	r4, #0
 80073ec:	e026      	b.n	800743c <UART_SetConfig+0xecc>
 80073ee:	f04f 0310 	mov.w	r3, #16
 80073f2:	f04f 0400 	mov.w	r4, #0
 80073f6:	e021      	b.n	800743c <UART_SetConfig+0xecc>
 80073f8:	f04f 030c 	mov.w	r3, #12
 80073fc:	f04f 0400 	mov.w	r4, #0
 8007400:	e01c      	b.n	800743c <UART_SetConfig+0xecc>
 8007402:	f04f 030a 	mov.w	r3, #10
 8007406:	f04f 0400 	mov.w	r4, #0
 800740a:	e017      	b.n	800743c <UART_SetConfig+0xecc>
 800740c:	f04f 0308 	mov.w	r3, #8
 8007410:	f04f 0400 	mov.w	r4, #0
 8007414:	e012      	b.n	800743c <UART_SetConfig+0xecc>
 8007416:	f04f 0306 	mov.w	r3, #6
 800741a:	f04f 0400 	mov.w	r4, #0
 800741e:	e00d      	b.n	800743c <UART_SetConfig+0xecc>
 8007420:	f04f 0304 	mov.w	r3, #4
 8007424:	f04f 0400 	mov.w	r4, #0
 8007428:	e008      	b.n	800743c <UART_SetConfig+0xecc>
 800742a:	f04f 0302 	mov.w	r3, #2
 800742e:	f04f 0400 	mov.w	r4, #0
 8007432:	e003      	b.n	800743c <UART_SetConfig+0xecc>
 8007434:	f04f 0301 	mov.w	r3, #1
 8007438:	f04f 0400 	mov.w	r4, #0
 800743c:	461a      	mov	r2, r3
 800743e:	4623      	mov	r3, r4
 8007440:	f7f8 ffa6 	bl	8000390 <__aeabi_uldivmod>
 8007444:	4603      	mov	r3, r0
 8007446:	460c      	mov	r4, r1
 8007448:	4619      	mov	r1, r3
 800744a:	4622      	mov	r2, r4
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	f04f 0400 	mov.w	r4, #0
 8007454:	0214      	lsls	r4, r2, #8
 8007456:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800745a:	020b      	lsls	r3, r1, #8
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6852      	ldr	r2, [r2, #4]
 8007460:	0852      	lsrs	r2, r2, #1
 8007462:	4611      	mov	r1, r2
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	eb13 0b01 	adds.w	fp, r3, r1
 800746c:	eb44 0c02 	adc.w	ip, r4, r2
 8007470:	4658      	mov	r0, fp
 8007472:	4661      	mov	r1, ip
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f04f 0400 	mov.w	r4, #0
 800747c:	461a      	mov	r2, r3
 800747e:	4623      	mov	r3, r4
 8007480:	f7f8 ff86 	bl	8000390 <__aeabi_uldivmod>
 8007484:	4603      	mov	r3, r0
 8007486:	460c      	mov	r4, r1
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800748a:	e247      	b.n	800791c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800748c:	4b96      	ldr	r3, [pc, #600]	; (80076e8 <UART_SetConfig+0x1178>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a3 	beq.w	80075e0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800749a:	4b93      	ldr	r3, [pc, #588]	; (80076e8 <UART_SetConfig+0x1178>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	4a91      	ldr	r2, [pc, #580]	; (80076ec <UART_SetConfig+0x117c>)
 80074a6:	fa22 f303 	lsr.w	r3, r2, r3
 80074aa:	4618      	mov	r0, r3
 80074ac:	f04f 0100 	mov.w	r1, #0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d067      	beq.n	8007588 <UART_SetConfig+0x1018>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d05e      	beq.n	800757e <UART_SetConfig+0x100e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d055      	beq.n	8007574 <UART_SetConfig+0x1004>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d04c      	beq.n	800756a <UART_SetConfig+0xffa>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d043      	beq.n	8007560 <UART_SetConfig+0xff0>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b05      	cmp	r3, #5
 80074de:	d03a      	beq.n	8007556 <UART_SetConfig+0xfe6>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b06      	cmp	r3, #6
 80074e6:	d031      	beq.n	800754c <UART_SetConfig+0xfdc>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b07      	cmp	r3, #7
 80074ee:	d028      	beq.n	8007542 <UART_SetConfig+0xfd2>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d01f      	beq.n	8007538 <UART_SetConfig+0xfc8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b09      	cmp	r3, #9
 80074fe:	d016      	beq.n	800752e <UART_SetConfig+0xfbe>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b0a      	cmp	r3, #10
 8007506:	d00d      	beq.n	8007524 <UART_SetConfig+0xfb4>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	2b0b      	cmp	r3, #11
 800750e:	d104      	bne.n	800751a <UART_SetConfig+0xfaa>
 8007510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007514:	f04f 0400 	mov.w	r4, #0
 8007518:	e03a      	b.n	8007590 <UART_SetConfig+0x1020>
 800751a:	f04f 0301 	mov.w	r3, #1
 800751e:	f04f 0400 	mov.w	r4, #0
 8007522:	e035      	b.n	8007590 <UART_SetConfig+0x1020>
 8007524:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007528:	f04f 0400 	mov.w	r4, #0
 800752c:	e030      	b.n	8007590 <UART_SetConfig+0x1020>
 800752e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007532:	f04f 0400 	mov.w	r4, #0
 8007536:	e02b      	b.n	8007590 <UART_SetConfig+0x1020>
 8007538:	f04f 0320 	mov.w	r3, #32
 800753c:	f04f 0400 	mov.w	r4, #0
 8007540:	e026      	b.n	8007590 <UART_SetConfig+0x1020>
 8007542:	f04f 0310 	mov.w	r3, #16
 8007546:	f04f 0400 	mov.w	r4, #0
 800754a:	e021      	b.n	8007590 <UART_SetConfig+0x1020>
 800754c:	f04f 030c 	mov.w	r3, #12
 8007550:	f04f 0400 	mov.w	r4, #0
 8007554:	e01c      	b.n	8007590 <UART_SetConfig+0x1020>
 8007556:	f04f 030a 	mov.w	r3, #10
 800755a:	f04f 0400 	mov.w	r4, #0
 800755e:	e017      	b.n	8007590 <UART_SetConfig+0x1020>
 8007560:	f04f 0308 	mov.w	r3, #8
 8007564:	f04f 0400 	mov.w	r4, #0
 8007568:	e012      	b.n	8007590 <UART_SetConfig+0x1020>
 800756a:	f04f 0306 	mov.w	r3, #6
 800756e:	f04f 0400 	mov.w	r4, #0
 8007572:	e00d      	b.n	8007590 <UART_SetConfig+0x1020>
 8007574:	f04f 0304 	mov.w	r3, #4
 8007578:	f04f 0400 	mov.w	r4, #0
 800757c:	e008      	b.n	8007590 <UART_SetConfig+0x1020>
 800757e:	f04f 0302 	mov.w	r3, #2
 8007582:	f04f 0400 	mov.w	r4, #0
 8007586:	e003      	b.n	8007590 <UART_SetConfig+0x1020>
 8007588:	f04f 0301 	mov.w	r3, #1
 800758c:	f04f 0400 	mov.w	r4, #0
 8007590:	461a      	mov	r2, r3
 8007592:	4623      	mov	r3, r4
 8007594:	f7f8 fefc 	bl	8000390 <__aeabi_uldivmod>
 8007598:	4603      	mov	r3, r0
 800759a:	460c      	mov	r4, r1
 800759c:	4619      	mov	r1, r3
 800759e:	4622      	mov	r2, r4
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	f04f 0400 	mov.w	r4, #0
 80075a8:	0214      	lsls	r4, r2, #8
 80075aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075ae:	020b      	lsls	r3, r1, #8
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6852      	ldr	r2, [r2, #4]
 80075b4:	0852      	lsrs	r2, r2, #1
 80075b6:	4611      	mov	r1, r2
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	eb13 0b01 	adds.w	fp, r3, r1
 80075c0:	eb44 0c02 	adc.w	ip, r4, r2
 80075c4:	4658      	mov	r0, fp
 80075c6:	4661      	mov	r1, ip
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f04f 0400 	mov.w	r4, #0
 80075d0:	461a      	mov	r2, r3
 80075d2:	4623      	mov	r3, r4
 80075d4:	f7f8 fedc 	bl	8000390 <__aeabi_uldivmod>
 80075d8:	4603      	mov	r3, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80075de:	e19d      	b.n	800791c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d05b      	beq.n	80076a0 <UART_SetConfig+0x1130>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d053      	beq.n	8007698 <UART_SetConfig+0x1128>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d04b      	beq.n	8007690 <UART_SetConfig+0x1120>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d043      	beq.n	8007688 <UART_SetConfig+0x1118>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b04      	cmp	r3, #4
 8007606:	d03b      	beq.n	8007680 <UART_SetConfig+0x1110>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b05      	cmp	r3, #5
 800760e:	d033      	beq.n	8007678 <UART_SetConfig+0x1108>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b06      	cmp	r3, #6
 8007616:	d02b      	beq.n	8007670 <UART_SetConfig+0x1100>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b07      	cmp	r3, #7
 800761e:	d023      	beq.n	8007668 <UART_SetConfig+0x10f8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b08      	cmp	r3, #8
 8007626:	d01b      	beq.n	8007660 <UART_SetConfig+0x10f0>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b09      	cmp	r3, #9
 800762e:	d013      	beq.n	8007658 <UART_SetConfig+0x10e8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	2b0a      	cmp	r3, #10
 8007636:	d00b      	beq.n	8007650 <UART_SetConfig+0x10e0>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2b0b      	cmp	r3, #11
 800763e:	d103      	bne.n	8007648 <UART_SetConfig+0x10d8>
 8007640:	4b2a      	ldr	r3, [pc, #168]	; (80076ec <UART_SetConfig+0x117c>)
 8007642:	f04f 0400 	mov.w	r4, #0
 8007646:	e02e      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007648:	4b29      	ldr	r3, [pc, #164]	; (80076f0 <UART_SetConfig+0x1180>)
 800764a:	f04f 0403 	mov.w	r4, #3
 800764e:	e02a      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007650:	4b28      	ldr	r3, [pc, #160]	; (80076f4 <UART_SetConfig+0x1184>)
 8007652:	f04f 0400 	mov.w	r4, #0
 8007656:	e026      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007658:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <UART_SetConfig+0x1188>)
 800765a:	f04f 0400 	mov.w	r4, #0
 800765e:	e022      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007660:	4b26      	ldr	r3, [pc, #152]	; (80076fc <UART_SetConfig+0x118c>)
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	e01e      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007668:	4b25      	ldr	r3, [pc, #148]	; (8007700 <UART_SetConfig+0x1190>)
 800766a:	f04f 0400 	mov.w	r4, #0
 800766e:	e01a      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007670:	a419      	add	r4, pc, #100	; (adr r4, 80076d8 <UART_SetConfig+0x1168>)
 8007672:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007676:	e016      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007678:	4b22      	ldr	r3, [pc, #136]	; (8007704 <UART_SetConfig+0x1194>)
 800767a:	f04f 0400 	mov.w	r4, #0
 800767e:	e012      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007680:	4b21      	ldr	r3, [pc, #132]	; (8007708 <UART_SetConfig+0x1198>)
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	e00e      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007688:	a415      	add	r4, pc, #84	; (adr r4, 80076e0 <UART_SetConfig+0x1170>)
 800768a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800768e:	e00a      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007690:	4b1e      	ldr	r3, [pc, #120]	; (800770c <UART_SetConfig+0x119c>)
 8007692:	f04f 0400 	mov.w	r4, #0
 8007696:	e006      	b.n	80076a6 <UART_SetConfig+0x1136>
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <UART_SetConfig+0x11a0>)
 800769a:	f04f 0401 	mov.w	r4, #1
 800769e:	e002      	b.n	80076a6 <UART_SetConfig+0x1136>
 80076a0:	4b13      	ldr	r3, [pc, #76]	; (80076f0 <UART_SetConfig+0x1180>)
 80076a2:	f04f 0403 	mov.w	r4, #3
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6852      	ldr	r2, [r2, #4]
 80076aa:	0852      	lsrs	r2, r2, #1
 80076ac:	4611      	mov	r1, r2
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	eb13 0b01 	adds.w	fp, r3, r1
 80076b6:	eb44 0c02 	adc.w	ip, r4, r2
 80076ba:	4658      	mov	r0, fp
 80076bc:	4661      	mov	r1, ip
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	461a      	mov	r2, r3
 80076c8:	4623      	mov	r3, r4
 80076ca:	f7f8 fe61 	bl	8000390 <__aeabi_uldivmod>
 80076ce:	4603      	mov	r3, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076d4:	e122      	b.n	800791c <UART_SetConfig+0x13ac>
 80076d6:	bf00      	nop
 80076d8:	51615500 	.word	0x51615500
 80076dc:	00000000 	.word	0x00000000
 80076e0:	a2c2aa00 	.word	0xa2c2aa00
 80076e4:	00000000 	.word	0x00000000
 80076e8:	58024400 	.word	0x58024400
 80076ec:	03d09000 	.word	0x03d09000
 80076f0:	d0900000 	.word	0xd0900000
 80076f4:	07a12000 	.word	0x07a12000
 80076f8:	0f424000 	.word	0x0f424000
 80076fc:	1e848000 	.word	0x1e848000
 8007700:	3d090000 	.word	0x3d090000
 8007704:	61a80000 	.word	0x61a80000
 8007708:	7a120000 	.word	0x7a120000
 800770c:	f4240000 	.word	0xf4240000
 8007710:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b00      	cmp	r3, #0
 800771a:	d05b      	beq.n	80077d4 <UART_SetConfig+0x1264>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b01      	cmp	r3, #1
 8007722:	d053      	beq.n	80077cc <UART_SetConfig+0x125c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b02      	cmp	r3, #2
 800772a:	d04b      	beq.n	80077c4 <UART_SetConfig+0x1254>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b03      	cmp	r3, #3
 8007732:	d043      	beq.n	80077bc <UART_SetConfig+0x124c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b04      	cmp	r3, #4
 800773a:	d03b      	beq.n	80077b4 <UART_SetConfig+0x1244>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b05      	cmp	r3, #5
 8007742:	d033      	beq.n	80077ac <UART_SetConfig+0x123c>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b06      	cmp	r3, #6
 800774a:	d02b      	beq.n	80077a4 <UART_SetConfig+0x1234>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b07      	cmp	r3, #7
 8007752:	d023      	beq.n	800779c <UART_SetConfig+0x122c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b08      	cmp	r3, #8
 800775a:	d01b      	beq.n	8007794 <UART_SetConfig+0x1224>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b09      	cmp	r3, #9
 8007762:	d013      	beq.n	800778c <UART_SetConfig+0x121c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	2b0a      	cmp	r3, #10
 800776a:	d00b      	beq.n	8007784 <UART_SetConfig+0x1214>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	2b0b      	cmp	r3, #11
 8007772:	d103      	bne.n	800777c <UART_SetConfig+0x120c>
 8007774:	4bc0      	ldr	r3, [pc, #768]	; (8007a78 <UART_SetConfig+0x1508>)
 8007776:	f04f 0400 	mov.w	r4, #0
 800777a:	e02e      	b.n	80077da <UART_SetConfig+0x126a>
 800777c:	4bbf      	ldr	r3, [pc, #764]	; (8007a7c <UART_SetConfig+0x150c>)
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	e02a      	b.n	80077da <UART_SetConfig+0x126a>
 8007784:	4bbe      	ldr	r3, [pc, #760]	; (8007a80 <UART_SetConfig+0x1510>)
 8007786:	f04f 0400 	mov.w	r4, #0
 800778a:	e026      	b.n	80077da <UART_SetConfig+0x126a>
 800778c:	4bbd      	ldr	r3, [pc, #756]	; (8007a84 <UART_SetConfig+0x1514>)
 800778e:	f04f 0400 	mov.w	r4, #0
 8007792:	e022      	b.n	80077da <UART_SetConfig+0x126a>
 8007794:	4bbc      	ldr	r3, [pc, #752]	; (8007a88 <UART_SetConfig+0x1518>)
 8007796:	f04f 0400 	mov.w	r4, #0
 800779a:	e01e      	b.n	80077da <UART_SetConfig+0x126a>
 800779c:	4bbb      	ldr	r3, [pc, #748]	; (8007a8c <UART_SetConfig+0x151c>)
 800779e:	f04f 0400 	mov.w	r4, #0
 80077a2:	e01a      	b.n	80077da <UART_SetConfig+0x126a>
 80077a4:	a4b0      	add	r4, pc, #704	; (adr r4, 8007a68 <UART_SetConfig+0x14f8>)
 80077a6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077aa:	e016      	b.n	80077da <UART_SetConfig+0x126a>
 80077ac:	4bb8      	ldr	r3, [pc, #736]	; (8007a90 <UART_SetConfig+0x1520>)
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	e012      	b.n	80077da <UART_SetConfig+0x126a>
 80077b4:	4bb7      	ldr	r3, [pc, #732]	; (8007a94 <UART_SetConfig+0x1524>)
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e00e      	b.n	80077da <UART_SetConfig+0x126a>
 80077bc:	a4ac      	add	r4, pc, #688	; (adr r4, 8007a70 <UART_SetConfig+0x1500>)
 80077be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077c2:	e00a      	b.n	80077da <UART_SetConfig+0x126a>
 80077c4:	4bb4      	ldr	r3, [pc, #720]	; (8007a98 <UART_SetConfig+0x1528>)
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	e006      	b.n	80077da <UART_SetConfig+0x126a>
 80077cc:	4bb3      	ldr	r3, [pc, #716]	; (8007a9c <UART_SetConfig+0x152c>)
 80077ce:	f04f 0400 	mov.w	r4, #0
 80077d2:	e002      	b.n	80077da <UART_SetConfig+0x126a>
 80077d4:	4ba9      	ldr	r3, [pc, #676]	; (8007a7c <UART_SetConfig+0x150c>)
 80077d6:	f04f 0400 	mov.w	r4, #0
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6852      	ldr	r2, [r2, #4]
 80077de:	0852      	lsrs	r2, r2, #1
 80077e0:	4611      	mov	r1, r2
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	eb13 0b01 	adds.w	fp, r3, r1
 80077ea:	eb44 0c02 	adc.w	ip, r4, r2
 80077ee:	4658      	mov	r0, fp
 80077f0:	4661      	mov	r1, ip
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f04f 0400 	mov.w	r4, #0
 80077fa:	461a      	mov	r2, r3
 80077fc:	4623      	mov	r3, r4
 80077fe:	f7f8 fdc7 	bl	8000390 <__aeabi_uldivmod>
 8007802:	4603      	mov	r3, r0
 8007804:	460c      	mov	r4, r1
 8007806:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007808:	e088      	b.n	800791c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	d064      	beq.n	80078dc <UART_SetConfig+0x136c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b01      	cmp	r3, #1
 8007818:	d05b      	beq.n	80078d2 <UART_SetConfig+0x1362>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b02      	cmp	r3, #2
 8007820:	d052      	beq.n	80078c8 <UART_SetConfig+0x1358>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b03      	cmp	r3, #3
 8007828:	d04a      	beq.n	80078c0 <UART_SetConfig+0x1350>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b04      	cmp	r3, #4
 8007830:	d041      	beq.n	80078b6 <UART_SetConfig+0x1346>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b05      	cmp	r3, #5
 8007838:	d039      	beq.n	80078ae <UART_SetConfig+0x133e>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b06      	cmp	r3, #6
 8007840:	d031      	beq.n	80078a6 <UART_SetConfig+0x1336>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b07      	cmp	r3, #7
 8007848:	d028      	beq.n	800789c <UART_SetConfig+0x132c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b08      	cmp	r3, #8
 8007850:	d01f      	beq.n	8007892 <UART_SetConfig+0x1322>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b09      	cmp	r3, #9
 8007858:	d016      	beq.n	8007888 <UART_SetConfig+0x1318>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b0a      	cmp	r3, #10
 8007860:	d00d      	beq.n	800787e <UART_SetConfig+0x130e>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	2b0b      	cmp	r3, #11
 8007868:	d104      	bne.n	8007874 <UART_SetConfig+0x1304>
 800786a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800786e:	f04f 0400 	mov.w	r4, #0
 8007872:	e037      	b.n	80078e4 <UART_SetConfig+0x1374>
 8007874:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007878:	f04f 0400 	mov.w	r4, #0
 800787c:	e032      	b.n	80078e4 <UART_SetConfig+0x1374>
 800787e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007882:	f04f 0400 	mov.w	r4, #0
 8007886:	e02d      	b.n	80078e4 <UART_SetConfig+0x1374>
 8007888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800788c:	f04f 0400 	mov.w	r4, #0
 8007890:	e028      	b.n	80078e4 <UART_SetConfig+0x1374>
 8007892:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007896:	f04f 0400 	mov.w	r4, #0
 800789a:	e023      	b.n	80078e4 <UART_SetConfig+0x1374>
 800789c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	e01e      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078a6:	4b7e      	ldr	r3, [pc, #504]	; (8007aa0 <UART_SetConfig+0x1530>)
 80078a8:	f04f 0400 	mov.w	r4, #0
 80078ac:	e01a      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078ae:	4b7d      	ldr	r3, [pc, #500]	; (8007aa4 <UART_SetConfig+0x1534>)
 80078b0:	f04f 0400 	mov.w	r4, #0
 80078b4:	e016      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078ba:	f04f 0400 	mov.w	r4, #0
 80078be:	e011      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078c0:	4b79      	ldr	r3, [pc, #484]	; (8007aa8 <UART_SetConfig+0x1538>)
 80078c2:	f04f 0400 	mov.w	r4, #0
 80078c6:	e00d      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078cc:	f04f 0400 	mov.w	r4, #0
 80078d0:	e008      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80078d6:	f04f 0400 	mov.w	r4, #0
 80078da:	e003      	b.n	80078e4 <UART_SetConfig+0x1374>
 80078dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078e0:	f04f 0400 	mov.w	r4, #0
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6852      	ldr	r2, [r2, #4]
 80078e8:	0852      	lsrs	r2, r2, #1
 80078ea:	4611      	mov	r1, r2
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	eb13 0b01 	adds.w	fp, r3, r1
 80078f4:	eb44 0c02 	adc.w	ip, r4, r2
 80078f8:	4658      	mov	r0, fp
 80078fa:	4661      	mov	r1, ip
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	461a      	mov	r2, r3
 8007906:	4623      	mov	r3, r4
 8007908:	f7f8 fd42 	bl	8000390 <__aeabi_uldivmod>
 800790c:	4603      	mov	r3, r0
 800790e:	460c      	mov	r4, r1
 8007910:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007912:	e003      	b.n	800791c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800791a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800791c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007922:	d309      	bcc.n	8007938 <UART_SetConfig+0x13c8>
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792a:	d205      	bcs.n	8007938 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007932:	60da      	str	r2, [r3, #12]
 8007934:	f000 bf85 	b.w	8008842 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800793e:	f000 bf80 	b.w	8008842 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800794a:	f040 83da 	bne.w	8008102 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800794e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007952:	2b40      	cmp	r3, #64	; 0x40
 8007954:	f200 83b3 	bhi.w	80080be <UART_SetConfig+0x1b4e>
 8007958:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <UART_SetConfig+0x13f0>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007aad 	.word	0x08007aad
 8007964:	08007b65 	.word	0x08007b65
 8007968:	080080bf 	.word	0x080080bf
 800796c:	080080bf 	.word	0x080080bf
 8007970:	08007c1d 	.word	0x08007c1d
 8007974:	080080bf 	.word	0x080080bf
 8007978:	080080bf 	.word	0x080080bf
 800797c:	080080bf 	.word	0x080080bf
 8007980:	08007cd9 	.word	0x08007cd9
 8007984:	080080bf 	.word	0x080080bf
 8007988:	080080bf 	.word	0x080080bf
 800798c:	080080bf 	.word	0x080080bf
 8007990:	080080bf 	.word	0x080080bf
 8007994:	080080bf 	.word	0x080080bf
 8007998:	080080bf 	.word	0x080080bf
 800799c:	080080bf 	.word	0x080080bf
 80079a0:	08007d95 	.word	0x08007d95
 80079a4:	080080bf 	.word	0x080080bf
 80079a8:	080080bf 	.word	0x080080bf
 80079ac:	080080bf 	.word	0x080080bf
 80079b0:	080080bf 	.word	0x080080bf
 80079b4:	080080bf 	.word	0x080080bf
 80079b8:	080080bf 	.word	0x080080bf
 80079bc:	080080bf 	.word	0x080080bf
 80079c0:	080080bf 	.word	0x080080bf
 80079c4:	080080bf 	.word	0x080080bf
 80079c8:	080080bf 	.word	0x080080bf
 80079cc:	080080bf 	.word	0x080080bf
 80079d0:	080080bf 	.word	0x080080bf
 80079d4:	080080bf 	.word	0x080080bf
 80079d8:	080080bf 	.word	0x080080bf
 80079dc:	080080bf 	.word	0x080080bf
 80079e0:	08007f07 	.word	0x08007f07
 80079e4:	080080bf 	.word	0x080080bf
 80079e8:	080080bf 	.word	0x080080bf
 80079ec:	080080bf 	.word	0x080080bf
 80079f0:	080080bf 	.word	0x080080bf
 80079f4:	080080bf 	.word	0x080080bf
 80079f8:	080080bf 	.word	0x080080bf
 80079fc:	080080bf 	.word	0x080080bf
 8007a00:	080080bf 	.word	0x080080bf
 8007a04:	080080bf 	.word	0x080080bf
 8007a08:	080080bf 	.word	0x080080bf
 8007a0c:	080080bf 	.word	0x080080bf
 8007a10:	080080bf 	.word	0x080080bf
 8007a14:	080080bf 	.word	0x080080bf
 8007a18:	080080bf 	.word	0x080080bf
 8007a1c:	080080bf 	.word	0x080080bf
 8007a20:	080080bf 	.word	0x080080bf
 8007a24:	080080bf 	.word	0x080080bf
 8007a28:	080080bf 	.word	0x080080bf
 8007a2c:	080080bf 	.word	0x080080bf
 8007a30:	080080bf 	.word	0x080080bf
 8007a34:	080080bf 	.word	0x080080bf
 8007a38:	080080bf 	.word	0x080080bf
 8007a3c:	080080bf 	.word	0x080080bf
 8007a40:	080080bf 	.word	0x080080bf
 8007a44:	080080bf 	.word	0x080080bf
 8007a48:	080080bf 	.word	0x080080bf
 8007a4c:	080080bf 	.word	0x080080bf
 8007a50:	080080bf 	.word	0x080080bf
 8007a54:	080080bf 	.word	0x080080bf
 8007a58:	080080bf 	.word	0x080080bf
 8007a5c:	080080bf 	.word	0x080080bf
 8007a60:	08007ffd 	.word	0x08007ffd
 8007a64:	f3af 8000 	nop.w
 8007a68:	05161500 	.word	0x05161500
 8007a6c:	00000000 	.word	0x00000000
 8007a70:	0a2c2a00 	.word	0x0a2c2a00
 8007a74:	00000000 	.word	0x00000000
 8007a78:	003d0900 	.word	0x003d0900
 8007a7c:	3d090000 	.word	0x3d090000
 8007a80:	007a1200 	.word	0x007a1200
 8007a84:	00f42400 	.word	0x00f42400
 8007a88:	01e84800 	.word	0x01e84800
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	061a8000 	.word	0x061a8000
 8007a94:	07a12000 	.word	0x07a12000
 8007a98:	0f424000 	.word	0x0f424000
 8007a9c:	1e848000 	.word	0x1e848000
 8007aa0:	000aaa00 	.word	0x000aaa00
 8007aa4:	000ccc00 	.word	0x000ccc00
 8007aa8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aac:	f7fd f95e 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8007ab0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d044      	beq.n	8007b44 <UART_SetConfig+0x15d4>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d03e      	beq.n	8007b40 <UART_SetConfig+0x15d0>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d038      	beq.n	8007b3c <UART_SetConfig+0x15cc>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d032      	beq.n	8007b38 <UART_SetConfig+0x15c8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d02c      	beq.n	8007b34 <UART_SetConfig+0x15c4>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d026      	beq.n	8007b30 <UART_SetConfig+0x15c0>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b06      	cmp	r3, #6
 8007ae8:	d020      	beq.n	8007b2c <UART_SetConfig+0x15bc>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b07      	cmp	r3, #7
 8007af0:	d01a      	beq.n	8007b28 <UART_SetConfig+0x15b8>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b08      	cmp	r3, #8
 8007af8:	d014      	beq.n	8007b24 <UART_SetConfig+0x15b4>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b09      	cmp	r3, #9
 8007b00:	d00e      	beq.n	8007b20 <UART_SetConfig+0x15b0>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b0a      	cmp	r3, #10
 8007b08:	d008      	beq.n	8007b1c <UART_SetConfig+0x15ac>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b0b      	cmp	r3, #11
 8007b10:	d102      	bne.n	8007b18 <UART_SetConfig+0x15a8>
 8007b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b16:	e016      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e014      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	e012      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b20:	2340      	movs	r3, #64	; 0x40
 8007b22:	e010      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b24:	2320      	movs	r3, #32
 8007b26:	e00e      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	e00c      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	e00a      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b30:	230a      	movs	r3, #10
 8007b32:	e008      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b34:	2308      	movs	r3, #8
 8007b36:	e006      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b38:	2306      	movs	r3, #6
 8007b3a:	e004      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b3c:	2304      	movs	r3, #4
 8007b3e:	e002      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e000      	b.n	8007b46 <UART_SetConfig+0x15d6>
 8007b44:	2301      	movs	r3, #1
 8007b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4c:	005a      	lsls	r2, r3, #1
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	085b      	lsrs	r3, r3, #1
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b62:	e2b0      	b.n	80080c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b64:	f7fd f918 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8007b68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d044      	beq.n	8007bfc <UART_SetConfig+0x168c>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d03e      	beq.n	8007bf8 <UART_SetConfig+0x1688>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d038      	beq.n	8007bf4 <UART_SetConfig+0x1684>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d032      	beq.n	8007bf0 <UART_SetConfig+0x1680>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d02c      	beq.n	8007bec <UART_SetConfig+0x167c>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	d026      	beq.n	8007be8 <UART_SetConfig+0x1678>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b06      	cmp	r3, #6
 8007ba0:	d020      	beq.n	8007be4 <UART_SetConfig+0x1674>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b07      	cmp	r3, #7
 8007ba8:	d01a      	beq.n	8007be0 <UART_SetConfig+0x1670>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b08      	cmp	r3, #8
 8007bb0:	d014      	beq.n	8007bdc <UART_SetConfig+0x166c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	d00e      	beq.n	8007bd8 <UART_SetConfig+0x1668>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b0a      	cmp	r3, #10
 8007bc0:	d008      	beq.n	8007bd4 <UART_SetConfig+0x1664>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b0b      	cmp	r3, #11
 8007bc8:	d102      	bne.n	8007bd0 <UART_SetConfig+0x1660>
 8007bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bce:	e016      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e014      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bd4:	2380      	movs	r3, #128	; 0x80
 8007bd6:	e012      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	e010      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bdc:	2320      	movs	r3, #32
 8007bde:	e00e      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007be0:	2310      	movs	r3, #16
 8007be2:	e00c      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007be4:	230c      	movs	r3, #12
 8007be6:	e00a      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007be8:	230a      	movs	r3, #10
 8007bea:	e008      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bec:	2308      	movs	r3, #8
 8007bee:	e006      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bf0:	2306      	movs	r3, #6
 8007bf2:	e004      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bf4:	2304      	movs	r3, #4
 8007bf6:	e002      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e000      	b.n	8007bfe <UART_SetConfig+0x168e>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	005a      	lsls	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c1a:	e254      	b.n	80080c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c1c:	f107 0318 	add.w	r3, r7, #24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7fd ffc3 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d044      	beq.n	8007cba <UART_SetConfig+0x174a>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d03e      	beq.n	8007cb6 <UART_SetConfig+0x1746>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d038      	beq.n	8007cb2 <UART_SetConfig+0x1742>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d032      	beq.n	8007cae <UART_SetConfig+0x173e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b04      	cmp	r3, #4
 8007c4e:	d02c      	beq.n	8007caa <UART_SetConfig+0x173a>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b05      	cmp	r3, #5
 8007c56:	d026      	beq.n	8007ca6 <UART_SetConfig+0x1736>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b06      	cmp	r3, #6
 8007c5e:	d020      	beq.n	8007ca2 <UART_SetConfig+0x1732>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b07      	cmp	r3, #7
 8007c66:	d01a      	beq.n	8007c9e <UART_SetConfig+0x172e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d014      	beq.n	8007c9a <UART_SetConfig+0x172a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d00e      	beq.n	8007c96 <UART_SetConfig+0x1726>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b0a      	cmp	r3, #10
 8007c7e:	d008      	beq.n	8007c92 <UART_SetConfig+0x1722>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b0b      	cmp	r3, #11
 8007c86:	d102      	bne.n	8007c8e <UART_SetConfig+0x171e>
 8007c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c8c:	e016      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e014      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007c92:	2380      	movs	r3, #128	; 0x80
 8007c94:	e012      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007c96:	2340      	movs	r3, #64	; 0x40
 8007c98:	e010      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007c9a:	2320      	movs	r3, #32
 8007c9c:	e00e      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007c9e:	2310      	movs	r3, #16
 8007ca0:	e00c      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007ca2:	230c      	movs	r3, #12
 8007ca4:	e00a      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007ca6:	230a      	movs	r3, #10
 8007ca8:	e008      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007caa:	2308      	movs	r3, #8
 8007cac:	e006      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007cae:	2306      	movs	r3, #6
 8007cb0:	e004      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	e002      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007cb6:	2302      	movs	r3, #2
 8007cb8:	e000      	b.n	8007cbc <UART_SetConfig+0x174c>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc0:	005a      	lsls	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	441a      	add	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cd6:	e1f6      	b.n	80080c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cd8:	f107 030c 	add.w	r3, r7, #12
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe f8b1 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d044      	beq.n	8007d76 <UART_SetConfig+0x1806>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d03e      	beq.n	8007d72 <UART_SetConfig+0x1802>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d038      	beq.n	8007d6e <UART_SetConfig+0x17fe>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d032      	beq.n	8007d6a <UART_SetConfig+0x17fa>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d02c      	beq.n	8007d66 <UART_SetConfig+0x17f6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	d026      	beq.n	8007d62 <UART_SetConfig+0x17f2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b06      	cmp	r3, #6
 8007d1a:	d020      	beq.n	8007d5e <UART_SetConfig+0x17ee>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b07      	cmp	r3, #7
 8007d22:	d01a      	beq.n	8007d5a <UART_SetConfig+0x17ea>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d014      	beq.n	8007d56 <UART_SetConfig+0x17e6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b09      	cmp	r3, #9
 8007d32:	d00e      	beq.n	8007d52 <UART_SetConfig+0x17e2>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	2b0a      	cmp	r3, #10
 8007d3a:	d008      	beq.n	8007d4e <UART_SetConfig+0x17de>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	2b0b      	cmp	r3, #11
 8007d42:	d102      	bne.n	8007d4a <UART_SetConfig+0x17da>
 8007d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d48:	e016      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e014      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d4e:	2380      	movs	r3, #128	; 0x80
 8007d50:	e012      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d52:	2340      	movs	r3, #64	; 0x40
 8007d54:	e010      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d56:	2320      	movs	r3, #32
 8007d58:	e00e      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d5a:	2310      	movs	r3, #16
 8007d5c:	e00c      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d5e:	230c      	movs	r3, #12
 8007d60:	e00a      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d62:	230a      	movs	r3, #10
 8007d64:	e008      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d66:	2308      	movs	r3, #8
 8007d68:	e006      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d6a:	2306      	movs	r3, #6
 8007d6c:	e004      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d6e:	2304      	movs	r3, #4
 8007d70:	e002      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d72:	2302      	movs	r3, #2
 8007d74:	e000      	b.n	8007d78 <UART_SetConfig+0x1808>
 8007d76:	2301      	movs	r3, #1
 8007d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7c:	005a      	lsls	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	441a      	add	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d92:	e198      	b.n	80080c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d94:	4b87      	ldr	r3, [pc, #540]	; (8007fb4 <UART_SetConfig+0x1a44>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d05e      	beq.n	8007e5e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da0:	4b84      	ldr	r3, [pc, #528]	; (8007fb4 <UART_SetConfig+0x1a44>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	08db      	lsrs	r3, r3, #3
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	4a83      	ldr	r2, [pc, #524]	; (8007fb8 <UART_SetConfig+0x1a48>)
 8007dac:	40da      	lsrs	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d044      	beq.n	8007e40 <UART_SetConfig+0x18d0>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d03e      	beq.n	8007e3c <UART_SetConfig+0x18cc>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d038      	beq.n	8007e38 <UART_SetConfig+0x18c8>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	2b03      	cmp	r3, #3
 8007dcc:	d032      	beq.n	8007e34 <UART_SetConfig+0x18c4>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d02c      	beq.n	8007e30 <UART_SetConfig+0x18c0>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	d026      	beq.n	8007e2c <UART_SetConfig+0x18bc>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b06      	cmp	r3, #6
 8007de4:	d020      	beq.n	8007e28 <UART_SetConfig+0x18b8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b07      	cmp	r3, #7
 8007dec:	d01a      	beq.n	8007e24 <UART_SetConfig+0x18b4>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d014      	beq.n	8007e20 <UART_SetConfig+0x18b0>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b09      	cmp	r3, #9
 8007dfc:	d00e      	beq.n	8007e1c <UART_SetConfig+0x18ac>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b0a      	cmp	r3, #10
 8007e04:	d008      	beq.n	8007e18 <UART_SetConfig+0x18a8>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b0b      	cmp	r3, #11
 8007e0c:	d102      	bne.n	8007e14 <UART_SetConfig+0x18a4>
 8007e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e12:	e016      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e014      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e18:	2380      	movs	r3, #128	; 0x80
 8007e1a:	e012      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e1c:	2340      	movs	r3, #64	; 0x40
 8007e1e:	e010      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e20:	2320      	movs	r3, #32
 8007e22:	e00e      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e24:	2310      	movs	r3, #16
 8007e26:	e00c      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e28:	230c      	movs	r3, #12
 8007e2a:	e00a      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e2c:	230a      	movs	r3, #10
 8007e2e:	e008      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e30:	2308      	movs	r3, #8
 8007e32:	e006      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e34:	2306      	movs	r3, #6
 8007e36:	e004      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e38:	2304      	movs	r3, #4
 8007e3a:	e002      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e000      	b.n	8007e42 <UART_SetConfig+0x18d2>
 8007e40:	2301      	movs	r3, #1
 8007e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e46:	005a      	lsls	r2, r3, #1
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	441a      	add	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007e5c:	e133      	b.n	80080c6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d043      	beq.n	8007eee <UART_SetConfig+0x197e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d03d      	beq.n	8007eea <UART_SetConfig+0x197a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d037      	beq.n	8007ee6 <UART_SetConfig+0x1976>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d031      	beq.n	8007ee2 <UART_SetConfig+0x1972>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d02b      	beq.n	8007ede <UART_SetConfig+0x196e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d025      	beq.n	8007eda <UART_SetConfig+0x196a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b06      	cmp	r3, #6
 8007e94:	d01f      	beq.n	8007ed6 <UART_SetConfig+0x1966>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	d019      	beq.n	8007ed2 <UART_SetConfig+0x1962>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d013      	beq.n	8007ece <UART_SetConfig+0x195e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d00d      	beq.n	8007eca <UART_SetConfig+0x195a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b0a      	cmp	r3, #10
 8007eb4:	d007      	beq.n	8007ec6 <UART_SetConfig+0x1956>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b0b      	cmp	r3, #11
 8007ebc:	d101      	bne.n	8007ec2 <UART_SetConfig+0x1952>
 8007ebe:	4b3f      	ldr	r3, [pc, #252]	; (8007fbc <UART_SetConfig+0x1a4c>)
 8007ec0:	e016      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ec2:	4b3f      	ldr	r3, [pc, #252]	; (8007fc0 <UART_SetConfig+0x1a50>)
 8007ec4:	e014      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ec6:	4b3f      	ldr	r3, [pc, #252]	; (8007fc4 <UART_SetConfig+0x1a54>)
 8007ec8:	e012      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007eca:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <UART_SetConfig+0x1a58>)
 8007ecc:	e010      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ece:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <UART_SetConfig+0x1a5c>)
 8007ed0:	e00e      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ed2:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <UART_SetConfig+0x1a60>)
 8007ed4:	e00c      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ed6:	4b3f      	ldr	r3, [pc, #252]	; (8007fd4 <UART_SetConfig+0x1a64>)
 8007ed8:	e00a      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007eda:	4b3f      	ldr	r3, [pc, #252]	; (8007fd8 <UART_SetConfig+0x1a68>)
 8007edc:	e008      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ede:	4b3f      	ldr	r3, [pc, #252]	; (8007fdc <UART_SetConfig+0x1a6c>)
 8007ee0:	e006      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ee2:	4b3f      	ldr	r3, [pc, #252]	; (8007fe0 <UART_SetConfig+0x1a70>)
 8007ee4:	e004      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007ee6:	4b3f      	ldr	r3, [pc, #252]	; (8007fe4 <UART_SetConfig+0x1a74>)
 8007ee8:	e002      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007eea:	4b33      	ldr	r3, [pc, #204]	; (8007fb8 <UART_SetConfig+0x1a48>)
 8007eec:	e000      	b.n	8007ef0 <UART_SetConfig+0x1980>
 8007eee:	4b34      	ldr	r3, [pc, #208]	; (8007fc0 <UART_SetConfig+0x1a50>)
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	6852      	ldr	r2, [r2, #4]
 8007ef4:	0852      	lsrs	r2, r2, #1
 8007ef6:	441a      	add	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f04:	e0df      	b.n	80080c6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d045      	beq.n	8007f9a <UART_SetConfig+0x1a2a>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d03f      	beq.n	8007f96 <UART_SetConfig+0x1a26>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d039      	beq.n	8007f92 <UART_SetConfig+0x1a22>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d033      	beq.n	8007f8e <UART_SetConfig+0x1a1e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d02d      	beq.n	8007f8a <UART_SetConfig+0x1a1a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d027      	beq.n	8007f86 <UART_SetConfig+0x1a16>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d021      	beq.n	8007f82 <UART_SetConfig+0x1a12>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	d01b      	beq.n	8007f7e <UART_SetConfig+0x1a0e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d015      	beq.n	8007f7a <UART_SetConfig+0x1a0a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d00f      	beq.n	8007f76 <UART_SetConfig+0x1a06>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b0a      	cmp	r3, #10
 8007f5c:	d008      	beq.n	8007f70 <UART_SetConfig+0x1a00>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	d102      	bne.n	8007f6c <UART_SetConfig+0x19fc>
 8007f66:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007f6a:	e017      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f6c:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <UART_SetConfig+0x1a60>)
 8007f6e:	e015      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007f74:	e012      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f76:	4b1c      	ldr	r3, [pc, #112]	; (8007fe8 <UART_SetConfig+0x1a78>)
 8007f78:	e010      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f7a:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <UART_SetConfig+0x1a7c>)
 8007f7c:	e00e      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	; (8007fbc <UART_SetConfig+0x1a4c>)
 8007f80:	e00c      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f82:	4b1b      	ldr	r3, [pc, #108]	; (8007ff0 <UART_SetConfig+0x1a80>)
 8007f84:	e00a      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f86:	4b1b      	ldr	r3, [pc, #108]	; (8007ff4 <UART_SetConfig+0x1a84>)
 8007f88:	e008      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f8a:	4b0e      	ldr	r3, [pc, #56]	; (8007fc4 <UART_SetConfig+0x1a54>)
 8007f8c:	e006      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <UART_SetConfig+0x1a88>)
 8007f90:	e004      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f92:	4b0d      	ldr	r3, [pc, #52]	; (8007fc8 <UART_SetConfig+0x1a58>)
 8007f94:	e002      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f96:	4b0d      	ldr	r3, [pc, #52]	; (8007fcc <UART_SetConfig+0x1a5c>)
 8007f98:	e000      	b.n	8007f9c <UART_SetConfig+0x1a2c>
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	; (8007fd0 <UART_SetConfig+0x1a60>)
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6852      	ldr	r2, [r2, #4]
 8007fa0:	0852      	lsrs	r2, r2, #1
 8007fa2:	441a      	add	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fb0:	e089      	b.n	80080c6 <UART_SetConfig+0x1b56>
 8007fb2:	bf00      	nop
 8007fb4:	58024400 	.word	0x58024400
 8007fb8:	03d09000 	.word	0x03d09000
 8007fbc:	0007a120 	.word	0x0007a120
 8007fc0:	07a12000 	.word	0x07a12000
 8007fc4:	000f4240 	.word	0x000f4240
 8007fc8:	001e8480 	.word	0x001e8480
 8007fcc:	003d0900 	.word	0x003d0900
 8007fd0:	007a1200 	.word	0x007a1200
 8007fd4:	00a2c2aa 	.word	0x00a2c2aa
 8007fd8:	00c35000 	.word	0x00c35000
 8007fdc:	00f42400 	.word	0x00f42400
 8007fe0:	01458554 	.word	0x01458554
 8007fe4:	01e84800 	.word	0x01e84800
 8007fe8:	0001e848 	.word	0x0001e848
 8007fec:	0003d090 	.word	0x0003d090
 8007ff0:	000a2c2a 	.word	0x000a2c2a
 8007ff4:	000c3500 	.word	0x000c3500
 8007ff8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d04f      	beq.n	80080a4 <UART_SetConfig+0x1b34>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b01      	cmp	r3, #1
 800800a:	d048      	beq.n	800809e <UART_SetConfig+0x1b2e>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b02      	cmp	r3, #2
 8008012:	d041      	beq.n	8008098 <UART_SetConfig+0x1b28>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b03      	cmp	r3, #3
 800801a:	d03a      	beq.n	8008092 <UART_SetConfig+0x1b22>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b04      	cmp	r3, #4
 8008022:	d033      	beq.n	800808c <UART_SetConfig+0x1b1c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	2b05      	cmp	r3, #5
 800802a:	d02c      	beq.n	8008086 <UART_SetConfig+0x1b16>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b06      	cmp	r3, #6
 8008032:	d025      	beq.n	8008080 <UART_SetConfig+0x1b10>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b07      	cmp	r3, #7
 800803a:	d01e      	beq.n	800807a <UART_SetConfig+0x1b0a>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b08      	cmp	r3, #8
 8008042:	d017      	beq.n	8008074 <UART_SetConfig+0x1b04>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b09      	cmp	r3, #9
 800804a:	d010      	beq.n	800806e <UART_SetConfig+0x1afe>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b0a      	cmp	r3, #10
 8008052:	d009      	beq.n	8008068 <UART_SetConfig+0x1af8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b0b      	cmp	r3, #11
 800805a:	d102      	bne.n	8008062 <UART_SetConfig+0x1af2>
 800805c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008060:	e022      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008066:	e01f      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800806c:	e01c      	b.n	80080a8 <UART_SetConfig+0x1b38>
 800806e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008072:	e019      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008078:	e016      	b.n	80080a8 <UART_SetConfig+0x1b38>
 800807a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800807e:	e013      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008080:	f241 5354 	movw	r3, #5460	; 0x1554
 8008084:	e010      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008086:	f641 1398 	movw	r3, #6552	; 0x1998
 800808a:	e00d      	b.n	80080a8 <UART_SetConfig+0x1b38>
 800808c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008090:	e00a      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008092:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008096:	e007      	b.n	80080a8 <UART_SetConfig+0x1b38>
 8008098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800809c:	e004      	b.n	80080a8 <UART_SetConfig+0x1b38>
 800809e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a2:	e001      	b.n	80080a8 <UART_SetConfig+0x1b38>
 80080a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6852      	ldr	r2, [r2, #4]
 80080ac:	0852      	lsrs	r2, r2, #1
 80080ae:	441a      	add	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080bc:	e003      	b.n	80080c6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80080c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c8:	2b0f      	cmp	r3, #15
 80080ca:	d916      	bls.n	80080fa <UART_SetConfig+0x1b8a>
 80080cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d2:	d212      	bcs.n	80080fa <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f023 030f 	bic.w	r3, r3, #15
 80080dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080ec:	4313      	orrs	r3, r2
 80080ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080f6:	60da      	str	r2, [r3, #12]
 80080f8:	e3a3      	b.n	8008842 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008100:	e39f      	b.n	8008842 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008102:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	f200 8388 	bhi.w	800881c <UART_SetConfig+0x22ac>
 800810c:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <UART_SetConfig+0x1ba4>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008219 	.word	0x08008219
 8008118:	080082cf 	.word	0x080082cf
 800811c:	0800881d 	.word	0x0800881d
 8008120:	0800881d 	.word	0x0800881d
 8008124:	08008385 	.word	0x08008385
 8008128:	0800881d 	.word	0x0800881d
 800812c:	0800881d 	.word	0x0800881d
 8008130:	0800881d 	.word	0x0800881d
 8008134:	0800843f 	.word	0x0800843f
 8008138:	0800881d 	.word	0x0800881d
 800813c:	0800881d 	.word	0x0800881d
 8008140:	0800881d 	.word	0x0800881d
 8008144:	0800881d 	.word	0x0800881d
 8008148:	0800881d 	.word	0x0800881d
 800814c:	0800881d 	.word	0x0800881d
 8008150:	0800881d 	.word	0x0800881d
 8008154:	080084f9 	.word	0x080084f9
 8008158:	0800881d 	.word	0x0800881d
 800815c:	0800881d 	.word	0x0800881d
 8008160:	0800881d 	.word	0x0800881d
 8008164:	0800881d 	.word	0x0800881d
 8008168:	0800881d 	.word	0x0800881d
 800816c:	0800881d 	.word	0x0800881d
 8008170:	0800881d 	.word	0x0800881d
 8008174:	0800881d 	.word	0x0800881d
 8008178:	0800881d 	.word	0x0800881d
 800817c:	0800881d 	.word	0x0800881d
 8008180:	0800881d 	.word	0x0800881d
 8008184:	0800881d 	.word	0x0800881d
 8008188:	0800881d 	.word	0x0800881d
 800818c:	0800881d 	.word	0x0800881d
 8008190:	0800881d 	.word	0x0800881d
 8008194:	08008669 	.word	0x08008669
 8008198:	0800881d 	.word	0x0800881d
 800819c:	0800881d 	.word	0x0800881d
 80081a0:	0800881d 	.word	0x0800881d
 80081a4:	0800881d 	.word	0x0800881d
 80081a8:	0800881d 	.word	0x0800881d
 80081ac:	0800881d 	.word	0x0800881d
 80081b0:	0800881d 	.word	0x0800881d
 80081b4:	0800881d 	.word	0x0800881d
 80081b8:	0800881d 	.word	0x0800881d
 80081bc:	0800881d 	.word	0x0800881d
 80081c0:	0800881d 	.word	0x0800881d
 80081c4:	0800881d 	.word	0x0800881d
 80081c8:	0800881d 	.word	0x0800881d
 80081cc:	0800881d 	.word	0x0800881d
 80081d0:	0800881d 	.word	0x0800881d
 80081d4:	0800881d 	.word	0x0800881d
 80081d8:	0800881d 	.word	0x0800881d
 80081dc:	0800881d 	.word	0x0800881d
 80081e0:	0800881d 	.word	0x0800881d
 80081e4:	0800881d 	.word	0x0800881d
 80081e8:	0800881d 	.word	0x0800881d
 80081ec:	0800881d 	.word	0x0800881d
 80081f0:	0800881d 	.word	0x0800881d
 80081f4:	0800881d 	.word	0x0800881d
 80081f8:	0800881d 	.word	0x0800881d
 80081fc:	0800881d 	.word	0x0800881d
 8008200:	0800881d 	.word	0x0800881d
 8008204:	0800881d 	.word	0x0800881d
 8008208:	0800881d 	.word	0x0800881d
 800820c:	0800881d 	.word	0x0800881d
 8008210:	0800881d 	.word	0x0800881d
 8008214:	0800875d 	.word	0x0800875d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008218:	f7fc fda8 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 800821c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b00      	cmp	r3, #0
 8008224:	d044      	beq.n	80082b0 <UART_SetConfig+0x1d40>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b01      	cmp	r3, #1
 800822c:	d03e      	beq.n	80082ac <UART_SetConfig+0x1d3c>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b02      	cmp	r3, #2
 8008234:	d038      	beq.n	80082a8 <UART_SetConfig+0x1d38>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b03      	cmp	r3, #3
 800823c:	d032      	beq.n	80082a4 <UART_SetConfig+0x1d34>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b04      	cmp	r3, #4
 8008244:	d02c      	beq.n	80082a0 <UART_SetConfig+0x1d30>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	2b05      	cmp	r3, #5
 800824c:	d026      	beq.n	800829c <UART_SetConfig+0x1d2c>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b06      	cmp	r3, #6
 8008254:	d020      	beq.n	8008298 <UART_SetConfig+0x1d28>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b07      	cmp	r3, #7
 800825c:	d01a      	beq.n	8008294 <UART_SetConfig+0x1d24>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b08      	cmp	r3, #8
 8008264:	d014      	beq.n	8008290 <UART_SetConfig+0x1d20>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b09      	cmp	r3, #9
 800826c:	d00e      	beq.n	800828c <UART_SetConfig+0x1d1c>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b0a      	cmp	r3, #10
 8008274:	d008      	beq.n	8008288 <UART_SetConfig+0x1d18>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b0b      	cmp	r3, #11
 800827c:	d102      	bne.n	8008284 <UART_SetConfig+0x1d14>
 800827e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008282:	e016      	b.n	80082b2 <UART_SetConfig+0x1d42>
 8008284:	2301      	movs	r3, #1
 8008286:	e014      	b.n	80082b2 <UART_SetConfig+0x1d42>
 8008288:	2380      	movs	r3, #128	; 0x80
 800828a:	e012      	b.n	80082b2 <UART_SetConfig+0x1d42>
 800828c:	2340      	movs	r3, #64	; 0x40
 800828e:	e010      	b.n	80082b2 <UART_SetConfig+0x1d42>
 8008290:	2320      	movs	r3, #32
 8008292:	e00e      	b.n	80082b2 <UART_SetConfig+0x1d42>
 8008294:	2310      	movs	r3, #16
 8008296:	e00c      	b.n	80082b2 <UART_SetConfig+0x1d42>
 8008298:	230c      	movs	r3, #12
 800829a:	e00a      	b.n	80082b2 <UART_SetConfig+0x1d42>
 800829c:	230a      	movs	r3, #10
 800829e:	e008      	b.n	80082b2 <UART_SetConfig+0x1d42>
 80082a0:	2308      	movs	r3, #8
 80082a2:	e006      	b.n	80082b2 <UART_SetConfig+0x1d42>
 80082a4:	2306      	movs	r3, #6
 80082a6:	e004      	b.n	80082b2 <UART_SetConfig+0x1d42>
 80082a8:	2304      	movs	r3, #4
 80082aa:	e002      	b.n	80082b2 <UART_SetConfig+0x1d42>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e000      	b.n	80082b2 <UART_SetConfig+0x1d42>
 80082b0:	2301      	movs	r3, #1
 80082b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	085b      	lsrs	r3, r3, #1
 80082be:	441a      	add	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082cc:	e2aa      	b.n	8008824 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082ce:	f7fc fd63 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 80082d2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d044      	beq.n	8008366 <UART_SetConfig+0x1df6>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d03e      	beq.n	8008362 <UART_SetConfig+0x1df2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d038      	beq.n	800835e <UART_SetConfig+0x1dee>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d032      	beq.n	800835a <UART_SetConfig+0x1dea>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d02c      	beq.n	8008356 <UART_SetConfig+0x1de6>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b05      	cmp	r3, #5
 8008302:	d026      	beq.n	8008352 <UART_SetConfig+0x1de2>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b06      	cmp	r3, #6
 800830a:	d020      	beq.n	800834e <UART_SetConfig+0x1dde>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b07      	cmp	r3, #7
 8008312:	d01a      	beq.n	800834a <UART_SetConfig+0x1dda>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b08      	cmp	r3, #8
 800831a:	d014      	beq.n	8008346 <UART_SetConfig+0x1dd6>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b09      	cmp	r3, #9
 8008322:	d00e      	beq.n	8008342 <UART_SetConfig+0x1dd2>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b0a      	cmp	r3, #10
 800832a:	d008      	beq.n	800833e <UART_SetConfig+0x1dce>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b0b      	cmp	r3, #11
 8008332:	d102      	bne.n	800833a <UART_SetConfig+0x1dca>
 8008334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008338:	e016      	b.n	8008368 <UART_SetConfig+0x1df8>
 800833a:	2301      	movs	r3, #1
 800833c:	e014      	b.n	8008368 <UART_SetConfig+0x1df8>
 800833e:	2380      	movs	r3, #128	; 0x80
 8008340:	e012      	b.n	8008368 <UART_SetConfig+0x1df8>
 8008342:	2340      	movs	r3, #64	; 0x40
 8008344:	e010      	b.n	8008368 <UART_SetConfig+0x1df8>
 8008346:	2320      	movs	r3, #32
 8008348:	e00e      	b.n	8008368 <UART_SetConfig+0x1df8>
 800834a:	2310      	movs	r3, #16
 800834c:	e00c      	b.n	8008368 <UART_SetConfig+0x1df8>
 800834e:	230c      	movs	r3, #12
 8008350:	e00a      	b.n	8008368 <UART_SetConfig+0x1df8>
 8008352:	230a      	movs	r3, #10
 8008354:	e008      	b.n	8008368 <UART_SetConfig+0x1df8>
 8008356:	2308      	movs	r3, #8
 8008358:	e006      	b.n	8008368 <UART_SetConfig+0x1df8>
 800835a:	2306      	movs	r3, #6
 800835c:	e004      	b.n	8008368 <UART_SetConfig+0x1df8>
 800835e:	2304      	movs	r3, #4
 8008360:	e002      	b.n	8008368 <UART_SetConfig+0x1df8>
 8008362:	2302      	movs	r3, #2
 8008364:	e000      	b.n	8008368 <UART_SetConfig+0x1df8>
 8008366:	2301      	movs	r3, #1
 8008368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800836a:	fbb2 f2f3 	udiv	r2, r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	441a      	add	r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	fbb2 f3f3 	udiv	r3, r2, r3
 800837e:	b29b      	uxth	r3, r3
 8008380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008382:	e24f      	b.n	8008824 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008384:	f107 0318 	add.w	r3, r7, #24
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fc0f 	bl	8005bac <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800838e:	69fa      	ldr	r2, [r7, #28]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	d044      	beq.n	8008422 <UART_SetConfig+0x1eb2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b01      	cmp	r3, #1
 800839e:	d03e      	beq.n	800841e <UART_SetConfig+0x1eae>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d038      	beq.n	800841a <UART_SetConfig+0x1eaa>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d032      	beq.n	8008416 <UART_SetConfig+0x1ea6>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d02c      	beq.n	8008412 <UART_SetConfig+0x1ea2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b05      	cmp	r3, #5
 80083be:	d026      	beq.n	800840e <UART_SetConfig+0x1e9e>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b06      	cmp	r3, #6
 80083c6:	d020      	beq.n	800840a <UART_SetConfig+0x1e9a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b07      	cmp	r3, #7
 80083ce:	d01a      	beq.n	8008406 <UART_SetConfig+0x1e96>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d014      	beq.n	8008402 <UART_SetConfig+0x1e92>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b09      	cmp	r3, #9
 80083de:	d00e      	beq.n	80083fe <UART_SetConfig+0x1e8e>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b0a      	cmp	r3, #10
 80083e6:	d008      	beq.n	80083fa <UART_SetConfig+0x1e8a>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b0b      	cmp	r3, #11
 80083ee:	d102      	bne.n	80083f6 <UART_SetConfig+0x1e86>
 80083f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f4:	e016      	b.n	8008424 <UART_SetConfig+0x1eb4>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e014      	b.n	8008424 <UART_SetConfig+0x1eb4>
 80083fa:	2380      	movs	r3, #128	; 0x80
 80083fc:	e012      	b.n	8008424 <UART_SetConfig+0x1eb4>
 80083fe:	2340      	movs	r3, #64	; 0x40
 8008400:	e010      	b.n	8008424 <UART_SetConfig+0x1eb4>
 8008402:	2320      	movs	r3, #32
 8008404:	e00e      	b.n	8008424 <UART_SetConfig+0x1eb4>
 8008406:	2310      	movs	r3, #16
 8008408:	e00c      	b.n	8008424 <UART_SetConfig+0x1eb4>
 800840a:	230c      	movs	r3, #12
 800840c:	e00a      	b.n	8008424 <UART_SetConfig+0x1eb4>
 800840e:	230a      	movs	r3, #10
 8008410:	e008      	b.n	8008424 <UART_SetConfig+0x1eb4>
 8008412:	2308      	movs	r3, #8
 8008414:	e006      	b.n	8008424 <UART_SetConfig+0x1eb4>
 8008416:	2306      	movs	r3, #6
 8008418:	e004      	b.n	8008424 <UART_SetConfig+0x1eb4>
 800841a:	2304      	movs	r3, #4
 800841c:	e002      	b.n	8008424 <UART_SetConfig+0x1eb4>
 800841e:	2302      	movs	r3, #2
 8008420:	e000      	b.n	8008424 <UART_SetConfig+0x1eb4>
 8008422:	2301      	movs	r3, #1
 8008424:	fbb2 f2f3 	udiv	r2, r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	085b      	lsrs	r3, r3, #1
 800842e:	441a      	add	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	fbb2 f3f3 	udiv	r3, r2, r3
 8008438:	b29b      	uxth	r3, r3
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800843c:	e1f2      	b.n	8008824 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843e:	f107 030c 	add.w	r3, r7, #12
 8008442:	4618      	mov	r0, r3
 8008444:	f7fd fcfe 	bl	8005e44 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	d044      	beq.n	80084dc <UART_SetConfig+0x1f6c>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b01      	cmp	r3, #1
 8008458:	d03e      	beq.n	80084d8 <UART_SetConfig+0x1f68>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b02      	cmp	r3, #2
 8008460:	d038      	beq.n	80084d4 <UART_SetConfig+0x1f64>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b03      	cmp	r3, #3
 8008468:	d032      	beq.n	80084d0 <UART_SetConfig+0x1f60>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b04      	cmp	r3, #4
 8008470:	d02c      	beq.n	80084cc <UART_SetConfig+0x1f5c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b05      	cmp	r3, #5
 8008478:	d026      	beq.n	80084c8 <UART_SetConfig+0x1f58>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b06      	cmp	r3, #6
 8008480:	d020      	beq.n	80084c4 <UART_SetConfig+0x1f54>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b07      	cmp	r3, #7
 8008488:	d01a      	beq.n	80084c0 <UART_SetConfig+0x1f50>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b08      	cmp	r3, #8
 8008490:	d014      	beq.n	80084bc <UART_SetConfig+0x1f4c>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b09      	cmp	r3, #9
 8008498:	d00e      	beq.n	80084b8 <UART_SetConfig+0x1f48>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b0a      	cmp	r3, #10
 80084a0:	d008      	beq.n	80084b4 <UART_SetConfig+0x1f44>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b0b      	cmp	r3, #11
 80084a8:	d102      	bne.n	80084b0 <UART_SetConfig+0x1f40>
 80084aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084ae:	e016      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e014      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084b4:	2380      	movs	r3, #128	; 0x80
 80084b6:	e012      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084b8:	2340      	movs	r3, #64	; 0x40
 80084ba:	e010      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084bc:	2320      	movs	r3, #32
 80084be:	e00e      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084c0:	2310      	movs	r3, #16
 80084c2:	e00c      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084c4:	230c      	movs	r3, #12
 80084c6:	e00a      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084c8:	230a      	movs	r3, #10
 80084ca:	e008      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084cc:	2308      	movs	r3, #8
 80084ce:	e006      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084d0:	2306      	movs	r3, #6
 80084d2:	e004      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084d4:	2304      	movs	r3, #4
 80084d6:	e002      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084d8:	2302      	movs	r3, #2
 80084da:	e000      	b.n	80084de <UART_SetConfig+0x1f6e>
 80084dc:	2301      	movs	r3, #1
 80084de:	fbb2 f2f3 	udiv	r2, r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	441a      	add	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084f6:	e195      	b.n	8008824 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084f8:	4b87      	ldr	r3, [pc, #540]	; (8008718 <UART_SetConfig+0x21a8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d05d      	beq.n	80085c0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008504:	4b84      	ldr	r3, [pc, #528]	; (8008718 <UART_SetConfig+0x21a8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	4a83      	ldr	r2, [pc, #524]	; (800871c <UART_SetConfig+0x21ac>)
 8008510:	40da      	lsrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b00      	cmp	r3, #0
 8008518:	d044      	beq.n	80085a4 <UART_SetConfig+0x2034>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b01      	cmp	r3, #1
 8008520:	d03e      	beq.n	80085a0 <UART_SetConfig+0x2030>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b02      	cmp	r3, #2
 8008528:	d038      	beq.n	800859c <UART_SetConfig+0x202c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b03      	cmp	r3, #3
 8008530:	d032      	beq.n	8008598 <UART_SetConfig+0x2028>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b04      	cmp	r3, #4
 8008538:	d02c      	beq.n	8008594 <UART_SetConfig+0x2024>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b05      	cmp	r3, #5
 8008540:	d026      	beq.n	8008590 <UART_SetConfig+0x2020>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b06      	cmp	r3, #6
 8008548:	d020      	beq.n	800858c <UART_SetConfig+0x201c>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b07      	cmp	r3, #7
 8008550:	d01a      	beq.n	8008588 <UART_SetConfig+0x2018>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b08      	cmp	r3, #8
 8008558:	d014      	beq.n	8008584 <UART_SetConfig+0x2014>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b09      	cmp	r3, #9
 8008560:	d00e      	beq.n	8008580 <UART_SetConfig+0x2010>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	2b0a      	cmp	r3, #10
 8008568:	d008      	beq.n	800857c <UART_SetConfig+0x200c>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	2b0b      	cmp	r3, #11
 8008570:	d102      	bne.n	8008578 <UART_SetConfig+0x2008>
 8008572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008576:	e016      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008578:	2301      	movs	r3, #1
 800857a:	e014      	b.n	80085a6 <UART_SetConfig+0x2036>
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	e012      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008580:	2340      	movs	r3, #64	; 0x40
 8008582:	e010      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008584:	2320      	movs	r3, #32
 8008586:	e00e      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008588:	2310      	movs	r3, #16
 800858a:	e00c      	b.n	80085a6 <UART_SetConfig+0x2036>
 800858c:	230c      	movs	r3, #12
 800858e:	e00a      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008590:	230a      	movs	r3, #10
 8008592:	e008      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008594:	2308      	movs	r3, #8
 8008596:	e006      	b.n	80085a6 <UART_SetConfig+0x2036>
 8008598:	2306      	movs	r3, #6
 800859a:	e004      	b.n	80085a6 <UART_SetConfig+0x2036>
 800859c:	2304      	movs	r3, #4
 800859e:	e002      	b.n	80085a6 <UART_SetConfig+0x2036>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e000      	b.n	80085a6 <UART_SetConfig+0x2036>
 80085a4:	2301      	movs	r3, #1
 80085a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	085b      	lsrs	r3, r3, #1
 80085b0:	441a      	add	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80085be:	e131      	b.n	8008824 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d043      	beq.n	8008650 <UART_SetConfig+0x20e0>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d03d      	beq.n	800864c <UART_SetConfig+0x20dc>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d037      	beq.n	8008648 <UART_SetConfig+0x20d8>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d031      	beq.n	8008644 <UART_SetConfig+0x20d4>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	d02b      	beq.n	8008640 <UART_SetConfig+0x20d0>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d025      	beq.n	800863c <UART_SetConfig+0x20cc>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b06      	cmp	r3, #6
 80085f6:	d01f      	beq.n	8008638 <UART_SetConfig+0x20c8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b07      	cmp	r3, #7
 80085fe:	d019      	beq.n	8008634 <UART_SetConfig+0x20c4>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b08      	cmp	r3, #8
 8008606:	d013      	beq.n	8008630 <UART_SetConfig+0x20c0>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b09      	cmp	r3, #9
 800860e:	d00d      	beq.n	800862c <UART_SetConfig+0x20bc>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b0a      	cmp	r3, #10
 8008616:	d007      	beq.n	8008628 <UART_SetConfig+0x20b8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b0b      	cmp	r3, #11
 800861e:	d101      	bne.n	8008624 <UART_SetConfig+0x20b4>
 8008620:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <UART_SetConfig+0x21b0>)
 8008622:	e016      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008624:	4b3d      	ldr	r3, [pc, #244]	; (800871c <UART_SetConfig+0x21ac>)
 8008626:	e014      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <UART_SetConfig+0x21b4>)
 800862a:	e012      	b.n	8008652 <UART_SetConfig+0x20e2>
 800862c:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <UART_SetConfig+0x21b8>)
 800862e:	e010      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008630:	4b3e      	ldr	r3, [pc, #248]	; (800872c <UART_SetConfig+0x21bc>)
 8008632:	e00e      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008634:	4b3e      	ldr	r3, [pc, #248]	; (8008730 <UART_SetConfig+0x21c0>)
 8008636:	e00c      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008638:	4b3e      	ldr	r3, [pc, #248]	; (8008734 <UART_SetConfig+0x21c4>)
 800863a:	e00a      	b.n	8008652 <UART_SetConfig+0x20e2>
 800863c:	4b3e      	ldr	r3, [pc, #248]	; (8008738 <UART_SetConfig+0x21c8>)
 800863e:	e008      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008640:	4b3e      	ldr	r3, [pc, #248]	; (800873c <UART_SetConfig+0x21cc>)
 8008642:	e006      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008644:	4b3e      	ldr	r3, [pc, #248]	; (8008740 <UART_SetConfig+0x21d0>)
 8008646:	e004      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008648:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <UART_SetConfig+0x21d4>)
 800864a:	e002      	b.n	8008652 <UART_SetConfig+0x20e2>
 800864c:	4b3e      	ldr	r3, [pc, #248]	; (8008748 <UART_SetConfig+0x21d8>)
 800864e:	e000      	b.n	8008652 <UART_SetConfig+0x20e2>
 8008650:	4b32      	ldr	r3, [pc, #200]	; (800871c <UART_SetConfig+0x21ac>)
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	6852      	ldr	r2, [r2, #4]
 8008656:	0852      	lsrs	r2, r2, #1
 8008658:	441a      	add	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008662:	b29b      	uxth	r3, r3
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008666:	e0dd      	b.n	8008824 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b00      	cmp	r3, #0
 800866e:	d046      	beq.n	80086fe <UART_SetConfig+0x218e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b01      	cmp	r3, #1
 8008676:	d040      	beq.n	80086fa <UART_SetConfig+0x218a>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b02      	cmp	r3, #2
 800867e:	d03a      	beq.n	80086f6 <UART_SetConfig+0x2186>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b03      	cmp	r3, #3
 8008686:	d034      	beq.n	80086f2 <UART_SetConfig+0x2182>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b04      	cmp	r3, #4
 800868e:	d02e      	beq.n	80086ee <UART_SetConfig+0x217e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2b05      	cmp	r3, #5
 8008696:	d028      	beq.n	80086ea <UART_SetConfig+0x217a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b06      	cmp	r3, #6
 800869e:	d022      	beq.n	80086e6 <UART_SetConfig+0x2176>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b07      	cmp	r3, #7
 80086a6:	d01c      	beq.n	80086e2 <UART_SetConfig+0x2172>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d016      	beq.n	80086de <UART_SetConfig+0x216e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d00f      	beq.n	80086d8 <UART_SetConfig+0x2168>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b0a      	cmp	r3, #10
 80086be:	d008      	beq.n	80086d2 <UART_SetConfig+0x2162>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b0b      	cmp	r3, #11
 80086c6:	d102      	bne.n	80086ce <UART_SetConfig+0x215e>
 80086c8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80086cc:	e018      	b.n	8008700 <UART_SetConfig+0x2190>
 80086ce:	4b18      	ldr	r3, [pc, #96]	; (8008730 <UART_SetConfig+0x21c0>)
 80086d0:	e016      	b.n	8008700 <UART_SetConfig+0x2190>
 80086d2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80086d6:	e013      	b.n	8008700 <UART_SetConfig+0x2190>
 80086d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80086dc:	e010      	b.n	8008700 <UART_SetConfig+0x2190>
 80086de:	4b1b      	ldr	r3, [pc, #108]	; (800874c <UART_SetConfig+0x21dc>)
 80086e0:	e00e      	b.n	8008700 <UART_SetConfig+0x2190>
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <UART_SetConfig+0x21b0>)
 80086e4:	e00c      	b.n	8008700 <UART_SetConfig+0x2190>
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <UART_SetConfig+0x21e0>)
 80086e8:	e00a      	b.n	8008700 <UART_SetConfig+0x2190>
 80086ea:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <UART_SetConfig+0x21e4>)
 80086ec:	e008      	b.n	8008700 <UART_SetConfig+0x2190>
 80086ee:	4b0d      	ldr	r3, [pc, #52]	; (8008724 <UART_SetConfig+0x21b4>)
 80086f0:	e006      	b.n	8008700 <UART_SetConfig+0x2190>
 80086f2:	4b19      	ldr	r3, [pc, #100]	; (8008758 <UART_SetConfig+0x21e8>)
 80086f4:	e004      	b.n	8008700 <UART_SetConfig+0x2190>
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <UART_SetConfig+0x21b8>)
 80086f8:	e002      	b.n	8008700 <UART_SetConfig+0x2190>
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <UART_SetConfig+0x21bc>)
 80086fc:	e000      	b.n	8008700 <UART_SetConfig+0x2190>
 80086fe:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <UART_SetConfig+0x21c0>)
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6852      	ldr	r2, [r2, #4]
 8008704:	0852      	lsrs	r2, r2, #1
 8008706:	441a      	add	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008710:	b29b      	uxth	r3, r3
 8008712:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008714:	e086      	b.n	8008824 <UART_SetConfig+0x22b4>
 8008716:	bf00      	nop
 8008718:	58024400 	.word	0x58024400
 800871c:	03d09000 	.word	0x03d09000
 8008720:	0003d090 	.word	0x0003d090
 8008724:	0007a120 	.word	0x0007a120
 8008728:	000f4240 	.word	0x000f4240
 800872c:	001e8480 	.word	0x001e8480
 8008730:	003d0900 	.word	0x003d0900
 8008734:	00516155 	.word	0x00516155
 8008738:	0061a800 	.word	0x0061a800
 800873c:	007a1200 	.word	0x007a1200
 8008740:	00a2c2aa 	.word	0x00a2c2aa
 8008744:	00f42400 	.word	0x00f42400
 8008748:	01e84800 	.word	0x01e84800
 800874c:	0001e848 	.word	0x0001e848
 8008750:	00051615 	.word	0x00051615
 8008754:	00061a80 	.word	0x00061a80
 8008758:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	d04e      	beq.n	8008802 <UART_SetConfig+0x2292>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b01      	cmp	r3, #1
 800876a:	d047      	beq.n	80087fc <UART_SetConfig+0x228c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	2b02      	cmp	r3, #2
 8008772:	d040      	beq.n	80087f6 <UART_SetConfig+0x2286>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b03      	cmp	r3, #3
 800877a:	d039      	beq.n	80087f0 <UART_SetConfig+0x2280>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b04      	cmp	r3, #4
 8008782:	d032      	beq.n	80087ea <UART_SetConfig+0x227a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b05      	cmp	r3, #5
 800878a:	d02b      	beq.n	80087e4 <UART_SetConfig+0x2274>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b06      	cmp	r3, #6
 8008792:	d024      	beq.n	80087de <UART_SetConfig+0x226e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b07      	cmp	r3, #7
 800879a:	d01d      	beq.n	80087d8 <UART_SetConfig+0x2268>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d016      	beq.n	80087d2 <UART_SetConfig+0x2262>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2b09      	cmp	r3, #9
 80087aa:	d00f      	beq.n	80087cc <UART_SetConfig+0x225c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	2b0a      	cmp	r3, #10
 80087b2:	d008      	beq.n	80087c6 <UART_SetConfig+0x2256>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b0b      	cmp	r3, #11
 80087ba:	d101      	bne.n	80087c0 <UART_SetConfig+0x2250>
 80087bc:	2380      	movs	r3, #128	; 0x80
 80087be:	e022      	b.n	8008806 <UART_SetConfig+0x2296>
 80087c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087c4:	e01f      	b.n	8008806 <UART_SetConfig+0x2296>
 80087c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ca:	e01c      	b.n	8008806 <UART_SetConfig+0x2296>
 80087cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087d0:	e019      	b.n	8008806 <UART_SetConfig+0x2296>
 80087d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d6:	e016      	b.n	8008806 <UART_SetConfig+0x2296>
 80087d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087dc:	e013      	b.n	8008806 <UART_SetConfig+0x2296>
 80087de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80087e2:	e010      	b.n	8008806 <UART_SetConfig+0x2296>
 80087e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80087e8:	e00d      	b.n	8008806 <UART_SetConfig+0x2296>
 80087ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ee:	e00a      	b.n	8008806 <UART_SetConfig+0x2296>
 80087f0:	f241 5355 	movw	r3, #5461	; 0x1555
 80087f4:	e007      	b.n	8008806 <UART_SetConfig+0x2296>
 80087f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087fa:	e004      	b.n	8008806 <UART_SetConfig+0x2296>
 80087fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008800:	e001      	b.n	8008806 <UART_SetConfig+0x2296>
 8008802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	6852      	ldr	r2, [r2, #4]
 800880a:	0852      	lsrs	r2, r2, #1
 800880c:	441a      	add	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	fbb2 f3f3 	udiv	r3, r2, r3
 8008816:	b29b      	uxth	r3, r3
 8008818:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800881a:	e003      	b.n	8008824 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	2b0f      	cmp	r3, #15
 8008828:	d908      	bls.n	800883c <UART_SetConfig+0x22cc>
 800882a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008830:	d204      	bcs.n	800883c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008838:	60da      	str	r2, [r3, #12]
 800883a:	e002      	b.n	8008842 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800885e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008862:	4618      	mov	r0, r3
 8008864:	3740      	adds	r7, #64	; 0x40
 8008866:	46bd      	mov	sp, r7
 8008868:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800886c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	f003 0310 	and.w	r3, r3, #16
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01a      	beq.n	8008982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800896a:	d10a      	bne.n	8008982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	605a      	str	r2, [r3, #4]
  }
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80089c0:	f7fa f8fe 	bl	8002bc0 <HAL_GetTick>
 80089c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b08      	cmp	r3, #8
 80089d2:	d10e      	bne.n	80089f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f82c 	bl	8008a40 <UART_WaitOnFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e022      	b.n	8008a38 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	d10e      	bne.n	8008a1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f816 	bl	8008a40 <UART_WaitOnFlagUntilTimeout>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e00c      	b.n	8008a38 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2220      	movs	r2, #32
 8008a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a50:	e062      	b.n	8008b18 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a58:	d05e      	beq.n	8008b18 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5a:	f7fa f8b1 	bl	8002bc0 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d302      	bcc.n	8008a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d11d      	bne.n	8008aac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a7e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689a      	ldr	r2, [r3, #8]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e045      	b.n	8008b38 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d02e      	beq.n	8008b18 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac8:	d126      	bne.n	8008b18 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ad2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ae2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 0201 	bic.w	r2, r2, #1
 8008af2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e00f      	b.n	8008b38 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69da      	ldr	r2, [r3, #28]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	4013      	ands	r3, r2
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	bf0c      	ite	eq
 8008b28:	2301      	moveq	r3, #1
 8008b2a:	2300      	movne	r3, #0
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	461a      	mov	r2, r3
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d08d      	beq.n	8008a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e027      	b.n	8008ba6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2224      	movs	r2, #36	; 0x24
 8008b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0201 	bic.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e02d      	b.n	8008c26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2224      	movs	r2, #36	; 0x24
 8008bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0201 	bic.w	r2, r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 f850 	bl	8008cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2220      	movs	r2, #32
 8008c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e02d      	b.n	8008ca2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2224      	movs	r2, #36	; 0x24
 8008c52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0201 	bic.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f812 	bl	8008cac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008cb4:	4a2f      	ldr	r2, [pc, #188]	; (8008d74 <UARTEx_SetNbDataToProcess+0xc8>)
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cbe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008cc2:	4a2d      	ldr	r2, [pc, #180]	; (8008d78 <UARTEx_SetNbDataToProcess+0xcc>)
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008ccc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d108      	bne.n	8008cea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ce8:	e03d      	b.n	8008d66 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cea:	2308      	movs	r3, #8
 8008cec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cee:	2308      	movs	r3, #8
 8008cf0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	0e5b      	lsrs	r3, r3, #25
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 0307 	and.w	r3, r3, #7
 8008d00:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	0f5b      	lsrs	r3, r3, #29
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	f003 0307 	and.w	r3, r3, #7
 8008d10:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d12:	7fbb      	ldrb	r3, [r7, #30]
 8008d14:	7f3a      	ldrb	r2, [r7, #28]
 8008d16:	f107 0120 	add.w	r1, r7, #32
 8008d1a:	440a      	add	r2, r1
 8008d1c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d20:	fb02 f303 	mul.w	r3, r2, r3
 8008d24:	7f3a      	ldrb	r2, [r7, #28]
 8008d26:	f107 0120 	add.w	r1, r7, #32
 8008d2a:	440a      	add	r2, r1
 8008d2c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d3c:	7ffb      	ldrb	r3, [r7, #31]
 8008d3e:	7f7a      	ldrb	r2, [r7, #29]
 8008d40:	f107 0120 	add.w	r1, r7, #32
 8008d44:	440a      	add	r2, r1
 8008d46:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	7f7a      	ldrb	r2, [r7, #29]
 8008d50:	f107 0120 	add.w	r1, r7, #32
 8008d54:	440a      	add	r2, r1
 8008d56:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d66:	bf00      	nop
 8008d68:	3724      	adds	r7, #36	; 0x24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	0800e6c4 	.word	0x0800e6c4
 8008d78:	0800e6cc 	.word	0x0800e6cc

08008d7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	f107 001c 	add.w	r0, r7, #28
 8008d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d120      	bne.n	8008dd6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	4b25      	ldr	r3, [pc, #148]	; (8008e3c <USB_CoreInit+0xc0>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d105      	bne.n	8008dca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fa4c 	bl	8009268 <USB_CoreReset>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
 8008dd4:	e01a      	b.n	8008e0c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa40 	bl	8009268 <USB_CoreReset>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8008dfe:	e005      	b.n	8008e0c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d10b      	bne.n	8008e2a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f043 0206 	orr.w	r2, r3, #6
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f043 0220 	orr.w	r2, r3, #32
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e36:	b004      	add	sp, #16
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	ffbdffbf 	.word	0xffbdffbf

08008e40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f023 0201 	bic.w	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d106      	bne.n	8008e8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	60da      	str	r2, [r3, #12]
 8008e8c:	e00b      	b.n	8008ea6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e8e:	78fb      	ldrb	r3, [r7, #3]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60da      	str	r2, [r3, #12]
 8008ea0:	e001      	b.n	8008ea6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e003      	b.n	8008eae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008ea6:	2032      	movs	r0, #50	; 0x32
 8008ea8:	f7f9 fe96 	bl	8002bd8 <HAL_Delay>

  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb8:	b084      	sub	sp, #16
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b086      	sub	sp, #24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	e009      	b.n	8008eec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	3340      	adds	r3, #64	; 0x40
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	613b      	str	r3, [r7, #16]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	2b0e      	cmp	r3, #14
 8008ef0:	d9f2      	bls.n	8008ed8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11c      	bne.n	8008f32 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f06:	f043 0302 	orr.w	r3, r3, #2
 8008f0a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f10:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	e005      	b.n	8008f3e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f36:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f50:	4619      	mov	r1, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f58:	461a      	mov	r2, r3
 8008f5a:	680b      	ldr	r3, [r1, #0]
 8008f5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d10c      	bne.n	8008f7e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f949 	bl	8009204 <USB_SetDevSpeed>
 8008f72:	e008      	b.n	8008f86 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f74:	2101      	movs	r1, #1
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f944 	bl	8009204 <USB_SetDevSpeed>
 8008f7c:	e003      	b.n	8008f86 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f7e:	2103      	movs	r1, #3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f93f 	bl	8009204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f86:	2110      	movs	r1, #16
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f8f3 	bl	8009174 <USB_FlushTxFifo>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f911 	bl	80091c0 <USB_FlushRxFifo>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d001      	beq.n	8008fa8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	461a      	mov	r2, r3
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fba:	461a      	mov	r2, r3
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	e043      	b.n	800905a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	015a      	lsls	r2, r3, #5
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4413      	add	r3, r2
 8008fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fe8:	d118      	bne.n	800901c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	e013      	b.n	800902e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	461a      	mov	r2, r3
 8009014:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	e008      	b.n	800902e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	461a      	mov	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903a:	461a      	mov	r2, r3
 800903c:	2300      	movs	r3, #0
 800903e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4413      	add	r3, r2
 8009048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904c:	461a      	mov	r2, r3
 800904e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009052:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3301      	adds	r3, #1
 8009058:	613b      	str	r3, [r7, #16]
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	429a      	cmp	r2, r3
 8009060:	d3b7      	bcc.n	8008fd2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009062:	2300      	movs	r3, #0
 8009064:	613b      	str	r3, [r7, #16]
 8009066:	e043      	b.n	80090f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800907a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800907e:	d118      	bne.n	80090b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10a      	bne.n	800909c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	461a      	mov	r2, r3
 8009094:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e013      	b.n	80090c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a8:	461a      	mov	r2, r3
 80090aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e008      	b.n	80090c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	461a      	mov	r2, r3
 80090c0:	2300      	movs	r3, #0
 80090c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d0:	461a      	mov	r2, r3
 80090d2:	2300      	movs	r3, #0
 80090d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e2:	461a      	mov	r2, r3
 80090e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	3301      	adds	r3, #1
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d3b7      	bcc.n	8009068 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800910a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009118:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800911a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911c:	2b00      	cmp	r3, #0
 800911e:	d105      	bne.n	800912c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	f043 0210 	orr.w	r2, r3, #16
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699a      	ldr	r2, [r3, #24]
 8009130:	4b0e      	ldr	r3, [pc, #56]	; (800916c <USB_DevInit+0x2b4>)
 8009132:	4313      	orrs	r3, r2
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f043 0208 	orr.w	r2, r3, #8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800914a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914c:	2b01      	cmp	r3, #1
 800914e:	d105      	bne.n	800915c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	4b06      	ldr	r3, [pc, #24]	; (8009170 <USB_DevInit+0x2b8>)
 8009156:	4313      	orrs	r3, r2
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800915c:	7dfb      	ldrb	r3, [r7, #23]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009168:	b004      	add	sp, #16
 800916a:	4770      	bx	lr
 800916c:	803c3800 	.word	0x803c3800
 8009170:	40000004 	.word	0x40000004

08009174 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	019b      	lsls	r3, r3, #6
 8009186:	f043 0220 	orr.w	r2, r3, #32
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3301      	adds	r3, #1
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4a09      	ldr	r2, [pc, #36]	; (80091bc <USB_FlushTxFifo+0x48>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d901      	bls.n	80091a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e006      	b.n	80091ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f003 0320 	and.w	r3, r3, #32
 80091a8:	2b20      	cmp	r3, #32
 80091aa:	d0f0      	beq.n	800918e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	00030d40 	.word	0x00030d40

080091c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2210      	movs	r2, #16
 80091d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3301      	adds	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4a09      	ldr	r2, [pc, #36]	; (8009200 <USB_FlushRxFifo+0x40>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d901      	bls.n	80091e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e006      	b.n	80091f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b10      	cmp	r3, #16
 80091ee:	d0f0      	beq.n	80091d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	00030d40 	.word	0x00030d40

08009204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009224:	4313      	orrs	r3, r2
 8009226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009256:	2003      	movs	r0, #3
 8009258:	f7f9 fcbe 	bl	8002bd8 <HAL_Delay>

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009270:	2300      	movs	r3, #0
 8009272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4a13      	ldr	r2, [pc, #76]	; (80092cc <USB_CoreReset+0x64>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d901      	bls.n	8009286 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e01b      	b.n	80092be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	2b00      	cmp	r3, #0
 800928c:	daf2      	bge.n	8009274 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	f043 0201 	orr.w	r2, r3, #1
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3301      	adds	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a09      	ldr	r2, [pc, #36]	; (80092cc <USB_CoreReset+0x64>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d901      	bls.n	80092b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e006      	b.n	80092be <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d0f0      	beq.n	800929e <USB_CoreReset+0x36>

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	00030d40 	.word	0x00030d40

080092d0 <ai_platform_runtime_get_revision>:
 80092d0:	4a1c      	ldr	r2, [pc, #112]	; (8009344 <ai_platform_runtime_get_revision+0x74>)
 80092d2:	491d      	ldr	r1, [pc, #116]	; (8009348 <ai_platform_runtime_get_revision+0x78>)
 80092d4:	6813      	ldr	r3, [r2, #0]
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80092e0:	680b      	ldr	r3, [r1, #0]
 80092e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092e6:	189a      	adds	r2, r3, r2
 80092e8:	2a01      	cmp	r2, #1
 80092ea:	d90c      	bls.n	8009306 <ai_platform_runtime_get_revision+0x36>
 80092ec:	f240 4249 	movw	r2, #1097	; 0x449
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d008      	beq.n	8009306 <ai_platform_runtime_get_revision+0x36>
 80092f4:	4b15      	ldr	r3, [pc, #84]	; (800934c <ai_platform_runtime_get_revision+0x7c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80092fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009300:	d010      	beq.n	8009324 <ai_platform_runtime_get_revision+0x54>
 8009302:	4813      	ldr	r0, [pc, #76]	; (8009350 <ai_platform_runtime_get_revision+0x80>)
 8009304:	4770      	bx	lr
 8009306:	4b13      	ldr	r3, [pc, #76]	; (8009354 <ai_platform_runtime_get_revision+0x84>)
 8009308:	2201      	movs	r2, #1
 800930a:	4619      	mov	r1, r3
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	680b      	ldr	r3, [r1, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1fc      	bne.n	800930e <ai_platform_runtime_get_revision+0x3e>
 8009314:	4b10      	ldr	r3, [pc, #64]	; (8009358 <ai_platform_runtime_get_revision+0x88>)
 8009316:	4911      	ldr	r1, [pc, #68]	; (800935c <ai_platform_runtime_get_revision+0x8c>)
 8009318:	4a11      	ldr	r2, [pc, #68]	; (8009360 <ai_platform_runtime_get_revision+0x90>)
 800931a:	6019      	str	r1, [r3, #0]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4293      	cmp	r3, r2
 8009320:	d0ef      	beq.n	8009302 <ai_platform_runtime_get_revision+0x32>
 8009322:	e7fe      	b.n	8009322 <ai_platform_runtime_get_revision+0x52>
 8009324:	4b0f      	ldr	r3, [pc, #60]	; (8009364 <ai_platform_runtime_get_revision+0x94>)
 8009326:	2201      	movs	r2, #1
 8009328:	4619      	mov	r1, r3
 800932a:	601a      	str	r2, [r3, #0]
 800932c:	680b      	ldr	r3, [r1, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1fc      	bne.n	800932c <ai_platform_runtime_get_revision+0x5c>
 8009332:	4b0d      	ldr	r3, [pc, #52]	; (8009368 <ai_platform_runtime_get_revision+0x98>)
 8009334:	4909      	ldr	r1, [pc, #36]	; (800935c <ai_platform_runtime_get_revision+0x8c>)
 8009336:	4a0a      	ldr	r2, [pc, #40]	; (8009360 <ai_platform_runtime_get_revision+0x90>)
 8009338:	6019      	str	r1, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4293      	cmp	r3, r2
 800933e:	d0e0      	beq.n	8009302 <ai_platform_runtime_get_revision+0x32>
 8009340:	e7fe      	b.n	8009340 <ai_platform_runtime_get_revision+0x70>
 8009342:	bf00      	nop
 8009344:	e0002000 	.word	0xe0002000
 8009348:	e0042000 	.word	0xe0042000
 800934c:	5c001000 	.word	0x5c001000
 8009350:	0800e798 	.word	0x0800e798
 8009354:	40023008 	.word	0x40023008
 8009358:	40023000 	.word	0x40023000
 800935c:	f407a5c2 	.word	0xf407a5c2
 8009360:	b5e8b5cd 	.word	0xb5e8b5cd
 8009364:	58024c08 	.word	0x58024c08
 8009368:	58024c00 	.word	0x58024c00

0800936c <ai_platform_runtime_get_version>:
 800936c:	4a26      	ldr	r2, [pc, #152]	; (8009408 <ai_platform_runtime_get_version+0x9c>)
 800936e:	4927      	ldr	r1, [pc, #156]	; (800940c <ai_platform_runtime_get_version+0xa0>)
 8009370:	6813      	ldr	r3, [r2, #0]
 8009372:	f023 0301 	bic.w	r3, r3, #1
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800937c:	680b      	ldr	r3, [r1, #0]
 800937e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009382:	189a      	adds	r2, r3, r2
 8009384:	2a01      	cmp	r2, #1
 8009386:	d921      	bls.n	80093cc <ai_platform_runtime_get_version+0x60>
 8009388:	f240 4249 	movw	r2, #1097	; 0x449
 800938c:	4293      	cmp	r3, r2
 800938e:	d01d      	beq.n	80093cc <ai_platform_runtime_get_version+0x60>
 8009390:	4b1f      	ldr	r3, [pc, #124]	; (8009410 <ai_platform_runtime_get_version+0xa4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009398:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800939c:	d025      	beq.n	80093ea <ai_platform_runtime_get_version+0x7e>
 800939e:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <ai_platform_runtime_get_version+0xa8>)
 80093a0:	2000      	movs	r0, #0
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	b410      	push	{r4}
 80093a6:	b2dc      	uxtb	r4, r3
 80093a8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80093ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80093b0:	0e1b      	lsrs	r3, r3, #24
 80093b2:	f364 0007 	bfi	r0, r4, #0, #8
 80093b6:	b083      	sub	sp, #12
 80093b8:	f361 200f 	bfi	r0, r1, #8, #8
 80093bc:	f362 4017 	bfi	r0, r2, #16, #8
 80093c0:	f363 601f 	bfi	r0, r3, #24, #8
 80093c4:	b003      	add	sp, #12
 80093c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ca:	4770      	bx	lr
 80093cc:	4b12      	ldr	r3, [pc, #72]	; (8009418 <ai_platform_runtime_get_version+0xac>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	680b      	ldr	r3, [r1, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1fc      	bne.n	80093d4 <ai_platform_runtime_get_version+0x68>
 80093da:	4b10      	ldr	r3, [pc, #64]	; (800941c <ai_platform_runtime_get_version+0xb0>)
 80093dc:	4910      	ldr	r1, [pc, #64]	; (8009420 <ai_platform_runtime_get_version+0xb4>)
 80093de:	4a11      	ldr	r2, [pc, #68]	; (8009424 <ai_platform_runtime_get_version+0xb8>)
 80093e0:	6019      	str	r1, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d0da      	beq.n	800939e <ai_platform_runtime_get_version+0x32>
 80093e8:	e7fe      	b.n	80093e8 <ai_platform_runtime_get_version+0x7c>
 80093ea:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <ai_platform_runtime_get_version+0xbc>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	4619      	mov	r1, r3
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	680b      	ldr	r3, [r1, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1fc      	bne.n	80093f2 <ai_platform_runtime_get_version+0x86>
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <ai_platform_runtime_get_version+0xc0>)
 80093fa:	4909      	ldr	r1, [pc, #36]	; (8009420 <ai_platform_runtime_get_version+0xb4>)
 80093fc:	4a09      	ldr	r2, [pc, #36]	; (8009424 <ai_platform_runtime_get_version+0xb8>)
 80093fe:	6019      	str	r1, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4293      	cmp	r3, r2
 8009404:	d0cb      	beq.n	800939e <ai_platform_runtime_get_version+0x32>
 8009406:	e7fe      	b.n	8009406 <ai_platform_runtime_get_version+0x9a>
 8009408:	e0002000 	.word	0xe0002000
 800940c:	e0042000 	.word	0xe0042000
 8009410:	5c001000 	.word	0x5c001000
 8009414:	0800e79c 	.word	0x0800e79c
 8009418:	40023008 	.word	0x40023008
 800941c:	40023000 	.word	0x40023000
 8009420:	f407a5c2 	.word	0xf407a5c2
 8009424:	b5e8b5cd 	.word	0xb5e8b5cd
 8009428:	58024c08 	.word	0x58024c08
 800942c:	58024c00 	.word	0x58024c00

08009430 <ai_platform_api_get_version>:
 8009430:	4a26      	ldr	r2, [pc, #152]	; (80094cc <ai_platform_api_get_version+0x9c>)
 8009432:	4927      	ldr	r1, [pc, #156]	; (80094d0 <ai_platform_api_get_version+0xa0>)
 8009434:	6813      	ldr	r3, [r2, #0]
 8009436:	f023 0301 	bic.w	r3, r3, #1
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009440:	680b      	ldr	r3, [r1, #0]
 8009442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009446:	189a      	adds	r2, r3, r2
 8009448:	2a01      	cmp	r2, #1
 800944a:	d921      	bls.n	8009490 <ai_platform_api_get_version+0x60>
 800944c:	f240 4249 	movw	r2, #1097	; 0x449
 8009450:	4293      	cmp	r3, r2
 8009452:	d01d      	beq.n	8009490 <ai_platform_api_get_version+0x60>
 8009454:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <ai_platform_api_get_version+0xa4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800945c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009460:	d025      	beq.n	80094ae <ai_platform_api_get_version+0x7e>
 8009462:	4b1d      	ldr	r3, [pc, #116]	; (80094d8 <ai_platform_api_get_version+0xa8>)
 8009464:	2000      	movs	r0, #0
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b410      	push	{r4}
 800946a:	b2dc      	uxtb	r4, r3
 800946c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009470:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009474:	0e1b      	lsrs	r3, r3, #24
 8009476:	f364 0007 	bfi	r0, r4, #0, #8
 800947a:	b083      	sub	sp, #12
 800947c:	f361 200f 	bfi	r0, r1, #8, #8
 8009480:	f362 4017 	bfi	r0, r2, #16, #8
 8009484:	f363 601f 	bfi	r0, r3, #24, #8
 8009488:	b003      	add	sp, #12
 800948a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	4b12      	ldr	r3, [pc, #72]	; (80094dc <ai_platform_api_get_version+0xac>)
 8009492:	2201      	movs	r2, #1
 8009494:	4619      	mov	r1, r3
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	680b      	ldr	r3, [r1, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1fc      	bne.n	8009498 <ai_platform_api_get_version+0x68>
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <ai_platform_api_get_version+0xb0>)
 80094a0:	4910      	ldr	r1, [pc, #64]	; (80094e4 <ai_platform_api_get_version+0xb4>)
 80094a2:	4a11      	ldr	r2, [pc, #68]	; (80094e8 <ai_platform_api_get_version+0xb8>)
 80094a4:	6019      	str	r1, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d0da      	beq.n	8009462 <ai_platform_api_get_version+0x32>
 80094ac:	e7fe      	b.n	80094ac <ai_platform_api_get_version+0x7c>
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <ai_platform_api_get_version+0xbc>)
 80094b0:	2201      	movs	r2, #1
 80094b2:	4619      	mov	r1, r3
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	680b      	ldr	r3, [r1, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1fc      	bne.n	80094b6 <ai_platform_api_get_version+0x86>
 80094bc:	4b0c      	ldr	r3, [pc, #48]	; (80094f0 <ai_platform_api_get_version+0xc0>)
 80094be:	4909      	ldr	r1, [pc, #36]	; (80094e4 <ai_platform_api_get_version+0xb4>)
 80094c0:	4a09      	ldr	r2, [pc, #36]	; (80094e8 <ai_platform_api_get_version+0xb8>)
 80094c2:	6019      	str	r1, [r3, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d0cb      	beq.n	8009462 <ai_platform_api_get_version+0x32>
 80094ca:	e7fe      	b.n	80094ca <ai_platform_api_get_version+0x9a>
 80094cc:	e0002000 	.word	0xe0002000
 80094d0:	e0042000 	.word	0xe0042000
 80094d4:	5c001000 	.word	0x5c001000
 80094d8:	0800e7a0 	.word	0x0800e7a0
 80094dc:	40023008 	.word	0x40023008
 80094e0:	40023000 	.word	0x40023000
 80094e4:	f407a5c2 	.word	0xf407a5c2
 80094e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80094ec:	58024c08 	.word	0x58024c08
 80094f0:	58024c00 	.word	0x58024c00

080094f4 <ai_platform_interface_api_get_version>:
 80094f4:	4a26      	ldr	r2, [pc, #152]	; (8009590 <ai_platform_interface_api_get_version+0x9c>)
 80094f6:	4927      	ldr	r1, [pc, #156]	; (8009594 <ai_platform_interface_api_get_version+0xa0>)
 80094f8:	6813      	ldr	r3, [r2, #0]
 80094fa:	f023 0301 	bic.w	r3, r3, #1
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009504:	680b      	ldr	r3, [r1, #0]
 8009506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800950a:	189a      	adds	r2, r3, r2
 800950c:	2a01      	cmp	r2, #1
 800950e:	d921      	bls.n	8009554 <ai_platform_interface_api_get_version+0x60>
 8009510:	f240 4249 	movw	r2, #1097	; 0x449
 8009514:	4293      	cmp	r3, r2
 8009516:	d01d      	beq.n	8009554 <ai_platform_interface_api_get_version+0x60>
 8009518:	4b1f      	ldr	r3, [pc, #124]	; (8009598 <ai_platform_interface_api_get_version+0xa4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009520:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009524:	d025      	beq.n	8009572 <ai_platform_interface_api_get_version+0x7e>
 8009526:	4b1d      	ldr	r3, [pc, #116]	; (800959c <ai_platform_interface_api_get_version+0xa8>)
 8009528:	2000      	movs	r0, #0
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	b410      	push	{r4}
 800952e:	b2dc      	uxtb	r4, r3
 8009530:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8009534:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8009538:	0e1b      	lsrs	r3, r3, #24
 800953a:	f364 0007 	bfi	r0, r4, #0, #8
 800953e:	b083      	sub	sp, #12
 8009540:	f361 200f 	bfi	r0, r1, #8, #8
 8009544:	f362 4017 	bfi	r0, r2, #16, #8
 8009548:	f363 601f 	bfi	r0, r3, #24, #8
 800954c:	b003      	add	sp, #12
 800954e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	4b12      	ldr	r3, [pc, #72]	; (80095a0 <ai_platform_interface_api_get_version+0xac>)
 8009556:	2201      	movs	r2, #1
 8009558:	4619      	mov	r1, r3
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	680b      	ldr	r3, [r1, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1fc      	bne.n	800955c <ai_platform_interface_api_get_version+0x68>
 8009562:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <ai_platform_interface_api_get_version+0xb0>)
 8009564:	4910      	ldr	r1, [pc, #64]	; (80095a8 <ai_platform_interface_api_get_version+0xb4>)
 8009566:	4a11      	ldr	r2, [pc, #68]	; (80095ac <ai_platform_interface_api_get_version+0xb8>)
 8009568:	6019      	str	r1, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4293      	cmp	r3, r2
 800956e:	d0da      	beq.n	8009526 <ai_platform_interface_api_get_version+0x32>
 8009570:	e7fe      	b.n	8009570 <ai_platform_interface_api_get_version+0x7c>
 8009572:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <ai_platform_interface_api_get_version+0xbc>)
 8009574:	2201      	movs	r2, #1
 8009576:	4619      	mov	r1, r3
 8009578:	601a      	str	r2, [r3, #0]
 800957a:	680b      	ldr	r3, [r1, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d1fc      	bne.n	800957a <ai_platform_interface_api_get_version+0x86>
 8009580:	4b0c      	ldr	r3, [pc, #48]	; (80095b4 <ai_platform_interface_api_get_version+0xc0>)
 8009582:	4909      	ldr	r1, [pc, #36]	; (80095a8 <ai_platform_interface_api_get_version+0xb4>)
 8009584:	4a09      	ldr	r2, [pc, #36]	; (80095ac <ai_platform_interface_api_get_version+0xb8>)
 8009586:	6019      	str	r1, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4293      	cmp	r3, r2
 800958c:	d0cb      	beq.n	8009526 <ai_platform_interface_api_get_version+0x32>
 800958e:	e7fe      	b.n	800958e <ai_platform_interface_api_get_version+0x9a>
 8009590:	e0002000 	.word	0xe0002000
 8009594:	e0042000 	.word	0xe0042000
 8009598:	5c001000 	.word	0x5c001000
 800959c:	0800e7a4 	.word	0x0800e7a4
 80095a0:	40023008 	.word	0x40023008
 80095a4:	40023000 	.word	0x40023000
 80095a8:	f407a5c2 	.word	0xf407a5c2
 80095ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80095b0:	58024c08 	.word	0x58024c08
 80095b4:	58024c00 	.word	0x58024c00

080095b8 <ai_platform_context_acquire>:
 80095b8:	b120      	cbz	r0, 80095c4 <ai_platform_context_acquire+0xc>
 80095ba:	4b1e      	ldr	r3, [pc, #120]	; (8009634 <ai_platform_context_acquire+0x7c>)
 80095bc:	6802      	ldr	r2, [r0, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	bf18      	it	ne
 80095c2:	2000      	movne	r0, #0
 80095c4:	4a1c      	ldr	r2, [pc, #112]	; (8009638 <ai_platform_context_acquire+0x80>)
 80095c6:	491d      	ldr	r1, [pc, #116]	; (800963c <ai_platform_context_acquire+0x84>)
 80095c8:	6813      	ldr	r3, [r2, #0]
 80095ca:	f023 0301 	bic.w	r3, r3, #1
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80095d4:	680b      	ldr	r3, [r1, #0]
 80095d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095da:	189a      	adds	r2, r3, r2
 80095dc:	2a01      	cmp	r2, #1
 80095de:	d90b      	bls.n	80095f8 <ai_platform_context_acquire+0x40>
 80095e0:	f240 4249 	movw	r2, #1097	; 0x449
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d007      	beq.n	80095f8 <ai_platform_context_acquire+0x40>
 80095e8:	4b15      	ldr	r3, [pc, #84]	; (8009640 <ai_platform_context_acquire+0x88>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095f0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80095f4:	d00f      	beq.n	8009616 <ai_platform_context_acquire+0x5e>
 80095f6:	4770      	bx	lr
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <ai_platform_context_acquire+0x8c>)
 80095fa:	2201      	movs	r2, #1
 80095fc:	4619      	mov	r1, r3
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	680b      	ldr	r3, [r1, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1fc      	bne.n	8009600 <ai_platform_context_acquire+0x48>
 8009606:	4b10      	ldr	r3, [pc, #64]	; (8009648 <ai_platform_context_acquire+0x90>)
 8009608:	4910      	ldr	r1, [pc, #64]	; (800964c <ai_platform_context_acquire+0x94>)
 800960a:	4a11      	ldr	r2, [pc, #68]	; (8009650 <ai_platform_context_acquire+0x98>)
 800960c:	6019      	str	r1, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4293      	cmp	r3, r2
 8009612:	d0f0      	beq.n	80095f6 <ai_platform_context_acquire+0x3e>
 8009614:	e7fe      	b.n	8009614 <ai_platform_context_acquire+0x5c>
 8009616:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <ai_platform_context_acquire+0x9c>)
 8009618:	2201      	movs	r2, #1
 800961a:	4619      	mov	r1, r3
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	680b      	ldr	r3, [r1, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1fc      	bne.n	800961e <ai_platform_context_acquire+0x66>
 8009624:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <ai_platform_context_acquire+0xa0>)
 8009626:	4909      	ldr	r1, [pc, #36]	; (800964c <ai_platform_context_acquire+0x94>)
 8009628:	4a09      	ldr	r2, [pc, #36]	; (8009650 <ai_platform_context_acquire+0x98>)
 800962a:	6019      	str	r1, [r3, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4293      	cmp	r3, r2
 8009630:	d0e1      	beq.n	80095f6 <ai_platform_context_acquire+0x3e>
 8009632:	e7fe      	b.n	8009632 <ai_platform_context_acquire+0x7a>
 8009634:	a1c00100 	.word	0xa1c00100
 8009638:	e0002000 	.word	0xe0002000
 800963c:	e0042000 	.word	0xe0042000
 8009640:	5c001000 	.word	0x5c001000
 8009644:	40023008 	.word	0x40023008
 8009648:	40023000 	.word	0x40023000
 800964c:	f407a5c2 	.word	0xf407a5c2
 8009650:	b5e8b5cd 	.word	0xb5e8b5cd
 8009654:	58024c08 	.word	0x58024c08
 8009658:	58024c00 	.word	0x58024c00

0800965c <ai_platform_network_get_error>:
 800965c:	b118      	cbz	r0, 8009666 <ai_platform_network_get_error+0xa>
 800965e:	4b3c      	ldr	r3, [pc, #240]	; (8009750 <ai_platform_network_get_error+0xf4>)
 8009660:	6802      	ldr	r2, [r0, #0]
 8009662:	429a      	cmp	r2, r3
 8009664:	d02a      	beq.n	80096bc <ai_platform_network_get_error+0x60>
 8009666:	4a3b      	ldr	r2, [pc, #236]	; (8009754 <ai_platform_network_get_error+0xf8>)
 8009668:	493b      	ldr	r1, [pc, #236]	; (8009758 <ai_platform_network_get_error+0xfc>)
 800966a:	6813      	ldr	r3, [r2, #0]
 800966c:	f023 0301 	bic.w	r3, r3, #1
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	680b      	ldr	r3, [r1, #0]
 8009674:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800967c:	185a      	adds	r2, r3, r1
 800967e:	2a01      	cmp	r2, #1
 8009680:	d90d      	bls.n	800969e <ai_platform_network_get_error+0x42>
 8009682:	f240 4249 	movw	r2, #1097	; 0x449
 8009686:	4293      	cmp	r3, r2
 8009688:	d009      	beq.n	800969e <ai_platform_network_get_error+0x42>
 800968a:	4b34      	ldr	r3, [pc, #208]	; (800975c <ai_platform_network_get_error+0x100>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009692:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009696:	d02d      	beq.n	80096f4 <ai_platform_network_get_error+0x98>
 8009698:	f241 0010 	movw	r0, #4112	; 0x1010
 800969c:	4770      	bx	lr
 800969e:	4b30      	ldr	r3, [pc, #192]	; (8009760 <ai_platform_network_get_error+0x104>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	4619      	mov	r1, r3
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	680b      	ldr	r3, [r1, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1fc      	bne.n	80096a6 <ai_platform_network_get_error+0x4a>
 80096ac:	4b2d      	ldr	r3, [pc, #180]	; (8009764 <ai_platform_network_get_error+0x108>)
 80096ae:	492e      	ldr	r1, [pc, #184]	; (8009768 <ai_platform_network_get_error+0x10c>)
 80096b0:	4a2e      	ldr	r2, [pc, #184]	; (800976c <ai_platform_network_get_error+0x110>)
 80096b2:	6019      	str	r1, [r3, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d0ee      	beq.n	8009698 <ai_platform_network_get_error+0x3c>
 80096ba:	e7fe      	b.n	80096ba <ai_platform_network_get_error+0x5e>
 80096bc:	4a25      	ldr	r2, [pc, #148]	; (8009754 <ai_platform_network_get_error+0xf8>)
 80096be:	4926      	ldr	r1, [pc, #152]	; (8009758 <ai_platform_network_get_error+0xfc>)
 80096c0:	6813      	ldr	r3, [r2, #0]
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	6013      	str	r3, [r2, #0]
 80096c8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096d2:	189a      	adds	r2, r3, r2
 80096d4:	2a01      	cmp	r2, #1
 80096d6:	d92b      	bls.n	8009730 <ai_platform_network_get_error+0xd4>
 80096d8:	f240 4249 	movw	r2, #1097	; 0x449
 80096dc:	4293      	cmp	r3, r2
 80096de:	d027      	beq.n	8009730 <ai_platform_network_get_error+0xd4>
 80096e0:	4b1e      	ldr	r3, [pc, #120]	; (800975c <ai_platform_network_get_error+0x100>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80096ec:	d011      	beq.n	8009712 <ai_platform_network_get_error+0xb6>
 80096ee:	3010      	adds	r0, #16
 80096f0:	f001 b824 	b.w	800a73c <core_get_error>
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <ai_platform_network_get_error+0x114>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	4619      	mov	r1, r3
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	680b      	ldr	r3, [r1, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1fc      	bne.n	80096fc <ai_platform_network_get_error+0xa0>
 8009702:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <ai_platform_network_get_error+0x118>)
 8009704:	4918      	ldr	r1, [pc, #96]	; (8009768 <ai_platform_network_get_error+0x10c>)
 8009706:	4a19      	ldr	r2, [pc, #100]	; (800976c <ai_platform_network_get_error+0x110>)
 8009708:	6019      	str	r1, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4293      	cmp	r3, r2
 800970e:	d0c3      	beq.n	8009698 <ai_platform_network_get_error+0x3c>
 8009710:	e7fe      	b.n	8009710 <ai_platform_network_get_error+0xb4>
 8009712:	4b17      	ldr	r3, [pc, #92]	; (8009770 <ai_platform_network_get_error+0x114>)
 8009714:	2201      	movs	r2, #1
 8009716:	4619      	mov	r1, r3
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	680b      	ldr	r3, [r1, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1fc      	bne.n	800971a <ai_platform_network_get_error+0xbe>
 8009720:	4b14      	ldr	r3, [pc, #80]	; (8009774 <ai_platform_network_get_error+0x118>)
 8009722:	4911      	ldr	r1, [pc, #68]	; (8009768 <ai_platform_network_get_error+0x10c>)
 8009724:	4a11      	ldr	r2, [pc, #68]	; (800976c <ai_platform_network_get_error+0x110>)
 8009726:	6019      	str	r1, [r3, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4293      	cmp	r3, r2
 800972c:	d0df      	beq.n	80096ee <ai_platform_network_get_error+0x92>
 800972e:	e7fe      	b.n	800972e <ai_platform_network_get_error+0xd2>
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <ai_platform_network_get_error+0x104>)
 8009732:	2201      	movs	r2, #1
 8009734:	4619      	mov	r1, r3
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	680b      	ldr	r3, [r1, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1fc      	bne.n	8009738 <ai_platform_network_get_error+0xdc>
 800973e:	4b09      	ldr	r3, [pc, #36]	; (8009764 <ai_platform_network_get_error+0x108>)
 8009740:	4909      	ldr	r1, [pc, #36]	; (8009768 <ai_platform_network_get_error+0x10c>)
 8009742:	4a0a      	ldr	r2, [pc, #40]	; (800976c <ai_platform_network_get_error+0x110>)
 8009744:	6019      	str	r1, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4293      	cmp	r3, r2
 800974a:	d0d0      	beq.n	80096ee <ai_platform_network_get_error+0x92>
 800974c:	e7fe      	b.n	800974c <ai_platform_network_get_error+0xf0>
 800974e:	bf00      	nop
 8009750:	a1c00100 	.word	0xa1c00100
 8009754:	e0002000 	.word	0xe0002000
 8009758:	e0042000 	.word	0xe0042000
 800975c:	5c001000 	.word	0x5c001000
 8009760:	40023008 	.word	0x40023008
 8009764:	40023000 	.word	0x40023000
 8009768:	f407a5c2 	.word	0xf407a5c2
 800976c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009770:	58024c08 	.word	0x58024c08
 8009774:	58024c00 	.word	0x58024c00

08009778 <ai_platform_api_get_network_report>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	460c      	mov	r4, r1
 800977e:	b085      	sub	sp, #20
 8009780:	4605      	mov	r5, r0
 8009782:	b120      	cbz	r0, 800978e <ai_platform_api_get_network_report+0x16>
 8009784:	4ba7      	ldr	r3, [pc, #668]	; (8009a24 <ai_platform_api_get_network_report+0x2ac>)
 8009786:	6802      	ldr	r2, [r0, #0]
 8009788:	429a      	cmp	r2, r3
 800978a:	bf18      	it	ne
 800978c:	2500      	movne	r5, #0
 800978e:	4aa6      	ldr	r2, [pc, #664]	; (8009a28 <ai_platform_api_get_network_report+0x2b0>)
 8009790:	f46f 668a 	mvn.w	r6, #1104	; 0x450
 8009794:	49a5      	ldr	r1, [pc, #660]	; (8009a2c <ai_platform_api_get_network_report+0x2b4>)
 8009796:	6813      	ldr	r3, [r2, #0]
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	680b      	ldr	r3, [r1, #0]
 80097a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097a4:	199a      	adds	r2, r3, r6
 80097a6:	2a01      	cmp	r2, #1
 80097a8:	f240 8090 	bls.w	80098cc <ai_platform_api_get_network_report+0x154>
 80097ac:	f240 4249 	movw	r2, #1097	; 0x449
 80097b0:	4293      	cmp	r3, r2
 80097b2:	f000 808b 	beq.w	80098cc <ai_platform_api_get_network_report+0x154>
 80097b6:	4b9e      	ldr	r3, [pc, #632]	; (8009a30 <ai_platform_api_get_network_report+0x2b8>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80097be:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80097c2:	d073      	beq.n	80098ac <ai_platform_api_get_network_report+0x134>
 80097c4:	2d00      	cmp	r5, #0
 80097c6:	f000 8091 	beq.w	80098ec <ai_platform_api_get_network_report+0x174>
 80097ca:	fab4 f384 	clz	r3, r4
 80097ce:	095b      	lsrs	r3, r3, #5
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f040 808b 	bne.w	80098ec <ai_platform_api_get_network_report+0x174>
 80097d6:	66e3      	str	r3, [r4, #108]	; 0x6c
 80097d8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80097da:	2a00      	cmp	r2, #0
 80097dc:	f000 810f 	beq.w	80099fe <ai_platform_api_get_network_report+0x286>
 80097e0:	2301      	movs	r3, #1
 80097e2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80097e4:	68d3      	ldr	r3, [r2, #12]
 80097e6:	b193      	cbz	r3, 800980e <ai_platform_api_get_network_report+0x96>
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d010      	beq.n	800980e <ai_platform_api_get_network_report+0x96>
 80097ec:	2202      	movs	r2, #2
 80097ee:	66e2      	str	r2, [r4, #108]	; 0x6c
 80097f0:	3201      	adds	r2, #1
 80097f2:	68d9      	ldr	r1, [r3, #12]
 80097f4:	4299      	cmp	r1, r3
 80097f6:	bf18      	it	ne
 80097f8:	2900      	cmpne	r1, #0
 80097fa:	460b      	mov	r3, r1
 80097fc:	bf14      	ite	ne
 80097fe:	2001      	movne	r0, #1
 8009800:	2000      	moveq	r0, #0
 8009802:	2800      	cmp	r0, #0
 8009804:	d1f3      	bne.n	80097ee <ai_platform_api_get_network_report+0x76>
 8009806:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 80f8 	beq.w	80099fe <ai_platform_api_get_network_report+0x286>
 800980e:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80e7 	beq.w	80099e6 <ai_platform_api_get_network_report+0x26e>
 8009818:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800981a:	2f00      	cmp	r7, #0
 800981c:	f000 80e3 	beq.w	80099e6 <ai_platform_api_get_network_report+0x26e>
 8009820:	883b      	ldrh	r3, [r7, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 80df 	beq.w	80099e6 <ai_platform_api_get_network_report+0x26e>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80db 	beq.w	80099e6 <ai_platform_api_get_network_report+0x26e>
 8009830:	681e      	ldr	r6, [r3, #0]
 8009832:	2e00      	cmp	r6, #0
 8009834:	f000 80d7 	beq.w	80099e6 <ai_platform_api_get_network_report+0x26e>
 8009838:	f04f 0901 	mov.w	r9, #1
 800983c:	f04f 0800 	mov.w	r8, #0
 8009840:	464b      	mov	r3, r9
 8009842:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8009846:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 800984a:	69b0      	ldr	r0, [r6, #24]
 800984c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009850:	6800      	ldr	r0, [r0, #0]
 8009852:	eb01 0a02 	add.w	sl, r1, r2
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	f8dc b008 	ldr.w	fp, [ip, #8]
 800985c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8009860:	f001 fcf6 	bl	800b250 <ai_array_to_buffer_fmt>
 8009864:	9b03      	ldr	r3, [sp, #12]
 8009866:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 800986a:	5088      	str	r0, [r1, r2]
 800986c:	eb0b 0108 	add.w	r1, fp, r8
 8009870:	f8aa 3004 	strh.w	r3, [sl, #4]
 8009874:	68f2      	ldr	r2, [r6, #12]
 8009876:	68d2      	ldr	r2, [r2, #12]
 8009878:	f8aa 2006 	strh.w	r2, [sl, #6]
 800987c:	68f2      	ldr	r2, [r6, #12]
 800987e:	6892      	ldr	r2, [r2, #8]
 8009880:	f8aa 2008 	strh.w	r2, [sl, #8]
 8009884:	68f2      	ldr	r2, [r6, #12]
 8009886:	6852      	ldr	r2, [r2, #4]
 8009888:	f8ca 200c 	str.w	r2, [sl, #12]
 800988c:	69b2      	ldr	r2, [r6, #24]
 800988e:	6892      	ldr	r2, [r2, #8]
 8009890:	f8ca 2010 	str.w	r2, [sl, #16]
 8009894:	2900      	cmp	r1, #0
 8009896:	d02d      	beq.n	80098f4 <ai_platform_api_get_network_report+0x17c>
 8009898:	2200      	movs	r2, #0
 800989a:	f84b 2008 	str.w	r2, [fp, r8]
 800989e:	6832      	ldr	r2, [r6, #0]
 80098a0:	604a      	str	r2, [r1, #4]
 80098a2:	b33a      	cbz	r2, 80098f4 <ai_platform_api_get_network_report+0x17c>
 80098a4:	8852      	ldrh	r2, [r2, #2]
 80098a6:	b32a      	cbz	r2, 80098f4 <ai_platform_api_get_network_report+0x17c>
 80098a8:	600b      	str	r3, [r1, #0]
 80098aa:	e024      	b.n	80098f6 <ai_platform_api_get_network_report+0x17e>
 80098ac:	4b61      	ldr	r3, [pc, #388]	; (8009a34 <ai_platform_api_get_network_report+0x2bc>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	4619      	mov	r1, r3
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	680b      	ldr	r3, [r1, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1fc      	bne.n	80098b4 <ai_platform_api_get_network_report+0x13c>
 80098ba:	4b5f      	ldr	r3, [pc, #380]	; (8009a38 <ai_platform_api_get_network_report+0x2c0>)
 80098bc:	495f      	ldr	r1, [pc, #380]	; (8009a3c <ai_platform_api_get_network_report+0x2c4>)
 80098be:	4a60      	ldr	r2, [pc, #384]	; (8009a40 <ai_platform_api_get_network_report+0x2c8>)
 80098c0:	6019      	str	r1, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4293      	cmp	r3, r2
 80098c6:	f43f af7d 	beq.w	80097c4 <ai_platform_api_get_network_report+0x4c>
 80098ca:	e7fe      	b.n	80098ca <ai_platform_api_get_network_report+0x152>
 80098cc:	4b5d      	ldr	r3, [pc, #372]	; (8009a44 <ai_platform_api_get_network_report+0x2cc>)
 80098ce:	2201      	movs	r2, #1
 80098d0:	4619      	mov	r1, r3
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	680b      	ldr	r3, [r1, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1fc      	bne.n	80098d4 <ai_platform_api_get_network_report+0x15c>
 80098da:	4b5b      	ldr	r3, [pc, #364]	; (8009a48 <ai_platform_api_get_network_report+0x2d0>)
 80098dc:	4957      	ldr	r1, [pc, #348]	; (8009a3c <ai_platform_api_get_network_report+0x2c4>)
 80098de:	4a58      	ldr	r2, [pc, #352]	; (8009a40 <ai_platform_api_get_network_report+0x2c8>)
 80098e0:	6019      	str	r1, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4293      	cmp	r3, r2
 80098e6:	f43f af6d 	beq.w	80097c4 <ai_platform_api_get_network_report+0x4c>
 80098ea:	e7fe      	b.n	80098ea <ai_platform_api_get_network_report+0x172>
 80098ec:	2000      	movs	r0, #0
 80098ee:	b005      	add	sp, #20
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	2100      	movs	r1, #0
 80098f6:	f8ca 1014 	str.w	r1, [sl, #20]
 80098fa:	fa1f f289 	uxth.w	r2, r9
 80098fe:	8839      	ldrh	r1, [r7, #0]
 8009900:	f108 0808 	add.w	r8, r8, #8
 8009904:	4589      	cmp	r9, r1
 8009906:	d207      	bcs.n	8009918 <ai_platform_api_get_network_report+0x1a0>
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	b129      	cbz	r1, 8009918 <ai_platform_api_get_network_report+0x1a0>
 800990c:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8009910:	f109 0901 	add.w	r9, r9, #1
 8009914:	2e00      	cmp	r6, #0
 8009916:	d194      	bne.n	8009842 <ai_platform_api_get_network_report+0xca>
 8009918:	2a00      	cmp	r2, #0
 800991a:	d064      	beq.n	80099e6 <ai_platform_api_get_network_report+0x26e>
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	8622      	strh	r2, [r4, #48]	; 0x30
 8009922:	6363      	str	r3, [r4, #52]	; 0x34
 8009924:	f8b5 3048 	ldrh.w	r3, [r5, #72]	; 0x48
 8009928:	2b01      	cmp	r3, #1
 800992a:	d970      	bls.n	8009a0e <ai_platform_api_get_network_report+0x296>
 800992c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800992e:	f117 0f0c 	cmn.w	r7, #12
 8009932:	d06c      	beq.n	8009a0e <ai_platform_api_get_network_report+0x296>
 8009934:	89bb      	ldrh	r3, [r7, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d069      	beq.n	8009a0e <ai_platform_api_get_network_report+0x296>
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d066      	beq.n	8009a0e <ai_platform_api_get_network_report+0x296>
 8009940:	681e      	ldr	r6, [r3, #0]
 8009942:	2e00      	cmp	r6, #0
 8009944:	d063      	beq.n	8009a0e <ai_platform_api_get_network_report+0x296>
 8009946:	f04f 0901 	mov.w	r9, #1
 800994a:	f04f 0800 	mov.w	r8, #0
 800994e:	464b      	mov	r3, r9
 8009950:	e01c      	b.n	800998c <ai_platform_api_get_network_report+0x214>
 8009952:	2200      	movs	r2, #0
 8009954:	f84b 2008 	str.w	r2, [fp, r8]
 8009958:	6832      	ldr	r2, [r6, #0]
 800995a:	604a      	str	r2, [r1, #4]
 800995c:	2a00      	cmp	r2, #0
 800995e:	d040      	beq.n	80099e2 <ai_platform_api_get_network_report+0x26a>
 8009960:	8852      	ldrh	r2, [r2, #2]
 8009962:	2a00      	cmp	r2, #0
 8009964:	d03d      	beq.n	80099e2 <ai_platform_api_get_network_report+0x26a>
 8009966:	600b      	str	r3, [r1, #0]
 8009968:	f8ca 1014 	str.w	r1, [sl, #20]
 800996c:	fa1f f289 	uxth.w	r2, r9
 8009970:	89b9      	ldrh	r1, [r7, #12]
 8009972:	f108 0808 	add.w	r8, r8, #8
 8009976:	4589      	cmp	r9, r1
 8009978:	d268      	bcs.n	8009a4c <ai_platform_api_get_network_report+0x2d4>
 800997a:	6939      	ldr	r1, [r7, #16]
 800997c:	2900      	cmp	r1, #0
 800997e:	d065      	beq.n	8009a4c <ai_platform_api_get_network_report+0x2d4>
 8009980:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8009984:	f109 0901 	add.w	r9, r9, #1
 8009988:	2e00      	cmp	r6, #0
 800998a:	d05f      	beq.n	8009a4c <ai_platform_api_get_network_report+0x2d4>
 800998c:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8009990:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8009994:	69b0      	ldr	r0, [r6, #24]
 8009996:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800999a:	6800      	ldr	r0, [r0, #0]
 800999c:	eb01 0a02 	add.w	sl, r1, r2
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	f8dc b008 	ldr.w	fp, [ip, #8]
 80099a6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80099aa:	f001 fc51 	bl	800b250 <ai_array_to_buffer_fmt>
 80099ae:	9b03      	ldr	r3, [sp, #12]
 80099b0:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80099b4:	5088      	str	r0, [r1, r2]
 80099b6:	eb0b 0108 	add.w	r1, fp, r8
 80099ba:	f8aa 3004 	strh.w	r3, [sl, #4]
 80099be:	68f2      	ldr	r2, [r6, #12]
 80099c0:	68d2      	ldr	r2, [r2, #12]
 80099c2:	f8aa 2006 	strh.w	r2, [sl, #6]
 80099c6:	68f2      	ldr	r2, [r6, #12]
 80099c8:	6892      	ldr	r2, [r2, #8]
 80099ca:	f8aa 2008 	strh.w	r2, [sl, #8]
 80099ce:	68f2      	ldr	r2, [r6, #12]
 80099d0:	6852      	ldr	r2, [r2, #4]
 80099d2:	f8ca 200c 	str.w	r2, [sl, #12]
 80099d6:	69b2      	ldr	r2, [r6, #24]
 80099d8:	6892      	ldr	r2, [r2, #8]
 80099da:	f8ca 2010 	str.w	r2, [sl, #16]
 80099de:	2900      	cmp	r1, #0
 80099e0:	d1b7      	bne.n	8009952 <ai_platform_api_get_network_report+0x1da>
 80099e2:	2100      	movs	r1, #0
 80099e4:	e7c0      	b.n	8009968 <ai_platform_api_get_network_report+0x1f0>
 80099e6:	2600      	movs	r6, #0
 80099e8:	f105 0010 	add.w	r0, r5, #16
 80099ec:	2218      	movs	r2, #24
 80099ee:	2112      	movs	r1, #18
 80099f0:	8626      	strh	r6, [r4, #48]	; 0x30
 80099f2:	f000 fea9 	bl	800a748 <core_set_error>
 80099f6:	4630      	mov	r0, r6
 80099f8:	b005      	add	sp, #20
 80099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fe:	f105 0010 	add.w	r0, r5, #16
 8009a02:	2218      	movs	r2, #24
 8009a04:	2111      	movs	r1, #17
 8009a06:	f000 fe9f 	bl	800a748 <core_set_error>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e76f      	b.n	80098ee <ai_platform_api_get_network_report+0x176>
 8009a0e:	2600      	movs	r6, #0
 8009a10:	f105 0010 	add.w	r0, r5, #16
 8009a14:	2218      	movs	r2, #24
 8009a16:	2113      	movs	r1, #19
 8009a18:	8666      	strh	r6, [r4, #50]	; 0x32
 8009a1a:	f000 fe95 	bl	800a748 <core_set_error>
 8009a1e:	4630      	mov	r0, r6
 8009a20:	e765      	b.n	80098ee <ai_platform_api_get_network_report+0x176>
 8009a22:	bf00      	nop
 8009a24:	a1c00100 	.word	0xa1c00100
 8009a28:	e0002000 	.word	0xe0002000
 8009a2c:	e0042000 	.word	0xe0042000
 8009a30:	5c001000 	.word	0x5c001000
 8009a34:	58024c08 	.word	0x58024c08
 8009a38:	58024c00 	.word	0x58024c00
 8009a3c:	f407a5c2 	.word	0xf407a5c2
 8009a40:	b5e8b5cd 	.word	0xb5e8b5cd
 8009a44:	40023008 	.word	0x40023008
 8009a48:	40023000 	.word	0x40023000
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	d0de      	beq.n	8009a0e <ai_platform_api_get_network_report+0x296>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8009a56:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8009a5a:	f105 0718 	add.w	r7, r5, #24
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f104 0654 	add.w	r6, r4, #84	; 0x54
 8009a64:	8662      	strh	r2, [r4, #50]	; 0x32
 8009a66:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a68:	686b      	ldr	r3, [r5, #4]
 8009a6a:	4d80      	ldr	r5, [pc, #512]	; (8009c6c <ai_platform_api_get_network_report+0x4f4>)
 8009a6c:	6723      	str	r3, [r4, #112]	; 0x70
 8009a6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8009a72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009a76:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8009a7a:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8009c78 <ai_platform_api_get_network_report+0x500>
 8009a7e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009a82:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009a84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009a86:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009a8a:	e886 0003 	stmia.w	r6, {r0, r1}
 8009a8e:	682b      	ldr	r3, [r5, #0]
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	602b      	str	r3, [r5, #0]
 8009a96:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8009a9a:	f8de 3000 	ldr.w	r3, [lr]
 8009a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009aa2:	195a      	adds	r2, r3, r5
 8009aa4:	2a01      	cmp	r2, #1
 8009aa6:	d966      	bls.n	8009b76 <ai_platform_api_get_network_report+0x3fe>
 8009aa8:	f240 4249 	movw	r2, #1097	; 0x449
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d062      	beq.n	8009b76 <ai_platform_api_get_network_report+0x3fe>
 8009ab0:	4b6f      	ldr	r3, [pc, #444]	; (8009c70 <ai_platform_api_get_network_report+0x4f8>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ab8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009abc:	f000 80c6 	beq.w	8009c4c <ai_platform_api_get_network_report+0x4d4>
 8009ac0:	4a6a      	ldr	r2, [pc, #424]	; (8009c6c <ai_platform_api_get_network_report+0x4f4>)
 8009ac2:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 8009ac6:	4b6b      	ldr	r3, [pc, #428]	; (8009c74 <ai_platform_api_get_network_report+0x4fc>)
 8009ac8:	496b      	ldr	r1, [pc, #428]	; (8009c78 <ai_platform_api_get_network_report+0x500>)
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	6813      	ldr	r3, [r2, #0]
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	680b      	ldr	r3, [r1, #0]
 8009ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ada:	181a      	adds	r2, r3, r0
 8009adc:	2a01      	cmp	r2, #1
 8009ade:	f240 80a5 	bls.w	8009c2c <ai_platform_api_get_network_report+0x4b4>
 8009ae2:	f240 4249 	movw	r2, #1097	; 0x449
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	f000 80a0 	beq.w	8009c2c <ai_platform_api_get_network_report+0x4b4>
 8009aec:	4b60      	ldr	r3, [pc, #384]	; (8009c70 <ai_platform_api_get_network_report+0x4f8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009af4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009af8:	f000 8088 	beq.w	8009c0c <ai_platform_api_get_network_report+0x494>
 8009afc:	4a5b      	ldr	r2, [pc, #364]	; (8009c6c <ai_platform_api_get_network_report+0x4f4>)
 8009afe:	f240 1305 	movw	r3, #261	; 0x105
 8009b02:	495d      	ldr	r1, [pc, #372]	; (8009c78 <ai_platform_api_get_network_report+0x500>)
 8009b04:	6163      	str	r3, [r4, #20]
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	f023 0301 	bic.w	r3, r3, #1
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	680b      	ldr	r3, [r1, #0]
 8009b10:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b18:	185a      	adds	r2, r3, r1
 8009b1a:	2a01      	cmp	r2, #1
 8009b1c:	d967      	bls.n	8009bee <ai_platform_api_get_network_report+0x476>
 8009b1e:	f240 4249 	movw	r2, #1097	; 0x449
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d063      	beq.n	8009bee <ai_platform_api_get_network_report+0x476>
 8009b26:	4b52      	ldr	r3, [pc, #328]	; (8009c70 <ai_platform_api_get_network_report+0x4f8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b2e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009b32:	d04d      	beq.n	8009bd0 <ai_platform_api_get_network_report+0x458>
 8009b34:	4a4d      	ldr	r2, [pc, #308]	; (8009c6c <ai_platform_api_get_network_report+0x4f4>)
 8009b36:	f240 1301 	movw	r3, #257	; 0x101
 8009b3a:	494f      	ldr	r1, [pc, #316]	; (8009c78 <ai_platform_api_get_network_report+0x500>)
 8009b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b3e:	6813      	ldr	r3, [r2, #0]
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009b4a:	680b      	ldr	r3, [r1, #0]
 8009b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b50:	189a      	adds	r2, r3, r2
 8009b52:	2a01      	cmp	r2, #1
 8009b54:	d92d      	bls.n	8009bb2 <ai_platform_api_get_network_report+0x43a>
 8009b56:	f240 4249 	movw	r2, #1097	; 0x449
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d029      	beq.n	8009bb2 <ai_platform_api_get_network_report+0x43a>
 8009b5e:	4b44      	ldr	r3, [pc, #272]	; (8009c70 <ai_platform_api_get_network_report+0x4f8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b66:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009b6a:	d013      	beq.n	8009b94 <ai_platform_api_get_network_report+0x41c>
 8009b6c:	f240 4301 	movw	r3, #1025	; 0x401
 8009b70:	2001      	movs	r0, #1
 8009b72:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b74:	e6bb      	b.n	80098ee <ai_platform_api_get_network_report+0x176>
 8009b76:	4b41      	ldr	r3, [pc, #260]	; (8009c7c <ai_platform_api_get_network_report+0x504>)
 8009b78:	2201      	movs	r2, #1
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	680b      	ldr	r3, [r1, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1fc      	bne.n	8009b7e <ai_platform_api_get_network_report+0x406>
 8009b84:	4b3e      	ldr	r3, [pc, #248]	; (8009c80 <ai_platform_api_get_network_report+0x508>)
 8009b86:	493f      	ldr	r1, [pc, #252]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009b88:	4a3f      	ldr	r2, [pc, #252]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009b8a:	6019      	str	r1, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d096      	beq.n	8009ac0 <ai_platform_api_get_network_report+0x348>
 8009b92:	e7fe      	b.n	8009b92 <ai_platform_api_get_network_report+0x41a>
 8009b94:	4b3d      	ldr	r3, [pc, #244]	; (8009c8c <ai_platform_api_get_network_report+0x514>)
 8009b96:	2201      	movs	r2, #1
 8009b98:	4619      	mov	r1, r3
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	680b      	ldr	r3, [r1, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1fc      	bne.n	8009b9c <ai_platform_api_get_network_report+0x424>
 8009ba2:	4b3b      	ldr	r3, [pc, #236]	; (8009c90 <ai_platform_api_get_network_report+0x518>)
 8009ba4:	4937      	ldr	r1, [pc, #220]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009ba6:	4a38      	ldr	r2, [pc, #224]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009ba8:	6019      	str	r1, [r3, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d0dd      	beq.n	8009b6c <ai_platform_api_get_network_report+0x3f4>
 8009bb0:	e7fe      	b.n	8009bb0 <ai_platform_api_get_network_report+0x438>
 8009bb2:	4b32      	ldr	r3, [pc, #200]	; (8009c7c <ai_platform_api_get_network_report+0x504>)
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	680b      	ldr	r3, [r1, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1fc      	bne.n	8009bba <ai_platform_api_get_network_report+0x442>
 8009bc0:	4b2f      	ldr	r3, [pc, #188]	; (8009c80 <ai_platform_api_get_network_report+0x508>)
 8009bc2:	4930      	ldr	r1, [pc, #192]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009bc4:	4a30      	ldr	r2, [pc, #192]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009bc6:	6019      	str	r1, [r3, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d0ce      	beq.n	8009b6c <ai_platform_api_get_network_report+0x3f4>
 8009bce:	e7fe      	b.n	8009bce <ai_platform_api_get_network_report+0x456>
 8009bd0:	4b2e      	ldr	r3, [pc, #184]	; (8009c8c <ai_platform_api_get_network_report+0x514>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	680b      	ldr	r3, [r1, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1fc      	bne.n	8009bd8 <ai_platform_api_get_network_report+0x460>
 8009bde:	4b2c      	ldr	r3, [pc, #176]	; (8009c90 <ai_platform_api_get_network_report+0x518>)
 8009be0:	4928      	ldr	r1, [pc, #160]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009be2:	4a29      	ldr	r2, [pc, #164]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009be4:	6019      	str	r1, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d0a3      	beq.n	8009b34 <ai_platform_api_get_network_report+0x3bc>
 8009bec:	e7fe      	b.n	8009bec <ai_platform_api_get_network_report+0x474>
 8009bee:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <ai_platform_api_get_network_report+0x504>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	680b      	ldr	r3, [r1, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1fc      	bne.n	8009bf6 <ai_platform_api_get_network_report+0x47e>
 8009bfc:	4b20      	ldr	r3, [pc, #128]	; (8009c80 <ai_platform_api_get_network_report+0x508>)
 8009bfe:	4921      	ldr	r1, [pc, #132]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009c00:	4a21      	ldr	r2, [pc, #132]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009c02:	6019      	str	r1, [r3, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d094      	beq.n	8009b34 <ai_platform_api_get_network_report+0x3bc>
 8009c0a:	e7fe      	b.n	8009c0a <ai_platform_api_get_network_report+0x492>
 8009c0c:	4b1f      	ldr	r3, [pc, #124]	; (8009c8c <ai_platform_api_get_network_report+0x514>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4619      	mov	r1, r3
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	680b      	ldr	r3, [r1, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1fc      	bne.n	8009c14 <ai_platform_api_get_network_report+0x49c>
 8009c1a:	4b1d      	ldr	r3, [pc, #116]	; (8009c90 <ai_platform_api_get_network_report+0x518>)
 8009c1c:	4919      	ldr	r1, [pc, #100]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009c1e:	4a1a      	ldr	r2, [pc, #104]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009c20:	6019      	str	r1, [r3, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4293      	cmp	r3, r2
 8009c26:	f43f af69 	beq.w	8009afc <ai_platform_api_get_network_report+0x384>
 8009c2a:	e7fe      	b.n	8009c2a <ai_platform_api_get_network_report+0x4b2>
 8009c2c:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <ai_platform_api_get_network_report+0x504>)
 8009c2e:	2201      	movs	r2, #1
 8009c30:	4619      	mov	r1, r3
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	680b      	ldr	r3, [r1, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1fc      	bne.n	8009c34 <ai_platform_api_get_network_report+0x4bc>
 8009c3a:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <ai_platform_api_get_network_report+0x508>)
 8009c3c:	4911      	ldr	r1, [pc, #68]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009c3e:	4a12      	ldr	r2, [pc, #72]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009c40:	6019      	str	r1, [r3, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	f43f af59 	beq.w	8009afc <ai_platform_api_get_network_report+0x384>
 8009c4a:	e7fe      	b.n	8009c4a <ai_platform_api_get_network_report+0x4d2>
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <ai_platform_api_get_network_report+0x514>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	4619      	mov	r1, r3
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	680b      	ldr	r3, [r1, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1fc      	bne.n	8009c54 <ai_platform_api_get_network_report+0x4dc>
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <ai_platform_api_get_network_report+0x518>)
 8009c5c:	4909      	ldr	r1, [pc, #36]	; (8009c84 <ai_platform_api_get_network_report+0x50c>)
 8009c5e:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <ai_platform_api_get_network_report+0x510>)
 8009c60:	6019      	str	r1, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4293      	cmp	r3, r2
 8009c66:	f43f af2b 	beq.w	8009ac0 <ai_platform_api_get_network_report+0x348>
 8009c6a:	e7fe      	b.n	8009c6a <ai_platform_api_get_network_report+0x4f2>
 8009c6c:	e0002000 	.word	0xe0002000
 8009c70:	5c001000 	.word	0x5c001000
 8009c74:	0800e798 	.word	0x0800e798
 8009c78:	e0042000 	.word	0xe0042000
 8009c7c:	40023008 	.word	0x40023008
 8009c80:	40023000 	.word	0x40023000
 8009c84:	f407a5c2 	.word	0xf407a5c2
 8009c88:	b5e8b5cd 	.word	0xb5e8b5cd
 8009c8c:	58024c08 	.word	0x58024c08
 8009c90:	58024c00 	.word	0x58024c00

08009c94 <ai_platform_network_create>:
 8009c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c96:	4d36      	ldr	r5, [pc, #216]	; (8009d70 <ai_platform_network_create+0xdc>)
 8009c98:	b083      	sub	sp, #12
 8009c9a:	4e36      	ldr	r6, [pc, #216]	; (8009d74 <ai_platform_network_create+0xe0>)
 8009c9c:	6829      	ldr	r1, [r5, #0]
 8009c9e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8009ca2:	f021 0101 	bic.w	r1, r1, #1
 8009ca6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8009caa:	6029      	str	r1, [r5, #0]
 8009cac:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8009cb0:	6831      	ldr	r1, [r6, #0]
 8009cb2:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8009cb6:	194d      	adds	r5, r1, r5
 8009cb8:	2d01      	cmp	r5, #1
 8009cba:	d92f      	bls.n	8009d1c <ai_platform_network_create+0x88>
 8009cbc:	f240 4549 	movw	r5, #1097	; 0x449
 8009cc0:	42a9      	cmp	r1, r5
 8009cc2:	d02b      	beq.n	8009d1c <ai_platform_network_create+0x88>
 8009cc4:	492c      	ldr	r1, [pc, #176]	; (8009d78 <ai_platform_network_create+0xe4>)
 8009cc6:	6809      	ldr	r1, [r1, #0]
 8009cc8:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8009ccc:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8009cd0:	d015      	beq.n	8009cfe <ai_platform_network_create+0x6a>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d031      	beq.n	8009d3a <ai_platform_network_create+0xa6>
 8009cd6:	461e      	mov	r6, r3
 8009cd8:	4613      	mov	r3, r2
 8009cda:	4a28      	ldr	r2, [pc, #160]	; (8009d7c <ai_platform_network_create+0xe8>)
 8009cdc:	4605      	mov	r5, r0
 8009cde:	601a      	str	r2, [r3, #0]
 8009ce0:	6003      	str	r3, [r0, #0]
 8009ce2:	f000 fd29 	bl	800a738 <core_init>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d02b      	beq.n	8009d42 <ai_platform_network_create+0xae>
 8009cea:	0223      	lsls	r3, r4, #8
 8009cec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009cf0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8009cf4:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8009cf8:	d92e      	bls.n	8009d58 <ai_platform_network_create+0xc4>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e022      	b.n	8009d44 <ai_platform_network_create+0xb0>
 8009cfe:	4920      	ldr	r1, [pc, #128]	; (8009d80 <ai_platform_network_create+0xec>)
 8009d00:	2501      	movs	r5, #1
 8009d02:	460e      	mov	r6, r1
 8009d04:	600d      	str	r5, [r1, #0]
 8009d06:	6831      	ldr	r1, [r6, #0]
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	d1fc      	bne.n	8009d06 <ai_platform_network_create+0x72>
 8009d0c:	491d      	ldr	r1, [pc, #116]	; (8009d84 <ai_platform_network_create+0xf0>)
 8009d0e:	4e1e      	ldr	r6, [pc, #120]	; (8009d88 <ai_platform_network_create+0xf4>)
 8009d10:	4d1e      	ldr	r5, [pc, #120]	; (8009d8c <ai_platform_network_create+0xf8>)
 8009d12:	600e      	str	r6, [r1, #0]
 8009d14:	6809      	ldr	r1, [r1, #0]
 8009d16:	42a9      	cmp	r1, r5
 8009d18:	d0db      	beq.n	8009cd2 <ai_platform_network_create+0x3e>
 8009d1a:	e7fe      	b.n	8009d1a <ai_platform_network_create+0x86>
 8009d1c:	491c      	ldr	r1, [pc, #112]	; (8009d90 <ai_platform_network_create+0xfc>)
 8009d1e:	2501      	movs	r5, #1
 8009d20:	460e      	mov	r6, r1
 8009d22:	600d      	str	r5, [r1, #0]
 8009d24:	6831      	ldr	r1, [r6, #0]
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d1fc      	bne.n	8009d24 <ai_platform_network_create+0x90>
 8009d2a:	491a      	ldr	r1, [pc, #104]	; (8009d94 <ai_platform_network_create+0x100>)
 8009d2c:	4e16      	ldr	r6, [pc, #88]	; (8009d88 <ai_platform_network_create+0xf4>)
 8009d2e:	4d17      	ldr	r5, [pc, #92]	; (8009d8c <ai_platform_network_create+0xf8>)
 8009d30:	600e      	str	r6, [r1, #0]
 8009d32:	6809      	ldr	r1, [r1, #0]
 8009d34:	42a9      	cmp	r1, r5
 8009d36:	d0cc      	beq.n	8009cd2 <ai_platform_network_create+0x3e>
 8009d38:	e7fe      	b.n	8009d38 <ai_platform_network_create+0xa4>
 8009d3a:	f241 0010 	movw	r0, #4112	; 0x1010
 8009d3e:	b003      	add	sp, #12
 8009d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d42:	2330      	movs	r3, #48	; 0x30
 8009d44:	2100      	movs	r1, #0
 8009d46:	2210      	movs	r2, #16
 8009d48:	6029      	str	r1, [r5, #0]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f363 0007 	bfi	r0, r3, #0, #8
 8009d50:	f362 201f 	bfi	r0, r2, #8, #24
 8009d54:	b003      	add	sp, #12
 8009d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <ai_platform_network_create+0x104>)
 8009d5a:	a802      	add	r0, sp, #8
 8009d5c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009d60:	f001 fa12 	bl	800b188 <ai_check_custom_types>
 8009d64:	b110      	cbz	r0, 8009d6c <ai_platform_network_create+0xd8>
 8009d66:	2200      	movs	r2, #0
 8009d68:	4613      	mov	r3, r2
 8009d6a:	e7ee      	b.n	8009d4a <ai_platform_network_create+0xb6>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e7e9      	b.n	8009d44 <ai_platform_network_create+0xb0>
 8009d70:	e0002000 	.word	0xe0002000
 8009d74:	e0042000 	.word	0xe0042000
 8009d78:	5c001000 	.word	0x5c001000
 8009d7c:	a1c00100 	.word	0xa1c00100
 8009d80:	58024c08 	.word	0x58024c08
 8009d84:	58024c00 	.word	0x58024c00
 8009d88:	f407a5c2 	.word	0xf407a5c2
 8009d8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8009d90:	40023008 	.word	0x40023008
 8009d94:	40023000 	.word	0x40023000
 8009d98:	84048403 	.word	0x84048403

08009d9c <ai_platform_network_destroy>:
 8009d9c:	b118      	cbz	r0, 8009da6 <ai_platform_network_destroy+0xa>
 8009d9e:	4b3a      	ldr	r3, [pc, #232]	; (8009e88 <ai_platform_network_destroy+0xec>)
 8009da0:	6802      	ldr	r2, [r0, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d037      	beq.n	8009e16 <ai_platform_network_destroy+0x7a>
 8009da6:	4a39      	ldr	r2, [pc, #228]	; (8009e8c <ai_platform_network_destroy+0xf0>)
 8009da8:	4939      	ldr	r1, [pc, #228]	; (8009e90 <ai_platform_network_destroy+0xf4>)
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	f023 0301 	bic.w	r3, r3, #1
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	680b      	ldr	r3, [r1, #0]
 8009db4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dbc:	185a      	adds	r2, r3, r1
 8009dbe:	2a01      	cmp	r2, #1
 8009dc0:	d90b      	bls.n	8009dda <ai_platform_network_destroy+0x3e>
 8009dc2:	f240 4249 	movw	r2, #1097	; 0x449
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d007      	beq.n	8009dda <ai_platform_network_destroy+0x3e>
 8009dca:	4b32      	ldr	r3, [pc, #200]	; (8009e94 <ai_platform_network_destroy+0xf8>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009dd2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009dd6:	d00f      	beq.n	8009df8 <ai_platform_network_destroy+0x5c>
 8009dd8:	4770      	bx	lr
 8009dda:	4b2f      	ldr	r3, [pc, #188]	; (8009e98 <ai_platform_network_destroy+0xfc>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4619      	mov	r1, r3
 8009de0:	601a      	str	r2, [r3, #0]
 8009de2:	680b      	ldr	r3, [r1, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1fc      	bne.n	8009de2 <ai_platform_network_destroy+0x46>
 8009de8:	4b2c      	ldr	r3, [pc, #176]	; (8009e9c <ai_platform_network_destroy+0x100>)
 8009dea:	492d      	ldr	r1, [pc, #180]	; (8009ea0 <ai_platform_network_destroy+0x104>)
 8009dec:	4a2d      	ldr	r2, [pc, #180]	; (8009ea4 <ai_platform_network_destroy+0x108>)
 8009dee:	6019      	str	r1, [r3, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d0f0      	beq.n	8009dd8 <ai_platform_network_destroy+0x3c>
 8009df6:	e7fe      	b.n	8009df6 <ai_platform_network_destroy+0x5a>
 8009df8:	4b2b      	ldr	r3, [pc, #172]	; (8009ea8 <ai_platform_network_destroy+0x10c>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	680b      	ldr	r3, [r1, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1fc      	bne.n	8009e00 <ai_platform_network_destroy+0x64>
 8009e06:	4b29      	ldr	r3, [pc, #164]	; (8009eac <ai_platform_network_destroy+0x110>)
 8009e08:	4925      	ldr	r1, [pc, #148]	; (8009ea0 <ai_platform_network_destroy+0x104>)
 8009e0a:	4a26      	ldr	r2, [pc, #152]	; (8009ea4 <ai_platform_network_destroy+0x108>)
 8009e0c:	6019      	str	r1, [r3, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d0e1      	beq.n	8009dd8 <ai_platform_network_destroy+0x3c>
 8009e14:	e7fe      	b.n	8009e14 <ai_platform_network_destroy+0x78>
 8009e16:	4a1d      	ldr	r2, [pc, #116]	; (8009e8c <ai_platform_network_destroy+0xf0>)
 8009e18:	491d      	ldr	r1, [pc, #116]	; (8009e90 <ai_platform_network_destroy+0xf4>)
 8009e1a:	6813      	ldr	r3, [r2, #0]
 8009e1c:	f023 0301 	bic.w	r3, r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009e26:	680b      	ldr	r3, [r1, #0]
 8009e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e2c:	189a      	adds	r2, r3, r2
 8009e2e:	2a01      	cmp	r2, #1
 8009e30:	d90c      	bls.n	8009e4c <ai_platform_network_destroy+0xb0>
 8009e32:	f240 4249 	movw	r2, #1097	; 0x449
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d008      	beq.n	8009e4c <ai_platform_network_destroy+0xb0>
 8009e3a:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <ai_platform_network_destroy+0xf8>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009e42:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009e46:	d010      	beq.n	8009e6a <ai_platform_network_destroy+0xce>
 8009e48:	2000      	movs	r0, #0
 8009e4a:	4770      	bx	lr
 8009e4c:	4b12      	ldr	r3, [pc, #72]	; (8009e98 <ai_platform_network_destroy+0xfc>)
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4619      	mov	r1, r3
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	680b      	ldr	r3, [r1, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1fc      	bne.n	8009e54 <ai_platform_network_destroy+0xb8>
 8009e5a:	4b10      	ldr	r3, [pc, #64]	; (8009e9c <ai_platform_network_destroy+0x100>)
 8009e5c:	4910      	ldr	r1, [pc, #64]	; (8009ea0 <ai_platform_network_destroy+0x104>)
 8009e5e:	4a11      	ldr	r2, [pc, #68]	; (8009ea4 <ai_platform_network_destroy+0x108>)
 8009e60:	6019      	str	r1, [r3, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d0ef      	beq.n	8009e48 <ai_platform_network_destroy+0xac>
 8009e68:	e7fe      	b.n	8009e68 <ai_platform_network_destroy+0xcc>
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ea8 <ai_platform_network_destroy+0x10c>)
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	4619      	mov	r1, r3
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	680b      	ldr	r3, [r1, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1fc      	bne.n	8009e72 <ai_platform_network_destroy+0xd6>
 8009e78:	4b0c      	ldr	r3, [pc, #48]	; (8009eac <ai_platform_network_destroy+0x110>)
 8009e7a:	4909      	ldr	r1, [pc, #36]	; (8009ea0 <ai_platform_network_destroy+0x104>)
 8009e7c:	4a09      	ldr	r2, [pc, #36]	; (8009ea4 <ai_platform_network_destroy+0x108>)
 8009e7e:	6019      	str	r1, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d0e0      	beq.n	8009e48 <ai_platform_network_destroy+0xac>
 8009e86:	e7fe      	b.n	8009e86 <ai_platform_network_destroy+0xea>
 8009e88:	a1c00100 	.word	0xa1c00100
 8009e8c:	e0002000 	.word	0xe0002000
 8009e90:	e0042000 	.word	0xe0042000
 8009e94:	5c001000 	.word	0x5c001000
 8009e98:	40023008 	.word	0x40023008
 8009e9c:	40023000 	.word	0x40023000
 8009ea0:	f407a5c2 	.word	0xf407a5c2
 8009ea4:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ea8:	58024c08 	.word	0x58024c08
 8009eac:	58024c00 	.word	0x58024c00

08009eb0 <ai_platform_network_init>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d05e      	beq.n	8009f74 <ai_platform_network_init+0xc4>
 8009eb6:	4b68      	ldr	r3, [pc, #416]	; (800a058 <ai_platform_network_init+0x1a8>)
 8009eb8:	6802      	ldr	r2, [r0, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d15a      	bne.n	8009f74 <ai_platform_network_init+0xc4>
 8009ebe:	4a67      	ldr	r2, [pc, #412]	; (800a05c <ai_platform_network_init+0x1ac>)
 8009ec0:	4c67      	ldr	r4, [pc, #412]	; (800a060 <ai_platform_network_init+0x1b0>)
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	f023 0301 	bic.w	r3, r3, #1
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ed4:	189a      	adds	r2, r3, r2
 8009ed6:	2a01      	cmp	r2, #1
 8009ed8:	d93d      	bls.n	8009f56 <ai_platform_network_init+0xa6>
 8009eda:	f240 4249 	movw	r2, #1097	; 0x449
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d039      	beq.n	8009f56 <ai_platform_network_init+0xa6>
 8009ee2:	4b60      	ldr	r3, [pc, #384]	; (800a064 <ai_platform_network_init+0x1b4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009eea:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009eee:	d06b      	beq.n	8009fc8 <ai_platform_network_init+0x118>
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	2900      	cmp	r1, #0
 8009ef6:	f000 80a8 	beq.w	800a04a <ai_platform_network_init+0x19a>
 8009efa:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8009efc:	690e      	ldr	r6, [r1, #16]
 8009efe:	2f00      	cmp	r7, #0
 8009f00:	f000 8092 	beq.w	800a028 <ai_platform_network_init+0x178>
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	d07d      	beq.n	800a004 <ai_platform_network_init+0x154>
 8009f08:	f104 0718 	add.w	r7, r4, #24
 8009f0c:	f105 0c18 	add.w	ip, r5, #24
 8009f10:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8009f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f1e:	2403      	movs	r4, #3
 8009f20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8009f24:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009f26:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009f28:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009f2c:	e886 0003 	stmia.w	r6, {r0, r1}
 8009f30:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8009f32:	60ec      	str	r4, [r5, #12]
 8009f34:	b16a      	cbz	r2, 8009f52 <ai_platform_network_init+0xa2>
 8009f36:	68d3      	ldr	r3, [r2, #12]
 8009f38:	6095      	str	r5, [r2, #8]
 8009f3a:	b153      	cbz	r3, 8009f52 <ai_platform_network_init+0xa2>
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d104      	bne.n	8009f4a <ai_platform_network_init+0x9a>
 8009f40:	e007      	b.n	8009f52 <ai_platform_network_init+0xa2>
 8009f42:	429a      	cmp	r2, r3
 8009f44:	4613      	mov	r3, r2
 8009f46:	d004      	beq.n	8009f52 <ai_platform_network_init+0xa2>
 8009f48:	b11a      	cbz	r2, 8009f52 <ai_platform_network_init+0xa2>
 8009f4a:	68da      	ldr	r2, [r3, #12]
 8009f4c:	609d      	str	r5, [r3, #8]
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	d1f7      	bne.n	8009f42 <ai_platform_network_init+0x92>
 8009f52:	4628      	mov	r0, r5
 8009f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f56:	4b44      	ldr	r3, [pc, #272]	; (800a068 <ai_platform_network_init+0x1b8>)
 8009f58:	2201      	movs	r2, #1
 8009f5a:	461c      	mov	r4, r3
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1fc      	bne.n	8009f5e <ai_platform_network_init+0xae>
 8009f64:	4b41      	ldr	r3, [pc, #260]	; (800a06c <ai_platform_network_init+0x1bc>)
 8009f66:	4c42      	ldr	r4, [pc, #264]	; (800a070 <ai_platform_network_init+0x1c0>)
 8009f68:	4a42      	ldr	r2, [pc, #264]	; (800a074 <ai_platform_network_init+0x1c4>)
 8009f6a:	601c      	str	r4, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d0be      	beq.n	8009ef0 <ai_platform_network_init+0x40>
 8009f72:	e7fe      	b.n	8009f72 <ai_platform_network_init+0xc2>
 8009f74:	4a39      	ldr	r2, [pc, #228]	; (800a05c <ai_platform_network_init+0x1ac>)
 8009f76:	493a      	ldr	r1, [pc, #232]	; (800a060 <ai_platform_network_init+0x1b0>)
 8009f78:	6813      	ldr	r3, [r2, #0]
 8009f7a:	f023 0301 	bic.w	r3, r3, #1
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	680b      	ldr	r3, [r1, #0]
 8009f82:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f8a:	185a      	adds	r2, r3, r1
 8009f8c:	2a01      	cmp	r2, #1
 8009f8e:	d90c      	bls.n	8009faa <ai_platform_network_init+0xfa>
 8009f90:	f240 4249 	movw	r2, #1097	; 0x449
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d008      	beq.n	8009faa <ai_platform_network_init+0xfa>
 8009f98:	4b32      	ldr	r3, [pc, #200]	; (800a064 <ai_platform_network_init+0x1b4>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fa0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009fa4:	d01f      	beq.n	8009fe6 <ai_platform_network_init+0x136>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009faa:	4b2f      	ldr	r3, [pc, #188]	; (800a068 <ai_platform_network_init+0x1b8>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	4619      	mov	r1, r3
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	680b      	ldr	r3, [r1, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1fc      	bne.n	8009fb2 <ai_platform_network_init+0x102>
 8009fb8:	4b2c      	ldr	r3, [pc, #176]	; (800a06c <ai_platform_network_init+0x1bc>)
 8009fba:	492d      	ldr	r1, [pc, #180]	; (800a070 <ai_platform_network_init+0x1c0>)
 8009fbc:	4a2d      	ldr	r2, [pc, #180]	; (800a074 <ai_platform_network_init+0x1c4>)
 8009fbe:	6019      	str	r1, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d0ef      	beq.n	8009fa6 <ai_platform_network_init+0xf6>
 8009fc6:	e7fe      	b.n	8009fc6 <ai_platform_network_init+0x116>
 8009fc8:	4b2b      	ldr	r3, [pc, #172]	; (800a078 <ai_platform_network_init+0x1c8>)
 8009fca:	2201      	movs	r2, #1
 8009fcc:	461c      	mov	r4, r3
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1fc      	bne.n	8009fd0 <ai_platform_network_init+0x120>
 8009fd6:	4b29      	ldr	r3, [pc, #164]	; (800a07c <ai_platform_network_init+0x1cc>)
 8009fd8:	4c25      	ldr	r4, [pc, #148]	; (800a070 <ai_platform_network_init+0x1c0>)
 8009fda:	4a26      	ldr	r2, [pc, #152]	; (800a074 <ai_platform_network_init+0x1c4>)
 8009fdc:	601c      	str	r4, [r3, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d085      	beq.n	8009ef0 <ai_platform_network_init+0x40>
 8009fe4:	e7fe      	b.n	8009fe4 <ai_platform_network_init+0x134>
 8009fe6:	4b24      	ldr	r3, [pc, #144]	; (800a078 <ai_platform_network_init+0x1c8>)
 8009fe8:	2201      	movs	r2, #1
 8009fea:	4619      	mov	r1, r3
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	680b      	ldr	r3, [r1, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1fc      	bne.n	8009fee <ai_platform_network_init+0x13e>
 8009ff4:	4b21      	ldr	r3, [pc, #132]	; (800a07c <ai_platform_network_init+0x1cc>)
 8009ff6:	491e      	ldr	r1, [pc, #120]	; (800a070 <ai_platform_network_init+0x1c0>)
 8009ff8:	4a1e      	ldr	r2, [pc, #120]	; (800a074 <ai_platform_network_init+0x1c4>)
 8009ffa:	6019      	str	r1, [r3, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d0d1      	beq.n	8009fa6 <ai_platform_network_init+0xf6>
 800a002:	e7fe      	b.n	800a002 <ai_platform_network_init+0x152>
 800a004:	8921      	ldrh	r1, [r4, #8]
 800a006:	88e2      	ldrh	r2, [r4, #6]
 800a008:	68e3      	ldr	r3, [r4, #12]
 800a00a:	fb02 f201 	mul.w	r2, r2, r1
 800a00e:	fb03 f302 	mul.w	r3, r3, r2
 800a012:	2b00      	cmp	r3, #0
 800a014:	f43f af78 	beq.w	8009f08 <ai_platform_network_init+0x58>
 800a018:	f105 0010 	add.w	r0, r5, #16
 800a01c:	2212      	movs	r2, #18
 800a01e:	2110      	movs	r1, #16
 800a020:	f000 fb92 	bl	800a748 <core_set_error>
 800a024:	4630      	mov	r0, r6
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	8c09      	ldrh	r1, [r1, #32]
 800a02a:	8be2      	ldrh	r2, [r4, #30]
 800a02c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a02e:	fb02 f201 	mul.w	r2, r2, r1
 800a032:	fb03 f302 	mul.w	r3, r3, r2
 800a036:	2b00      	cmp	r3, #0
 800a038:	f43f af64 	beq.w	8009f04 <ai_platform_network_init+0x54>
 800a03c:	2213      	movs	r2, #19
 800a03e:	2110      	movs	r1, #16
 800a040:	3010      	adds	r0, #16
 800a042:	f000 fb81 	bl	800a748 <core_set_error>
 800a046:	4638      	mov	r0, r7
 800a048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a04a:	2211      	movs	r2, #17
 800a04c:	2110      	movs	r1, #16
 800a04e:	3010      	adds	r0, #16
 800a050:	f000 fb7a 	bl	800a748 <core_set_error>
 800a054:	4620      	mov	r0, r4
 800a056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a058:	a1c00100 	.word	0xa1c00100
 800a05c:	e0002000 	.word	0xe0002000
 800a060:	e0042000 	.word	0xe0042000
 800a064:	5c001000 	.word	0x5c001000
 800a068:	40023008 	.word	0x40023008
 800a06c:	40023000 	.word	0x40023000
 800a070:	f407a5c2 	.word	0xf407a5c2
 800a074:	b5e8b5cd 	.word	0xb5e8b5cd
 800a078:	58024c08 	.word	0x58024c08
 800a07c:	58024c00 	.word	0x58024c00

0800a080 <ai_platform_network_post_init>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	b118      	cbz	r0, 800a08c <ai_platform_network_post_init+0xc>
 800a084:	4b4a      	ldr	r3, [pc, #296]	; (800a1b0 <ai_platform_network_post_init+0x130>)
 800a086:	6802      	ldr	r2, [r0, #0]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d029      	beq.n	800a0e0 <ai_platform_network_post_init+0x60>
 800a08c:	4a49      	ldr	r2, [pc, #292]	; (800a1b4 <ai_platform_network_post_init+0x134>)
 800a08e:	494a      	ldr	r1, [pc, #296]	; (800a1b8 <ai_platform_network_post_init+0x138>)
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	680b      	ldr	r3, [r1, #0]
 800a09a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a09e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0a2:	185a      	adds	r2, r3, r1
 800a0a4:	2a01      	cmp	r2, #1
 800a0a6:	d90c      	bls.n	800a0c2 <ai_platform_network_post_init+0x42>
 800a0a8:	f240 4249 	movw	r2, #1097	; 0x449
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d008      	beq.n	800a0c2 <ai_platform_network_post_init+0x42>
 800a0b0:	4b42      	ldr	r3, [pc, #264]	; (800a1bc <ai_platform_network_post_init+0x13c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a0bc:	d044      	beq.n	800a148 <ai_platform_network_post_init+0xc8>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	bd38      	pop	{r3, r4, r5, pc}
 800a0c2:	4b3f      	ldr	r3, [pc, #252]	; (800a1c0 <ai_platform_network_post_init+0x140>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	680b      	ldr	r3, [r1, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1fc      	bne.n	800a0ca <ai_platform_network_post_init+0x4a>
 800a0d0:	4b3c      	ldr	r3, [pc, #240]	; (800a1c4 <ai_platform_network_post_init+0x144>)
 800a0d2:	493d      	ldr	r1, [pc, #244]	; (800a1c8 <ai_platform_network_post_init+0x148>)
 800a0d4:	4a3d      	ldr	r2, [pc, #244]	; (800a1cc <ai_platform_network_post_init+0x14c>)
 800a0d6:	6019      	str	r1, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d0ef      	beq.n	800a0be <ai_platform_network_post_init+0x3e>
 800a0de:	e7fe      	b.n	800a0de <ai_platform_network_post_init+0x5e>
 800a0e0:	4a34      	ldr	r2, [pc, #208]	; (800a1b4 <ai_platform_network_post_init+0x134>)
 800a0e2:	4935      	ldr	r1, [pc, #212]	; (800a1b8 <ai_platform_network_post_init+0x138>)
 800a0e4:	6813      	ldr	r3, [r2, #0]
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a0f0:	680b      	ldr	r3, [r1, #0]
 800a0f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a0f6:	189a      	adds	r2, r3, r2
 800a0f8:	2a01      	cmp	r2, #1
 800a0fa:	d94a      	bls.n	800a192 <ai_platform_network_post_init+0x112>
 800a0fc:	f240 4249 	movw	r2, #1097	; 0x449
 800a100:	4293      	cmp	r3, r2
 800a102:	d046      	beq.n	800a192 <ai_platform_network_post_init+0x112>
 800a104:	4b2d      	ldr	r3, [pc, #180]	; (800a1bc <ai_platform_network_post_init+0x13c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a10c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a110:	d030      	beq.n	800a174 <ai_platform_network_post_init+0xf4>
 800a112:	68c3      	ldr	r3, [r0, #12]
 800a114:	4604      	mov	r4, r0
 800a116:	f013 0502 	ands.w	r5, r3, #2
 800a11a:	d024      	beq.n	800a166 <ai_platform_network_post_init+0xe6>
 800a11c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800a11e:	b18b      	cbz	r3, 800a144 <ai_platform_network_post_init+0xc4>
 800a120:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800a122:	b90d      	cbnz	r5, 800a128 <ai_platform_network_post_init+0xa8>
 800a124:	e00e      	b.n	800a144 <ai_platform_network_post_init+0xc4>
 800a126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a128:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800a12a:	4629      	mov	r1, r5
 800a12c:	2000      	movs	r0, #0
 800a12e:	4798      	blx	r3
 800a130:	68ea      	ldr	r2, [r5, #12]
 800a132:	1b53      	subs	r3, r2, r5
 800a134:	4615      	mov	r5, r2
 800a136:	bf18      	it	ne
 800a138:	2301      	movne	r3, #1
 800a13a:	2a00      	cmp	r2, #0
 800a13c:	bf08      	it	eq
 800a13e:	2300      	moveq	r3, #0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1f0      	bne.n	800a126 <ai_platform_network_post_init+0xa6>
 800a144:	2001      	movs	r0, #1
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	4b21      	ldr	r3, [pc, #132]	; (800a1d0 <ai_platform_network_post_init+0x150>)
 800a14a:	2201      	movs	r2, #1
 800a14c:	4619      	mov	r1, r3
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	680b      	ldr	r3, [r1, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1fc      	bne.n	800a150 <ai_platform_network_post_init+0xd0>
 800a156:	4b1f      	ldr	r3, [pc, #124]	; (800a1d4 <ai_platform_network_post_init+0x154>)
 800a158:	491b      	ldr	r1, [pc, #108]	; (800a1c8 <ai_platform_network_post_init+0x148>)
 800a15a:	4a1c      	ldr	r2, [pc, #112]	; (800a1cc <ai_platform_network_post_init+0x14c>)
 800a15c:	6019      	str	r1, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4293      	cmp	r3, r2
 800a162:	d0ac      	beq.n	800a0be <ai_platform_network_post_init+0x3e>
 800a164:	e7fe      	b.n	800a164 <ai_platform_network_post_init+0xe4>
 800a166:	2210      	movs	r2, #16
 800a168:	2111      	movs	r1, #17
 800a16a:	3010      	adds	r0, #16
 800a16c:	f000 faec 	bl	800a748 <core_set_error>
 800a170:	4628      	mov	r0, r5
 800a172:	bd38      	pop	{r3, r4, r5, pc}
 800a174:	4b16      	ldr	r3, [pc, #88]	; (800a1d0 <ai_platform_network_post_init+0x150>)
 800a176:	2201      	movs	r2, #1
 800a178:	4619      	mov	r1, r3
 800a17a:	601a      	str	r2, [r3, #0]
 800a17c:	680b      	ldr	r3, [r1, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1fc      	bne.n	800a17c <ai_platform_network_post_init+0xfc>
 800a182:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <ai_platform_network_post_init+0x154>)
 800a184:	4910      	ldr	r1, [pc, #64]	; (800a1c8 <ai_platform_network_post_init+0x148>)
 800a186:	4a11      	ldr	r2, [pc, #68]	; (800a1cc <ai_platform_network_post_init+0x14c>)
 800a188:	6019      	str	r1, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d0c0      	beq.n	800a112 <ai_platform_network_post_init+0x92>
 800a190:	e7fe      	b.n	800a190 <ai_platform_network_post_init+0x110>
 800a192:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <ai_platform_network_post_init+0x140>)
 800a194:	2201      	movs	r2, #1
 800a196:	4619      	mov	r1, r3
 800a198:	601a      	str	r2, [r3, #0]
 800a19a:	680b      	ldr	r3, [r1, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1fc      	bne.n	800a19a <ai_platform_network_post_init+0x11a>
 800a1a0:	4b08      	ldr	r3, [pc, #32]	; (800a1c4 <ai_platform_network_post_init+0x144>)
 800a1a2:	4909      	ldr	r1, [pc, #36]	; (800a1c8 <ai_platform_network_post_init+0x148>)
 800a1a4:	4a09      	ldr	r2, [pc, #36]	; (800a1cc <ai_platform_network_post_init+0x14c>)
 800a1a6:	6019      	str	r1, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d0b1      	beq.n	800a112 <ai_platform_network_post_init+0x92>
 800a1ae:	e7fe      	b.n	800a1ae <ai_platform_network_post_init+0x12e>
 800a1b0:	a1c00100 	.word	0xa1c00100
 800a1b4:	e0002000 	.word	0xe0002000
 800a1b8:	e0042000 	.word	0xe0042000
 800a1bc:	5c001000 	.word	0x5c001000
 800a1c0:	40023008 	.word	0x40023008
 800a1c4:	40023000 	.word	0x40023000
 800a1c8:	f407a5c2 	.word	0xf407a5c2
 800a1cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800a1d0:	58024c08 	.word	0x58024c08
 800a1d4:	58024c00 	.word	0x58024c00

0800a1d8 <ai_platform_network_process>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	4692      	mov	sl, r2
 800a1de:	b083      	sub	sp, #12
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	b120      	cbz	r0, 800a1ee <ai_platform_network_process+0x16>
 800a1e4:	4b86      	ldr	r3, [pc, #536]	; (800a400 <ai_platform_network_process+0x228>)
 800a1e6:	6802      	ldr	r2, [r0, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	bf18      	it	ne
 800a1ec:	2400      	movne	r4, #0
 800a1ee:	4a85      	ldr	r2, [pc, #532]	; (800a404 <ai_platform_network_process+0x22c>)
 800a1f0:	4885      	ldr	r0, [pc, #532]	; (800a408 <ai_platform_network_process+0x230>)
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	f023 0301 	bic.w	r3, r3, #1
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	6803      	ldr	r3, [r0, #0]
 800a1fc:	f46f 608a 	mvn.w	r0, #1104	; 0x450
 800a200:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a204:	181a      	adds	r2, r3, r0
 800a206:	2a01      	cmp	r2, #1
 800a208:	f240 80c6 	bls.w	800a398 <ai_platform_network_process+0x1c0>
 800a20c:	f240 4249 	movw	r2, #1097	; 0x449
 800a210:	4293      	cmp	r3, r2
 800a212:	f000 80c1 	beq.w	800a398 <ai_platform_network_process+0x1c0>
 800a216:	4b7d      	ldr	r3, [pc, #500]	; (800a40c <ai_platform_network_process+0x234>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a21e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a222:	f000 80a9 	beq.w	800a378 <ai_platform_network_process+0x1a0>
 800a226:	2c00      	cmp	r4, #0
 800a228:	f000 80db 	beq.w	800a3e2 <ai_platform_network_process+0x20a>
 800a22c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a230:	68e0      	ldr	r0, [r4, #12]
 800a232:	461a      	mov	r2, r3
 800a234:	f000 0003 	and.w	r0, r0, #3
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f000 80bd 	beq.w	800a3b8 <ai_platform_network_process+0x1e0>
 800a23e:	2600      	movs	r6, #0
 800a240:	2803      	cmp	r0, #3
 800a242:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a244:	6166      	str	r6, [r4, #20]
 800a246:	f040 80c6 	bne.w	800a3d6 <ai_platform_network_process+0x1fe>
 800a24a:	2900      	cmp	r1, #0
 800a24c:	f000 80b7 	beq.w	800a3be <ai_platform_network_process+0x1e6>
 800a250:	fab5 f085 	clz	r0, r5
 800a254:	0940      	lsrs	r0, r0, #5
 800a256:	2800      	cmp	r0, #0
 800a258:	f040 80b1 	bne.w	800a3be <ai_platform_network_process+0x1e6>
 800a25c:	882e      	ldrh	r6, [r5, #0]
 800a25e:	2e00      	cmp	r6, #0
 800a260:	f000 80ad 	beq.w	800a3be <ai_platform_network_process+0x1e6>
 800a264:	888f      	ldrh	r7, [r1, #4]
 800a266:	686e      	ldr	r6, [r5, #4]
 800a268:	9701      	str	r7, [sp, #4]
 800a26a:	2e00      	cmp	r6, #0
 800a26c:	f000 825f 	beq.w	800a72e <ai_platform_network_process+0x556>
 800a270:	6836      	ldr	r6, [r6, #0]
 800a272:	2e00      	cmp	r6, #0
 800a274:	f000 825b 	beq.w	800a72e <ai_platform_network_process+0x556>
 800a278:	68ab      	ldr	r3, [r5, #8]
 800a27a:	f8d3 9000 	ldr.w	r9, [r3]
 800a27e:	f1b9 0f00 	cmp.w	r9, #0
 800a282:	f000 809c 	beq.w	800a3be <ai_platform_network_process+0x1e6>
 800a286:	460f      	mov	r7, r1
 800a288:	4680      	mov	r8, r0
 800a28a:	e05e      	b.n	800a34a <ai_platform_network_process+0x172>
 800a28c:	68f3      	ldr	r3, [r6, #12]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	455a      	cmp	r2, fp
 800a292:	d168      	bne.n	800a366 <ai_platform_network_process+0x18e>
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	4572      	cmp	r2, lr
 800a298:	d165      	bne.n	800a366 <ai_platform_network_process+0x18e>
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	459c      	cmp	ip, r3
 800a29e:	d162      	bne.n	800a366 <ai_platform_network_process+0x18e>
 800a2a0:	6800      	ldr	r0, [r0, #0]
 800a2a2:	f001 f821 	bl	800b2e8 <ai_array_get_byte_size>
 800a2a6:	68f2      	ldr	r2, [r6, #12]
 800a2a8:	6973      	ldr	r3, [r6, #20]
 800a2aa:	68d2      	ldr	r2, [r2, #12]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	fb03 f302 	mul.w	r3, r3, r2
 800a2b2:	4298      	cmp	r0, r3
 800a2b4:	d357      	bcc.n	800a366 <ai_platform_network_process+0x18e>
 800a2b6:	69b3      	ldr	r3, [r6, #24]
 800a2b8:	6818      	ldr	r0, [r3, #0]
 800a2ba:	f000 ffc9 	bl	800b250 <ai_array_to_buffer_fmt>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	4043      	eors	r3, r0
 800a2c2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a2c6:	f040 8229 	bne.w	800a71c <ai_platform_network_process+0x544>
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 821d 	beq.w	800a70c <ai_platform_network_process+0x534>
 800a2d2:	88bb      	ldrh	r3, [r7, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 808a 	beq.w	800a3ee <ai_platform_network_process+0x216>
 800a2da:	9a01      	ldr	r2, [sp, #4]
 800a2dc:	68f1      	ldr	r1, [r6, #12]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	68c9      	ldr	r1, [r1, #12]
 800a2e2:	bf38      	it	cc
 800a2e4:	461a      	movcc	r2, r3
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	6972      	ldr	r2, [r6, #20]
 800a2ea:	68d3      	ldr	r3, [r2, #12]
 800a2ec:	fb03 f301 	mul.w	r3, r3, r1
 800a2f0:	f8c9 3008 	str.w	r3, [r9, #8]
 800a2f4:	88ba      	ldrh	r2, [r7, #4]
 800a2f6:	fb03 f302 	mul.w	r3, r3, r2
 800a2fa:	f8c9 300c 	str.w	r3, [r9, #12]
 800a2fe:	6939      	ldr	r1, [r7, #16]
 800a300:	f8c9 1004 	str.w	r1, [r9, #4]
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	4413      	add	r3, r2
 800a308:	f8c9 3000 	str.w	r3, [r9]
 800a30c:	69b0      	ldr	r0, [r6, #24]
 800a30e:	6803      	ldr	r3, [r0, #0]
 800a310:	009a      	lsls	r2, r3, #2
 800a312:	d408      	bmi.n	800a326 <ai_platform_network_process+0x14e>
 800a314:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a318:	1a9b      	subs	r3, r3, r2
 800a31a:	4419      	add	r1, r3
 800a31c:	6081      	str	r1, [r0, #8]
 800a31e:	69b3      	ldr	r3, [r6, #24]
 800a320:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	f108 0801 	add.w	r8, r8, #1
 800a32a:	882b      	ldrh	r3, [r5, #0]
 800a32c:	4598      	cmp	r8, r3
 800a32e:	d27b      	bcs.n	800a428 <ai_platform_network_process+0x250>
 800a330:	686b      	ldr	r3, [r5, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d078      	beq.n	800a428 <ai_platform_network_process+0x250>
 800a336:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d074      	beq.n	800a428 <ai_platform_network_process+0x250>
 800a33e:	68ab      	ldr	r3, [r5, #8]
 800a340:	3718      	adds	r7, #24
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	eb13 1908 	adds.w	r9, r3, r8, lsl #4
 800a348:	d039      	beq.n	800a3be <ai_platform_network_process+0x1e6>
 800a34a:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 800a34e:	f8b7 b006 	ldrh.w	fp, [r7, #6]
 800a352:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a356:	fb0b f30e 	mul.w	r3, fp, lr
 800a35a:	69b0      	ldr	r0, [r6, #24]
 800a35c:	fb0c f303 	mul.w	r3, ip, r3
 800a360:	6841      	ldr	r1, [r0, #4]
 800a362:	4299      	cmp	r1, r3
 800a364:	d292      	bcs.n	800a28c <ai_platform_network_process+0xb4>
 800a366:	f104 0010 	add.w	r0, r4, #16
 800a36a:	2218      	movs	r2, #24
 800a36c:	2112      	movs	r1, #18
 800a36e:	f04f 0b00 	mov.w	fp, #0
 800a372:	f000 f9e9 	bl	800a748 <core_set_error>
 800a376:	e02a      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a378:	4b25      	ldr	r3, [pc, #148]	; (800a410 <ai_platform_network_process+0x238>)
 800a37a:	2201      	movs	r2, #1
 800a37c:	4618      	mov	r0, r3
 800a37e:	601a      	str	r2, [r3, #0]
 800a380:	6803      	ldr	r3, [r0, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1fc      	bne.n	800a380 <ai_platform_network_process+0x1a8>
 800a386:	4b23      	ldr	r3, [pc, #140]	; (800a414 <ai_platform_network_process+0x23c>)
 800a388:	4823      	ldr	r0, [pc, #140]	; (800a418 <ai_platform_network_process+0x240>)
 800a38a:	4a24      	ldr	r2, [pc, #144]	; (800a41c <ai_platform_network_process+0x244>)
 800a38c:	6018      	str	r0, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4293      	cmp	r3, r2
 800a392:	f43f af48 	beq.w	800a226 <ai_platform_network_process+0x4e>
 800a396:	e7fe      	b.n	800a396 <ai_platform_network_process+0x1be>
 800a398:	4b21      	ldr	r3, [pc, #132]	; (800a420 <ai_platform_network_process+0x248>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	4618      	mov	r0, r3
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	6803      	ldr	r3, [r0, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1fc      	bne.n	800a3a0 <ai_platform_network_process+0x1c8>
 800a3a6:	4b1f      	ldr	r3, [pc, #124]	; (800a424 <ai_platform_network_process+0x24c>)
 800a3a8:	481b      	ldr	r0, [pc, #108]	; (800a418 <ai_platform_network_process+0x240>)
 800a3aa:	4a1c      	ldr	r2, [pc, #112]	; (800a41c <ai_platform_network_process+0x244>)
 800a3ac:	6018      	str	r0, [r3, #0]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	f43f af38 	beq.w	800a226 <ai_platform_network_process+0x4e>
 800a3b6:	e7fe      	b.n	800a3b6 <ai_platform_network_process+0x1de>
 800a3b8:	2803      	cmp	r0, #3
 800a3ba:	6163      	str	r3, [r4, #20]
 800a3bc:	d10b      	bne.n	800a3d6 <ai_platform_network_process+0x1fe>
 800a3be:	f04f 0b00 	mov.w	fp, #0
 800a3c2:	f104 0010 	add.w	r0, r4, #16
 800a3c6:	2217      	movs	r2, #23
 800a3c8:	2112      	movs	r1, #18
 800a3ca:	f000 f9bd 	bl	800a748 <core_set_error>
 800a3ce:	4658      	mov	r0, fp
 800a3d0:	b003      	add	sp, #12
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	f104 0010 	add.w	r0, r4, #16
 800a3da:	2230      	movs	r2, #48	; 0x30
 800a3dc:	2111      	movs	r1, #17
 800a3de:	f000 f9b3 	bl	800a748 <core_set_error>
 800a3e2:	f04f 0b00 	mov.w	fp, #0
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	b003      	add	sp, #12
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ee:	f104 0010 	add.w	r0, r4, #16
 800a3f2:	2221      	movs	r2, #33	; 0x21
 800a3f4:	2112      	movs	r1, #18
 800a3f6:	469b      	mov	fp, r3
 800a3f8:	f000 f9a6 	bl	800a748 <core_set_error>
 800a3fc:	e7e7      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a3fe:	bf00      	nop
 800a400:	a1c00100 	.word	0xa1c00100
 800a404:	e0002000 	.word	0xe0002000
 800a408:	e0042000 	.word	0xe0042000
 800a40c:	5c001000 	.word	0x5c001000
 800a410:	58024c08 	.word	0x58024c08
 800a414:	58024c00 	.word	0x58024c00
 800a418:	f407a5c2 	.word	0xf407a5c2
 800a41c:	b5e8b5cd 	.word	0xb5e8b5cd
 800a420:	40023008 	.word	0x40023008
 800a424:	40023000 	.word	0x40023000
 800a428:	f1ba 0f00 	cmp.w	sl, #0
 800a42c:	f000 808c 	beq.w	800a548 <ai_platform_network_process+0x370>
 800a430:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a434:	2b01      	cmp	r3, #1
 800a436:	f240 813b 	bls.w	800a6b0 <ai_platform_network_process+0x4d8>
 800a43a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a43c:	f115 0f0c 	cmn.w	r5, #12
 800a440:	f000 8136 	beq.w	800a6b0 <ai_platform_network_process+0x4d8>
 800a444:	89ab      	ldrh	r3, [r5, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 8132 	beq.w	800a6b0 <ai_platform_network_process+0x4d8>
 800a44c:	4656      	mov	r6, sl
 800a44e:	f04f 0900 	mov.w	r9, #0
 800a452:	9400      	str	r4, [sp, #0]
 800a454:	4599      	cmp	r9, r3
 800a456:	d274      	bcs.n	800a542 <ai_platform_network_process+0x36a>
 800a458:	692b      	ldr	r3, [r5, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d071      	beq.n	800a542 <ai_platform_network_process+0x36a>
 800a45e:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
 800a462:	2f00      	cmp	r7, #0
 800a464:	d06d      	beq.n	800a542 <ai_platform_network_process+0x36a>
 800a466:	696b      	ldr	r3, [r5, #20]
 800a468:	ea4f 1409 	mov.w	r4, r9, lsl #4
 800a46c:	f8d3 8000 	ldr.w	r8, [r3]
 800a470:	eb18 0a04 	adds.w	sl, r8, r4
 800a474:	f000 8125 	beq.w	800a6c2 <ai_platform_network_process+0x4ea>
 800a478:	f8b6 e008 	ldrh.w	lr, [r6, #8]
 800a47c:	f8b6 b006 	ldrh.w	fp, [r6, #6]
 800a480:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800a484:	fb0b f30e 	mul.w	r3, fp, lr
 800a488:	69b8      	ldr	r0, [r7, #24]
 800a48a:	fb0c f303 	mul.w	r3, ip, r3
 800a48e:	6841      	ldr	r1, [r0, #4]
 800a490:	4299      	cmp	r1, r3
 800a492:	f0c0 810c 	bcc.w	800a6ae <ai_platform_network_process+0x4d6>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	455a      	cmp	r2, fp
 800a49c:	f040 8107 	bne.w	800a6ae <ai_platform_network_process+0x4d6>
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	4572      	cmp	r2, lr
 800a4a4:	f040 8103 	bne.w	800a6ae <ai_platform_network_process+0x4d6>
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	459c      	cmp	ip, r3
 800a4ac:	f040 80ff 	bne.w	800a6ae <ai_platform_network_process+0x4d6>
 800a4b0:	6800      	ldr	r0, [r0, #0]
 800a4b2:	f000 ff19 	bl	800b2e8 <ai_array_get_byte_size>
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	68d2      	ldr	r2, [r2, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	fb03 f302 	mul.w	r3, r3, r2
 800a4c2:	4298      	cmp	r0, r3
 800a4c4:	f0c0 80f3 	bcc.w	800a6ae <ai_platform_network_process+0x4d6>
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	f000 fec0 	bl	800b250 <ai_array_to_buffer_fmt>
 800a4d0:	6833      	ldr	r3, [r6, #0]
 800a4d2:	4043      	eors	r3, r0
 800a4d4:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800a4d8:	f040 810e 	bne.w	800a6f8 <ai_platform_network_process+0x520>
 800a4dc:	6933      	ldr	r3, [r6, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 8101 	beq.w	800a6e6 <ai_platform_network_process+0x50e>
 800a4e4:	88b3      	ldrh	r3, [r6, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 80f4 	beq.w	800a6d4 <ai_platform_network_process+0x4fc>
 800a4ec:	9a01      	ldr	r2, [sp, #4]
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	68c9      	ldr	r1, [r1, #12]
 800a4f4:	bf38      	it	cc
 800a4f6:	461a      	movcc	r2, r3
 800a4f8:	9201      	str	r2, [sp, #4]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	68d3      	ldr	r3, [r2, #12]
 800a4fe:	fb03 f301 	mul.w	r3, r3, r1
 800a502:	f8ca 3008 	str.w	r3, [sl, #8]
 800a506:	88b2      	ldrh	r2, [r6, #4]
 800a508:	fb03 f302 	mul.w	r3, r3, r2
 800a50c:	f8ca 300c 	str.w	r3, [sl, #12]
 800a510:	6931      	ldr	r1, [r6, #16]
 800a512:	f8ca 1004 	str.w	r1, [sl, #4]
 800a516:	6932      	ldr	r2, [r6, #16]
 800a518:	4413      	add	r3, r2
 800a51a:	f848 3004 	str.w	r3, [r8, r4]
 800a51e:	69b8      	ldr	r0, [r7, #24]
 800a520:	6803      	ldr	r3, [r0, #0]
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	d408      	bmi.n	800a538 <ai_platform_network_process+0x360>
 800a526:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a52a:	1a9b      	subs	r3, r3, r2
 800a52c:	4419      	add	r1, r3
 800a52e:	6081      	str	r1, [r0, #8]
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a536:	60da      	str	r2, [r3, #12]
 800a538:	f109 0901 	add.w	r9, r9, #1
 800a53c:	3618      	adds	r6, #24
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	e788      	b.n	800a454 <ai_platform_network_process+0x27c>
 800a542:	e9dd 4300 	ldrd	r4, r3, [sp]
 800a546:	82a3      	strh	r3, [r4, #20]
 800a548:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a54c:	2a00      	cmp	r2, #0
 800a54e:	f000 80a9 	beq.w	800a6a4 <ai_platform_network_process+0x4cc>
 800a552:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a554:	2a01      	cmp	r2, #1
 800a556:	f240 80a8 	bls.w	800a6aa <ai_platform_network_process+0x4d2>
 800a55a:	f105 060c 	add.w	r6, r5, #12
 800a55e:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800a562:	8aa3      	ldrh	r3, [r4, #20]
 800a564:	455b      	cmp	r3, fp
 800a566:	f67f af32 	bls.w	800a3ce <ai_platform_network_process+0x1f6>
 800a56a:	9400      	str	r4, [sp, #0]
 800a56c:	2d00      	cmp	r5, #0
 800a56e:	d037      	beq.n	800a5e0 <ai_platform_network_process+0x408>
 800a570:	882b      	ldrh	r3, [r5, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d034      	beq.n	800a5e0 <ai_platform_network_process+0x408>
 800a576:	686b      	ldr	r3, [r5, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d031      	beq.n	800a5e0 <ai_platform_network_process+0x408>
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d02e      	beq.n	800a5e0 <ai_platform_network_process+0x408>
 800a582:	f04f 0800 	mov.w	r8, #0
 800a586:	e01a      	b.n	800a5be <ai_platform_network_process+0x3e6>
 800a588:	68d4      	ldr	r4, [r2, #12]
 800a58a:	1b00      	subs	r0, r0, r4
 800a58c:	4401      	add	r1, r0
 800a58e:	6091      	str	r1, [r2, #8]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	60da      	str	r2, [r3, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f108 0801 	add.w	r8, r8, #1
 800a59c:	68b9      	ldr	r1, [r7, #8]
 800a59e:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a5a2:	440b      	add	r3, r1
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d301      	bcc.n	800a5ac <ai_platform_network_process+0x3d4>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	607b      	str	r3, [r7, #4]
 800a5ae:	882b      	ldrh	r3, [r5, #0]
 800a5b0:	4598      	cmp	r8, r3
 800a5b2:	d215      	bcs.n	800a5e0 <ai_platform_network_process+0x408>
 800a5b4:	686b      	ldr	r3, [r5, #4]
 800a5b6:	b19b      	cbz	r3, 800a5e0 <ai_platform_network_process+0x408>
 800a5b8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a5bc:	b183      	cbz	r3, 800a5e0 <ai_platform_network_process+0x408>
 800a5be:	68a9      	ldr	r1, [r5, #8]
 800a5c0:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a5c4:	699a      	ldr	r2, [r3, #24]
 800a5c6:	f8d1 a000 	ldr.w	sl, [r1]
 800a5ca:	6814      	ldr	r4, [r2, #0]
 800a5cc:	eb0a 0709 	add.w	r7, sl, r9
 800a5d0:	6890      	ldr	r0, [r2, #8]
 800a5d2:	00a4      	lsls	r4, r4, #2
 800a5d4:	6879      	ldr	r1, [r7, #4]
 800a5d6:	d5d7      	bpl.n	800a588 <ai_platform_network_process+0x3b0>
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	f001 f859 	bl	800b690 <memcpy>
 800a5de:	e7da      	b.n	800a596 <ai_platform_network_process+0x3be>
 800a5e0:	9800      	ldr	r0, [sp, #0]
 800a5e2:	f000 fdfb 	bl	800b1dc <ai_layers_forward_all>
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	d04a      	beq.n	800a680 <ai_platform_network_process+0x4a8>
 800a5ea:	8833      	ldrh	r3, [r6, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d047      	beq.n	800a680 <ai_platform_network_process+0x4a8>
 800a5f0:	6873      	ldr	r3, [r6, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d044      	beq.n	800a680 <ai_platform_network_process+0x4a8>
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d041      	beq.n	800a680 <ai_platform_network_process+0x4a8>
 800a5fc:	f04f 0800 	mov.w	r8, #0
 800a600:	e019      	b.n	800a636 <ai_platform_network_process+0x45e>
 800a602:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a606:	4291      	cmp	r1, r2
 800a608:	d301      	bcc.n	800a60e <ai_platform_network_process+0x436>
 800a60a:	68f9      	ldr	r1, [r7, #12]
 800a60c:	1a51      	subs	r1, r2, r1
 800a60e:	6079      	str	r1, [r7, #4]
 800a610:	f108 0801 	add.w	r8, r8, #1
 800a614:	6998      	ldr	r0, [r3, #24]
 800a616:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
 800a61a:	1b12      	subs	r2, r2, r4
 800a61c:	440a      	add	r2, r1
 800a61e:	6082      	str	r2, [r0, #8]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	699b      	ldr	r3, [r3, #24]
 800a624:	60da      	str	r2, [r3, #12]
 800a626:	8833      	ldrh	r3, [r6, #0]
 800a628:	4598      	cmp	r8, r3
 800a62a:	d229      	bcs.n	800a680 <ai_platform_network_process+0x4a8>
 800a62c:	6873      	ldr	r3, [r6, #4]
 800a62e:	b33b      	cbz	r3, 800a680 <ai_platform_network_process+0x4a8>
 800a630:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a634:	b323      	cbz	r3, 800a680 <ai_platform_network_process+0x4a8>
 800a636:	68b2      	ldr	r2, [r6, #8]
 800a638:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800a63c:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800a640:	f8d2 a000 	ldr.w	sl, [r2]
 800a644:	f8de 1000 	ldr.w	r1, [lr]
 800a648:	eb0a 0709 	add.w	r7, sl, r9
 800a64c:	f011 5f00 	tst.w	r1, #536870912	; 0x20000000
 800a650:	e9d7 0201 	ldrd	r0, r2, [r7, #4]
 800a654:	eb00 0102 	add.w	r1, r0, r2
 800a658:	d0d3      	beq.n	800a602 <ai_platform_network_process+0x42a>
 800a65a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800a65e:	f001 f817 	bl	800b690 <memcpy>
 800a662:	f85a 2009 	ldr.w	r2, [sl, r9]
 800a666:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
 800a66a:	440b      	add	r3, r1
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d301      	bcc.n	800a674 <ai_platform_network_process+0x49c>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	607b      	str	r3, [r7, #4]
 800a676:	f108 0801 	add.w	r8, r8, #1
 800a67a:	8833      	ldrh	r3, [r6, #0]
 800a67c:	4598      	cmp	r8, r3
 800a67e:	d3d5      	bcc.n	800a62c <ai_platform_network_process+0x454>
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800a686:	461a      	mov	r2, r3
 800a688:	8a9b      	ldrh	r3, [r3, #20]
 800a68a:	f10b 0b01 	add.w	fp, fp, #1
 800a68e:	fa1f fb8b 	uxth.w	fp, fp
 800a692:	455b      	cmp	r3, fp
 800a694:	f8a2 b016 	strh.w	fp, [r2, #22]
 800a698:	f63f af68 	bhi.w	800a56c <ai_platform_network_process+0x394>
 800a69c:	4658      	mov	r0, fp
 800a69e:	b003      	add	sp, #12
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	4615      	mov	r5, r2
 800a6a6:	4616      	mov	r6, r2
 800a6a8:	e759      	b.n	800a55e <ai_platform_network_process+0x386>
 800a6aa:	2600      	movs	r6, #0
 800a6ac:	e757      	b.n	800a55e <ai_platform_network_process+0x386>
 800a6ae:	9c00      	ldr	r4, [sp, #0]
 800a6b0:	f104 0010 	add.w	r0, r4, #16
 800a6b4:	2218      	movs	r2, #24
 800a6b6:	2113      	movs	r1, #19
 800a6b8:	f04f 0b00 	mov.w	fp, #0
 800a6bc:	f000 f844 	bl	800a748 <core_set_error>
 800a6c0:	e685      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a6c2:	9c00      	ldr	r4, [sp, #0]
 800a6c4:	2217      	movs	r2, #23
 800a6c6:	2113      	movs	r1, #19
 800a6c8:	46d3      	mov	fp, sl
 800a6ca:	f104 0010 	add.w	r0, r4, #16
 800a6ce:	f000 f83b 	bl	800a748 <core_set_error>
 800a6d2:	e67c      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a6d4:	9c00      	ldr	r4, [sp, #0]
 800a6d6:	2221      	movs	r2, #33	; 0x21
 800a6d8:	2113      	movs	r1, #19
 800a6da:	469b      	mov	fp, r3
 800a6dc:	f104 0010 	add.w	r0, r4, #16
 800a6e0:	f000 f832 	bl	800a748 <core_set_error>
 800a6e4:	e673      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a6e6:	9c00      	ldr	r4, [sp, #0]
 800a6e8:	2217      	movs	r2, #23
 800a6ea:	2113      	movs	r1, #19
 800a6ec:	469b      	mov	fp, r3
 800a6ee:	f104 0010 	add.w	r0, r4, #16
 800a6f2:	f000 f829 	bl	800a748 <core_set_error>
 800a6f6:	e66a      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a6f8:	9c00      	ldr	r4, [sp, #0]
 800a6fa:	2219      	movs	r2, #25
 800a6fc:	2113      	movs	r1, #19
 800a6fe:	f04f 0b00 	mov.w	fp, #0
 800a702:	f104 0010 	add.w	r0, r4, #16
 800a706:	f000 f81f 	bl	800a748 <core_set_error>
 800a70a:	e660      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a70c:	f104 0010 	add.w	r0, r4, #16
 800a710:	2217      	movs	r2, #23
 800a712:	2112      	movs	r1, #18
 800a714:	469b      	mov	fp, r3
 800a716:	f000 f817 	bl	800a748 <core_set_error>
 800a71a:	e658      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a71c:	f104 0010 	add.w	r0, r4, #16
 800a720:	2219      	movs	r2, #25
 800a722:	2112      	movs	r1, #18
 800a724:	f04f 0b00 	mov.w	fp, #0
 800a728:	f000 f80e 	bl	800a748 <core_set_error>
 800a72c:	e64f      	b.n	800a3ce <ai_platform_network_process+0x1f6>
 800a72e:	f1ba 0f00 	cmp.w	sl, #0
 800a732:	f47f ae7f 	bne.w	800a434 <ai_platform_network_process+0x25c>
 800a736:	e70d      	b.n	800a554 <ai_platform_network_process+0x37c>

0800a738 <core_init>:
 800a738:	2001      	movs	r0, #1
 800a73a:	4770      	bx	lr

0800a73c <core_get_error>:
 800a73c:	4603      	mov	r3, r0
 800a73e:	2200      	movs	r2, #0
 800a740:	6800      	ldr	r0, [r0, #0]
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop

0800a748 <core_set_error>:
 800a748:	4603      	mov	r3, r0
 800a74a:	7800      	ldrb	r0, [r0, #0]
 800a74c:	b930      	cbnz	r0, 800a75c <core_set_error+0x14>
 800a74e:	7019      	strb	r1, [r3, #0]
 800a750:	2001      	movs	r0, #1
 800a752:	6819      	ldr	r1, [r3, #0]
 800a754:	f362 211f 	bfi	r1, r2, #8, #24
 800a758:	6019      	str	r1, [r3, #0]
 800a75a:	4770      	bx	lr
 800a75c:	2000      	movs	r0, #0
 800a75e:	4770      	bx	lr

0800a760 <ai_dict8_dot_array_f32>:
 800a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a764:	9d06      	ldr	r5, [sp, #24]
 800a766:	4c88      	ldr	r4, [pc, #544]	; (800a988 <ai_dict8_dot_array_f32+0x228>)
 800a768:	2d07      	cmp	r5, #7
 800a76a:	442c      	add	r4, r5
 800a76c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a770:	f104 0620 	add.w	r6, r4, #32
 800a774:	d817      	bhi.n	800a7a6 <ai_dict8_dot_array_f32+0x46>
 800a776:	42b3      	cmp	r3, r6
 800a778:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800a98c <ai_dict8_dot_array_f32+0x22c>
 800a77c:	d20b      	bcs.n	800a796 <ai_dict8_dot_array_f32+0x36>
 800a77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a782:	ecf3 7a01 	vldmia	r3!, {s15}
 800a786:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a78a:	42b3      	cmp	r3, r6
 800a78c:	edd4 6a00 	vldr	s13, [r4]
 800a790:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a794:	d3f3      	bcc.n	800a77e <ai_dict8_dot_array_f32+0x1e>
 800a796:	edd0 7a00 	vldr	s15, [r0]
 800a79a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a79e:	ed80 7a00 	vstr	s14, [r0]
 800a7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a6:	f001 0503 	and.w	r5, r1, #3
 800a7aa:	2d02      	cmp	r5, #2
 800a7ac:	f000 80f0 	beq.w	800a990 <ai_dict8_dot_array_f32+0x230>
 800a7b0:	2d03      	cmp	r5, #3
 800a7b2:	f000 81ff 	beq.w	800abb4 <ai_dict8_dot_array_f32+0x454>
 800a7b6:	2d01      	cmp	r5, #1
 800a7b8:	f000 81f0 	beq.w	800ab9c <ai_dict8_dot_array_f32+0x43c>
 800a7bc:	42a3      	cmp	r3, r4
 800a7be:	f200 81fc 	bhi.w	800abba <ai_dict8_dot_array_f32+0x45a>
 800a7c2:	1ae4      	subs	r4, r4, r3
 800a7c4:	f101 0810 	add.w	r8, r1, #16
 800a7c8:	f101 0508 	add.w	r5, r1, #8
 800a7cc:	f103 0720 	add.w	r7, r3, #32
 800a7d0:	0964      	lsrs	r4, r4, #5
 800a7d2:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800a98c <ai_dict8_dot_array_f32+0x22c>
 800a7d6:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 800a7da:	f815 ec07 	ldrb.w	lr, [r5, #-7]
 800a7de:	3508      	adds	r5, #8
 800a7e0:	f815 cc10 	ldrb.w	ip, [r5, #-16]
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800a7ea:	ed57 5a0f 	vldr	s11, [r7, #-60]	; 0xffffffc4
 800a7ee:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a7f2:	ed17 6a10 	vldr	s12, [r7, #-64]	; 0xffffffc0
 800a7f6:	edde 7a00 	vldr	s15, [lr]
 800a7fa:	ed57 6a0e 	vldr	s13, [r7, #-56]	; 0xffffffc8
 800a7fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a802:	eddc 5a00 	vldr	s11, [ip]
 800a806:	f815 cc0e 	ldrb.w	ip, [r5, #-14]
 800a80a:	ed17 5a0d 	vldr	s10, [r7, #-52]	; 0xffffffcc
 800a80e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800a812:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a816:	f815 ec0c 	ldrb.w	lr, [r5, #-12]
 800a81a:	ed9c 4a00 	vldr	s8, [ip]
 800a81e:	f815 cc0d 	ldrb.w	ip, [r5, #-13]
 800a822:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800a826:	ed17 6a0c 	vldr	s12, [r7, #-48]	; 0xffffffd0
 800a82a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a82e:	ed57 4a0b 	vldr	s9, [r7, #-44]	; 0xffffffd4
 800a832:	eee4 7a26 	vfma.f32	s15, s8, s13
 800a836:	ed57 5a0a 	vldr	s11, [r7, #-40]	; 0xffffffd8
 800a83a:	ed9c 4a00 	vldr	s8, [ip]
 800a83e:	f815 cc0b 	ldrb.w	ip, [r5, #-11]
 800a842:	ed57 6a09 	vldr	s13, [r7, #-36]	; 0xffffffdc
 800a846:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a84a:	eee4 7a05 	vfma.f32	s15, s8, s10
 800a84e:	ed9e 5a00 	vldr	s10, [lr]
 800a852:	ed9c 4a00 	vldr	s8, [ip]
 800a856:	f815 ec0a 	ldrb.w	lr, [r5, #-10]
 800a85a:	f815 cc09 	ldrb.w	ip, [r5, #-9]
 800a85e:	4545      	cmp	r5, r8
 800a860:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
 800a864:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800a868:	eee5 7a06 	vfma.f32	s15, s10, s12
 800a86c:	ed9e 5a00 	vldr	s10, [lr]
 800a870:	ed9c 6a00 	vldr	s12, [ip]
 800a874:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a878:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a87c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a880:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a884:	d1a9      	bne.n	800a7da <ai_dict8_dot_array_f32+0x7a>
 800a886:	3401      	adds	r4, #1
 800a888:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800a88c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800a890:	42b3      	cmp	r3, r6
 800a892:	d280      	bcs.n	800a796 <ai_dict8_dot_array_f32+0x36>
 800a894:	461c      	mov	r4, r3
 800a896:	780d      	ldrb	r5, [r1, #0]
 800a898:	ecf4 6a01 	vldmia	r4!, {s13}
 800a89c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	edd5 7a00 	vldr	s15, [r5]
 800a8a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8aa:	f67f af74 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a8ae:	784d      	ldrb	r5, [r1, #1]
 800a8b0:	f103 0408 	add.w	r4, r3, #8
 800a8b4:	edd3 6a01 	vldr	s13, [r3, #4]
 800a8b8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a8bc:	42a6      	cmp	r6, r4
 800a8be:	edd5 7a00 	vldr	s15, [r5]
 800a8c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8c6:	f67f af66 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a8ca:	788d      	ldrb	r5, [r1, #2]
 800a8cc:	f103 040c 	add.w	r4, r3, #12
 800a8d0:	edd3 6a02 	vldr	s13, [r3, #8]
 800a8d4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a8d8:	42a6      	cmp	r6, r4
 800a8da:	edd5 7a00 	vldr	s15, [r5]
 800a8de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8e2:	f67f af58 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a8e6:	78cd      	ldrb	r5, [r1, #3]
 800a8e8:	f103 0410 	add.w	r4, r3, #16
 800a8ec:	edd3 6a03 	vldr	s13, [r3, #12]
 800a8f0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a8f4:	42a6      	cmp	r6, r4
 800a8f6:	edd5 7a00 	vldr	s15, [r5]
 800a8fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8fe:	f67f af4a 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a902:	790d      	ldrb	r5, [r1, #4]
 800a904:	f103 0414 	add.w	r4, r3, #20
 800a908:	edd3 6a04 	vldr	s13, [r3, #16]
 800a90c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a910:	42a6      	cmp	r6, r4
 800a912:	edd5 7a00 	vldr	s15, [r5]
 800a916:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a91a:	f67f af3c 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a91e:	794d      	ldrb	r5, [r1, #5]
 800a920:	f103 0418 	add.w	r4, r3, #24
 800a924:	edd3 6a05 	vldr	s13, [r3, #20]
 800a928:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a92c:	42a6      	cmp	r6, r4
 800a92e:	edd5 7a00 	vldr	s15, [r5]
 800a932:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a936:	f67f af2e 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a93a:	798d      	ldrb	r5, [r1, #6]
 800a93c:	f103 041c 	add.w	r4, r3, #28
 800a940:	edd3 6a06 	vldr	s13, [r3, #24]
 800a944:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a948:	42a6      	cmp	r6, r4
 800a94a:	edd5 7a00 	vldr	s15, [r5]
 800a94e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a952:	f67f af20 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a956:	79cd      	ldrb	r5, [r1, #7]
 800a958:	f103 0420 	add.w	r4, r3, #32
 800a95c:	edd3 6a07 	vldr	s13, [r3, #28]
 800a960:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a964:	42a6      	cmp	r6, r4
 800a966:	edd5 7a00 	vldr	s15, [r5]
 800a96a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a96e:	f67f af12 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800a972:	7a09      	ldrb	r1, [r1, #8]
 800a974:	edd3 7a08 	vldr	s15, [r3, #32]
 800a978:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a97c:	edd2 6a00 	vldr	s13, [r2]
 800a980:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a984:	e707      	b.n	800a796 <ai_dict8_dot_array_f32+0x36>
 800a986:	bf00      	nop
 800a988:	3ffffff8 	.word	0x3ffffff8
 800a98c:	00000000 	.word	0x00000000
 800a990:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800a98c <ai_dict8_dot_array_f32+0x22c>
 800a994:	780d      	ldrb	r5, [r1, #0]
 800a996:	3304      	adds	r3, #4
 800a998:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a99c:	3101      	adds	r1, #1
 800a99e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a9a2:	edd5 6a00 	vldr	s13, [r5]
 800a9a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9aa:	780d      	ldrb	r5, [r1, #0]
 800a9ac:	1d1f      	adds	r7, r3, #4
 800a9ae:	edd3 7a00 	vldr	s15, [r3]
 800a9b2:	f101 0c01 	add.w	ip, r1, #1
 800a9b6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a9ba:	42bc      	cmp	r4, r7
 800a9bc:	edd5 6a00 	vldr	s13, [r5]
 800a9c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a9c4:	d365      	bcc.n	800aa92 <ai_dict8_dot_array_f32+0x332>
 800a9c6:	3324      	adds	r3, #36	; 0x24
 800a9c8:	f101 0e11 	add.w	lr, r1, #17
 800a9cc:	3109      	adds	r1, #9
 800a9ce:	eba6 0803 	sub.w	r8, r6, r3
 800a9d2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800a9d6:	eb0e 0ec8 	add.w	lr, lr, r8, lsl #3
 800a9da:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800a9de:	3108      	adds	r1, #8
 800a9e0:	f811 4c10 	ldrb.w	r4, [r1, #-16]
 800a9e4:	3320      	adds	r3, #32
 800a9e6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800a9ea:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800a9ee:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800a9f2:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 800a9f6:	edd5 7a00 	vldr	s15, [r5]
 800a9fa:	ed53 6a0e 	vldr	s13, [r3, #-56]	; 0xffffffc8
 800a9fe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800aa02:	edd4 5a00 	vldr	s11, [r4]
 800aa06:	f811 4c0e 	ldrb.w	r4, [r1, #-14]
 800aa0a:	ed13 5a0d 	vldr	s10, [r3, #-52]	; 0xffffffcc
 800aa0e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800aa12:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800aa16:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800aa1a:	ed94 4a00 	vldr	s8, [r4]
 800aa1e:	f811 4c0d 	ldrb.w	r4, [r1, #-13]
 800aa22:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800aa26:	ed13 6a0c 	vldr	s12, [r3, #-48]	; 0xffffffd0
 800aa2a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800aa2e:	ed53 4a0b 	vldr	s9, [r3, #-44]	; 0xffffffd4
 800aa32:	eee4 7a26 	vfma.f32	s15, s8, s13
 800aa36:	ed53 5a0a 	vldr	s11, [r3, #-40]	; 0xffffffd8
 800aa3a:	ed94 4a00 	vldr	s8, [r4]
 800aa3e:	f811 4c0b 	ldrb.w	r4, [r1, #-11]
 800aa42:	ed53 6a09 	vldr	s13, [r3, #-36]	; 0xffffffdc
 800aa46:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800aa4a:	eee4 7a05 	vfma.f32	s15, s8, s10
 800aa4e:	ed95 5a00 	vldr	s10, [r5]
 800aa52:	ed94 4a00 	vldr	s8, [r4]
 800aa56:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800aa5a:	f811 4c09 	ldrb.w	r4, [r1, #-9]
 800aa5e:	458e      	cmp	lr, r1
 800aa60:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800aa64:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800aa68:	eee5 7a06 	vfma.f32	s15, s10, s12
 800aa6c:	ed95 5a00 	vldr	s10, [r5]
 800aa70:	ed94 6a00 	vldr	s12, [r4]
 800aa74:	eee4 7a24 	vfma.f32	s15, s8, s9
 800aa78:	eee5 7a25 	vfma.f32	s15, s10, s11
 800aa7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800aa80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa84:	d1a9      	bne.n	800a9da <ai_dict8_dot_array_f32+0x27a>
 800aa86:	f108 0801 	add.w	r8, r8, #1
 800aa8a:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800aa8e:	eb07 1748 	add.w	r7, r7, r8, lsl #5
 800aa92:	42b7      	cmp	r7, r6
 800aa94:	f4bf ae7f 	bcs.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800aa98:	463b      	mov	r3, r7
 800aa9a:	f89c 1000 	ldrb.w	r1, [ip]
 800aa9e:	ecf3 6a01 	vldmia	r3!, {s13}
 800aaa2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800aaa6:	429e      	cmp	r6, r3
 800aaa8:	edd1 7a00 	vldr	s15, [r1]
 800aaac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aab0:	f67f ae71 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800aab4:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800aab8:	f107 0308 	add.w	r3, r7, #8
 800aabc:	edd7 6a01 	vldr	s13, [r7, #4]
 800aac0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800aac4:	429e      	cmp	r6, r3
 800aac6:	edd1 7a00 	vldr	s15, [r1]
 800aaca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aace:	f67f ae62 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800aad2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800aad6:	f107 030c 	add.w	r3, r7, #12
 800aada:	edd7 6a02 	vldr	s13, [r7, #8]
 800aade:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800aae2:	429e      	cmp	r6, r3
 800aae4:	edd1 7a00 	vldr	s15, [r1]
 800aae8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aaec:	f67f ae53 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800aaf0:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800aaf4:	f107 0310 	add.w	r3, r7, #16
 800aaf8:	edd7 6a03 	vldr	s13, [r7, #12]
 800aafc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ab00:	429e      	cmp	r6, r3
 800ab02:	edd1 7a00 	vldr	s15, [r1]
 800ab06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab0a:	f67f ae44 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800ab0e:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800ab12:	f107 0314 	add.w	r3, r7, #20
 800ab16:	edd7 6a04 	vldr	s13, [r7, #16]
 800ab1a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ab1e:	429e      	cmp	r6, r3
 800ab20:	edd1 7a00 	vldr	s15, [r1]
 800ab24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab28:	f67f ae35 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800ab2c:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800ab30:	f107 0318 	add.w	r3, r7, #24
 800ab34:	edd7 6a05 	vldr	s13, [r7, #20]
 800ab38:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ab3c:	429e      	cmp	r6, r3
 800ab3e:	edd1 7a00 	vldr	s15, [r1]
 800ab42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab46:	f67f ae26 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800ab4a:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800ab4e:	f107 031c 	add.w	r3, r7, #28
 800ab52:	edd7 6a06 	vldr	s13, [r7, #24]
 800ab56:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ab5a:	429e      	cmp	r6, r3
 800ab5c:	edd1 7a00 	vldr	s15, [r1]
 800ab60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab64:	f67f ae17 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800ab68:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800ab6c:	f107 0320 	add.w	r3, r7, #32
 800ab70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab74:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ab78:	429e      	cmp	r6, r3
 800ab7a:	edd1 7a00 	vldr	s15, [r1]
 800ab7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab82:	f67f ae08 	bls.w	800a796 <ai_dict8_dot_array_f32+0x36>
 800ab86:	f89c 3008 	ldrb.w	r3, [ip, #8]
 800ab8a:	edd7 7a08 	vldr	s15, [r7, #32]
 800ab8e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ab92:	edd2 6a00 	vldr	s13, [r2]
 800ab96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ab9a:	e5fc      	b.n	800a796 <ai_dict8_dot_array_f32+0x36>
 800ab9c:	780d      	ldrb	r5, [r1, #0]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aba4:	3101      	adds	r1, #1
 800aba6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 800abaa:	ed95 7a00 	vldr	s14, [r5]
 800abae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb2:	e6ef      	b.n	800a994 <ai_dict8_dot_array_f32+0x234>
 800abb4:	ed1f 7a8b 	vldr	s14, [pc, #-556]	; 800a98c <ai_dict8_dot_array_f32+0x22c>
 800abb8:	e6f7      	b.n	800a9aa <ai_dict8_dot_array_f32+0x24a>
 800abba:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 800a98c <ai_dict8_dot_array_f32+0x22c>
 800abbe:	e667      	b.n	800a890 <ai_dict8_dot_array_f32+0x130>

0800abc0 <ai_dict4_dot_array_f32>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800abc6:	f027 0c01 	bic.w	ip, r7, #1
 800abca:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800abce:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800abd2:	f000 80ad 	beq.w	800ad30 <ai_dict4_dot_array_f32+0x170>
 800abd6:	1d0d      	adds	r5, r1, #4
 800abd8:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800abdc:	f103 0420 	add.w	r4, r3, #32
 800abe0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800ad38 <ai_dict4_dot_array_f32+0x178>
 800abe4:	eb05 0e09 	add.w	lr, r5, r9
 800abe8:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800abec:	3504      	adds	r5, #4
 800abee:	ed14 5a07 	vldr	s10, [r4, #-28]	; 0xffffffe4
 800abf2:	3420      	adds	r4, #32
 800abf4:	f006 0a0f 	and.w	sl, r6, #15
 800abf8:	0936      	lsrs	r6, r6, #4
 800abfa:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 800abfe:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800ac02:	ed14 4a0e 	vldr	s8, [r4, #-56]	; 0xffffffc8
 800ac06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac0a:	ed14 6a0d 	vldr	s12, [r4, #-52]	; 0xffffffcc
 800ac0e:	edda 7a00 	vldr	s15, [sl]
 800ac12:	edd6 5a00 	vldr	s11, [r6]
 800ac16:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ac1a:	f815 6c07 	ldrb.w	r6, [r5, #-7]
 800ac1e:	ed54 3a0c 	vldr	s7, [r4, #-48]	; 0xffffffd0
 800ac22:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800ac26:	f006 060f 	and.w	r6, r6, #15
 800ac2a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800ac2e:	ed54 4a0b 	vldr	s9, [r4, #-44]	; 0xffffffd4
 800ac32:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800ac36:	ed54 5a0a 	vldr	s11, [r4, #-40]	; 0xffffffd8
 800ac3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac3e:	ed54 6a09 	vldr	s13, [r4, #-36]	; 0xffffffdc
 800ac42:	ed9a 3a00 	vldr	s6, [sl]
 800ac46:	ed96 5a00 	vldr	s10, [r6]
 800ac4a:	f815 ac06 	ldrb.w	sl, [r5, #-6]
 800ac4e:	eee3 7a04 	vfma.f32	s15, s6, s8
 800ac52:	f815 6c05 	ldrb.w	r6, [r5, #-5]
 800ac56:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800ac5a:	f00a 0a0f 	and.w	sl, sl, #15
 800ac5e:	45ae      	cmp	lr, r5
 800ac60:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800ac64:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800ac68:	ed9b 3a00 	vldr	s6, [fp]
 800ac6c:	ea4f 1b16 	mov.w	fp, r6, lsr #4
 800ac70:	eee5 7a06 	vfma.f32	s15, s10, s12
 800ac74:	ed9a 4a00 	vldr	s8, [sl]
 800ac78:	eb02 0a8b 	add.w	sl, r2, fp, lsl #2
 800ac7c:	f006 060f 	and.w	r6, r6, #15
 800ac80:	ed9a 5a00 	vldr	s10, [sl]
 800ac84:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac88:	ed96 6a00 	vldr	s12, [r6]
 800ac8c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ac90:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ac94:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ac98:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ac9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aca0:	d1a2      	bne.n	800abe8 <ai_dict4_dot_array_f32+0x28>
 800aca2:	4449      	add	r1, r9
 800aca4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800aca8:	459c      	cmp	ip, r3
 800acaa:	d92d      	bls.n	800ad08 <ai_dict4_dot_array_f32+0x148>
 800acac:	f10c 0c07 	add.w	ip, ip, #7
 800acb0:	f103 0508 	add.w	r5, r3, #8
 800acb4:	f103 0810 	add.w	r8, r3, #16
 800acb8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 800acbc:	ebac 0c05 	sub.w	ip, ip, r5
 800acc0:	f02c 0407 	bic.w	r4, ip, #7
 800acc4:	44a0      	add	r8, r4
 800acc6:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800acca:	3508      	adds	r5, #8
 800accc:	ed55 5a03 	vldr	s11, [r5, #-12]
 800acd0:	f004 060f 	and.w	r6, r4, #15
 800acd4:	0924      	lsrs	r4, r4, #4
 800acd6:	ed55 6a04 	vldr	s13, [r5, #-16]
 800acda:	45a8      	cmp	r8, r5
 800acdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ace0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ace4:	edd6 7a00 	vldr	s15, [r6]
 800ace8:	ed94 6a00 	vldr	s12, [r4]
 800acec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800acf0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800acf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800acf8:	d1e5      	bne.n	800acc6 <ai_dict4_dot_array_f32+0x106>
 800acfa:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800acfe:	f10c 0c01 	add.w	ip, ip, #1
 800ad02:	4461      	add	r1, ip
 800ad04:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800ad08:	07fc      	lsls	r4, r7, #31
 800ad0a:	d509      	bpl.n	800ad20 <ai_dict4_dot_array_f32+0x160>
 800ad0c:	7809      	ldrb	r1, [r1, #0]
 800ad0e:	edd3 7a00 	vldr	s15, [r3]
 800ad12:	090b      	lsrs	r3, r1, #4
 800ad14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ad18:	edd2 6a00 	vldr	s13, [r2]
 800ad1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ad20:	edd0 7a00 	vldr	s15, [r0]
 800ad24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad28:	ed80 7a00 	vstr	s14, [r0]
 800ad2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad30:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800ad38 <ai_dict4_dot_array_f32+0x178>
 800ad34:	e7b8      	b.n	800aca8 <ai_dict4_dot_array_f32+0xe8>
 800ad36:	bf00      	nop
 800ad38:	00000000 	.word	0x00000000

0800ad3c <forward_dense>:
 800ad3c:	6942      	ldr	r2, [r0, #20]
 800ad3e:	8813      	ldrh	r3, [r2, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 81c8 	beq.w	800b0d6 <forward_dense+0x39a>
 800ad46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4a:	ed2d 8b08 	vpush	{d8-d11}
 800ad4e:	6851      	ldr	r1, [r2, #4]
 800ad50:	b091      	sub	sp, #68	; 0x44
 800ad52:	684d      	ldr	r5, [r1, #4]
 800ad54:	b105      	cbz	r5, 800ad58 <forward_dense+0x1c>
 800ad56:	682d      	ldr	r5, [r5, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	f240 81b9 	bls.w	800b0d0 <forward_dense+0x394>
 800ad5e:	690a      	ldr	r2, [r1, #16]
 800ad60:	b102      	cbz	r2, 800ad64 <forward_dense+0x28>
 800ad62:	6812      	ldr	r2, [r2, #0]
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	f000 81b8 	beq.w	800b0da <forward_dense+0x39e>
 800ad6a:	69cb      	ldr	r3, [r1, #28]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f000 8209 	beq.w	800b184 <forward_dense+0x448>
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	9008      	str	r0, [sp, #32]
 800ad76:	f111 0018 	adds.w	r0, r1, #24
 800ad7a:	f000 81dc 	beq.w	800b136 <forward_dense+0x3fa>
 800ad7e:	8b09      	ldrh	r1, [r1, #24]
 800ad80:	2901      	cmp	r1, #1
 800ad82:	f240 81fc 	bls.w	800b17e <forward_dense+0x442>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	f000 81d7 	beq.w	800b13a <forward_dense+0x3fe>
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	9306      	str	r3, [sp, #24]
 800ad90:	9b08      	ldr	r3, [sp, #32]
 800ad92:	68d6      	ldr	r6, [r2, #12]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	68b0      	ldr	r0, [r6, #8]
 800ad98:	681f      	ldr	r7, [r3, #0]
 800ad9a:	68f4      	ldr	r4, [r6, #12]
 800ad9c:	f3c7 1ec6 	ubfx	lr, r7, #7, #7
 800ada0:	f3c7 5c41 	ubfx	ip, r7, #21, #2
 800ada4:	f3c7 4743 	ubfx	r7, r7, #17, #4
 800ada8:	fb04 f000 	mul.w	r0, r4, r0
 800adac:	fa4e f10c 	asr.w	r1, lr, ip
 800adb0:	2f04      	cmp	r7, #4
 800adb2:	9007      	str	r0, [sp, #28]
 800adb4:	910b      	str	r1, [sp, #44]	; 0x2c
 800adb6:	68e9      	ldr	r1, [r5, #12]
 800adb8:	6870      	ldr	r0, [r6, #4]
 800adba:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800adbe:	f000 81db 	beq.w	800b178 <forward_dense+0x43c>
 800adc2:	2f08      	cmp	r7, #8
 800adc4:	f000 81d8 	beq.w	800b178 <forward_dense+0x43c>
 800adc8:	f04f 0a00 	mov.w	sl, #0
 800adcc:	6992      	ldr	r2, [r2, #24]
 800adce:	0080      	lsls	r0, r0, #2
 800add0:	69a9      	ldr	r1, [r5, #24]
 800add2:	6894      	ldr	r4, [r2, #8]
 800add4:	9a08      	ldr	r2, [sp, #32]
 800add6:	9009      	str	r0, [sp, #36]	; 0x24
 800add8:	1826      	adds	r6, r4, r0
 800adda:	6952      	ldr	r2, [r2, #20]
 800addc:	9404      	str	r4, [sp, #16]
 800adde:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800ade2:	9a07      	ldr	r2, [sp, #28]
 800ade4:	688f      	ldr	r7, [r1, #8]
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	f000 81c1 	beq.w	800b16e <forward_dense+0x432>
 800adec:	f1a8 0210 	sub.w	r2, r8, #16
 800adf0:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800adf4:	689d      	ldr	r5, [r3, #8]
 800adf6:	0912      	lsrs	r2, r2, #4
 800adf8:	910a      	str	r1, [sp, #40]	; 0x28
 800adfa:	2100      	movs	r1, #0
 800adfc:	9b06      	ldr	r3, [sp, #24]
 800adfe:	3201      	adds	r2, #1
 800ae00:	eddf 2acf 	vldr	s5, [pc, #828]	; 800b140 <forward_dense+0x404>
 800ae04:	9105      	str	r1, [sp, #20]
 800ae06:	f008 010f 	and.w	r1, r8, #15
 800ae0a:	0192      	lsls	r2, r2, #6
 800ae0c:	910d      	str	r1, [sp, #52]	; 0x34
 800ae0e:	920c      	str	r2, [sp, #48]	; 0x30
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d042      	beq.n	800ae9a <forward_dense+0x15e>
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	689c      	ldr	r4, [r3, #8]
 800ae18:	9b04      	ldr	r3, [sp, #16]
 800ae1a:	f1ba 0f00 	cmp.w	sl, #0
 800ae1e:	d041      	beq.n	800aea4 <forward_dense+0x168>
 800ae20:	42b3      	cmp	r3, r6
 800ae22:	d229      	bcs.n	800ae78 <forward_dense+0x13c>
 800ae24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae26:	469b      	mov	fp, r3
 800ae28:	ab0f      	add	r3, sp, #60	; 0x3c
 800ae2a:	2a04      	cmp	r2, #4
 800ae2c:	9303      	str	r3, [sp, #12]
 800ae2e:	4633      	mov	r3, r6
 800ae30:	4646      	mov	r6, r8
 800ae32:	4698      	mov	r8, r3
 800ae34:	f000 8154 	beq.w	800b0e0 <forward_dense+0x3a4>
 800ae38:	2c00      	cmp	r4, #0
 800ae3a:	f000 8183 	beq.w	800b144 <forward_dense+0x408>
 800ae3e:	f8d4 c000 	ldr.w	ip, [r4]
 800ae42:	463b      	mov	r3, r7
 800ae44:	4629      	mov	r1, r5
 800ae46:	9600      	str	r6, [sp, #0]
 800ae48:	4652      	mov	r2, sl
 800ae4a:	9803      	ldr	r0, [sp, #12]
 800ae4c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800ae50:	f7ff fc86 	bl	800a760 <ai_dict8_dot_array_f32>
 800ae54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae56:	3404      	adds	r4, #4
 800ae58:	444d      	add	r5, r9
 800ae5a:	f84b 3b04 	str.w	r3, [fp], #4
 800ae5e:	45c3      	cmp	fp, r8
 800ae60:	d3ea      	bcc.n	800ae38 <forward_dense+0xfc>
 800ae62:	4643      	mov	r3, r8
 800ae64:	46b0      	mov	r8, r6
 800ae66:	461e      	mov	r6, r3
 800ae68:	9a04      	ldr	r2, [sp, #16]
 800ae6a:	43d3      	mvns	r3, r2
 800ae6c:	4433      	add	r3, r6
 800ae6e:	f023 0303 	bic.w	r3, r3, #3
 800ae72:	3304      	adds	r3, #4
 800ae74:	18d3      	adds	r3, r2, r3
 800ae76:	9304      	str	r3, [sp, #16]
 800ae78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae7a:	9b05      	ldr	r3, [sp, #20]
 800ae7c:	4417      	add	r7, r2
 800ae7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae80:	3301      	adds	r3, #1
 800ae82:	4416      	add	r6, r2
 800ae84:	9a07      	ldr	r2, [sp, #28]
 800ae86:	9305      	str	r3, [sp, #20]
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	f000 8170 	beq.w	800b16e <forward_dense+0x432>
 800ae8e:	9b08      	ldr	r3, [sp, #32]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	689d      	ldr	r5, [r3, #8]
 800ae94:	9b06      	ldr	r3, [sp, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1bc      	bne.n	800ae14 <forward_dense+0xd8>
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	9b04      	ldr	r3, [sp, #16]
 800ae9e:	f1ba 0f00 	cmp.w	sl, #0
 800aea2:	d1bd      	bne.n	800ae20 <forward_dense+0xe4>
 800aea4:	42b3      	cmp	r3, r6
 800aea6:	d2e7      	bcs.n	800ae78 <forward_dense+0x13c>
 800aea8:	4618      	mov	r0, r3
 800aeaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeac:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800aeb0:	eb07 0c03 	add.w	ip, r7, r3
 800aeb4:	469e      	mov	lr, r3
 800aeb6:	2c00      	cmp	r4, #0
 800aeb8:	f000 80fe 	beq.w	800b0b8 <forward_dense+0x37c>
 800aebc:	f1b8 0f0f 	cmp.w	r8, #15
 800aec0:	ed94 6a00 	vldr	s12, [r4]
 800aec4:	f104 0404 	add.w	r4, r4, #4
 800aec8:	f240 80fc 	bls.w	800b0c4 <forward_dense+0x388>
 800aecc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800aed0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800aed4:	4641      	mov	r1, r8
 800aed6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800b140 <forward_dense+0x404>
 800aeda:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 800aede:	3910      	subs	r1, #16
 800aee0:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 800aee4:	3240      	adds	r2, #64	; 0x40
 800aee6:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800aeea:	290f      	cmp	r1, #15
 800aeec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef0:	ed12 7a20 	vldr	s14, [r2, #-128]	; 0xffffff80
 800aef4:	ed12 2a1e 	vldr	s4, [r2, #-120]	; 0xffffff88
 800aef8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800aefc:	ed13 3a1e 	vldr	s6, [r3, #-120]	; 0xffffff88
 800af00:	eee5 7a87 	vfma.f32	s15, s11, s14
 800af04:	ed52 3a1d 	vldr	s7, [r2, #-116]	; 0xffffff8c
 800af08:	ed13 4a1d 	vldr	s8, [r3, #-116]	; 0xffffff8c
 800af0c:	ed52 4a1c 	vldr	s9, [r2, #-112]	; 0xffffff90
 800af10:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 800af14:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800af18:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
 800af1c:	eee2 7a03 	vfma.f32	s15, s4, s6
 800af20:	ed52 ba1a 	vldr	s23, [r2, #-104]	; 0xffffff98
 800af24:	ed13 ba1a 	vldr	s22, [r3, #-104]	; 0xffffff98
 800af28:	ed52 aa19 	vldr	s21, [r2, #-100]	; 0xffffff9c
 800af2c:	ed13 aa19 	vldr	s20, [r3, #-100]	; 0xffffff9c
 800af30:	ed53 9a18 	vldr	s19, [r3, #-96]	; 0xffffffa0
 800af34:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 800af38:	eee3 7a84 	vfma.f32	s15, s7, s8
 800af3c:	ed53 8a17 	vldr	s17, [r3, #-92]	; 0xffffffa4
 800af40:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800af44:	ed13 0a16 	vldr	s0, [r3, #-88]	; 0xffffffa8
 800af48:	ed52 0a16 	vldr	s1, [r2, #-88]	; 0xffffffa8
 800af4c:	ed12 1a15 	vldr	s2, [r2, #-84]	; 0xffffffac
 800af50:	ed53 1a15 	vldr	s3, [r3, #-84]	; 0xffffffac
 800af54:	eee4 7a85 	vfma.f32	s15, s9, s10
 800af58:	ed13 2a14 	vldr	s4, [r3, #-80]	; 0xffffffb0
 800af5c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800af60:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 800af64:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 800af68:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 800af6c:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 800af70:	eee5 7a87 	vfma.f32	s15, s11, s14
 800af74:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800af78:	ed12 7a11 	vldr	s14, [r2, #-68]	; 0xffffffbc
 800af7c:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800af80:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800af84:	eee9 7a89 	vfma.f32	s15, s19, s18
 800af88:	eee8 7a88 	vfma.f32	s15, s17, s16
 800af8c:	eee0 7a20 	vfma.f32	s15, s0, s1
 800af90:	eee1 7a21 	vfma.f32	s15, s2, s3
 800af94:	eee2 7a03 	vfma.f32	s15, s4, s6
 800af98:	eee3 7a84 	vfma.f32	s15, s7, s8
 800af9c:	eee4 7a85 	vfma.f32	s15, s9, s10
 800afa0:	eee5 7a87 	vfma.f32	s15, s11, s14
 800afa4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800afa8:	d897      	bhi.n	800aeda <forward_dense+0x19e>
 800afaa:	eb05 010e 	add.w	r1, r5, lr
 800afae:	465b      	mov	r3, fp
 800afb0:	4662      	mov	r2, ip
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d075      	beq.n	800b0a2 <forward_dense+0x366>
 800afb6:	ed91 7a00 	vldr	s14, [r1]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	edd2 7a00 	vldr	s15, [r2]
 800afc0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afc4:	d06d      	beq.n	800b0a2 <forward_dense+0x366>
 800afc6:	ed91 7a01 	vldr	s14, [r1, #4]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	edd2 7a01 	vldr	s15, [r2, #4]
 800afd0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afd4:	d065      	beq.n	800b0a2 <forward_dense+0x366>
 800afd6:	ed91 7a02 	vldr	s14, [r1, #8]
 800afda:	2b03      	cmp	r3, #3
 800afdc:	edd2 7a02 	vldr	s15, [r2, #8]
 800afe0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800afe4:	d05d      	beq.n	800b0a2 <forward_dense+0x366>
 800afe6:	ed91 7a03 	vldr	s14, [r1, #12]
 800afea:	2b04      	cmp	r3, #4
 800afec:	edd2 7a03 	vldr	s15, [r2, #12]
 800aff0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aff4:	d055      	beq.n	800b0a2 <forward_dense+0x366>
 800aff6:	ed91 7a04 	vldr	s14, [r1, #16]
 800affa:	2b05      	cmp	r3, #5
 800affc:	edd2 7a04 	vldr	s15, [r2, #16]
 800b000:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b004:	d04d      	beq.n	800b0a2 <forward_dense+0x366>
 800b006:	ed91 7a05 	vldr	s14, [r1, #20]
 800b00a:	2b06      	cmp	r3, #6
 800b00c:	edd2 7a05 	vldr	s15, [r2, #20]
 800b010:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b014:	d045      	beq.n	800b0a2 <forward_dense+0x366>
 800b016:	ed91 7a06 	vldr	s14, [r1, #24]
 800b01a:	2b07      	cmp	r3, #7
 800b01c:	edd2 7a06 	vldr	s15, [r2, #24]
 800b020:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b024:	d03d      	beq.n	800b0a2 <forward_dense+0x366>
 800b026:	ed91 7a07 	vldr	s14, [r1, #28]
 800b02a:	2b08      	cmp	r3, #8
 800b02c:	edd2 7a07 	vldr	s15, [r2, #28]
 800b030:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b034:	d035      	beq.n	800b0a2 <forward_dense+0x366>
 800b036:	ed91 7a08 	vldr	s14, [r1, #32]
 800b03a:	2b09      	cmp	r3, #9
 800b03c:	edd2 7a08 	vldr	s15, [r2, #32]
 800b040:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b044:	d02d      	beq.n	800b0a2 <forward_dense+0x366>
 800b046:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800b04a:	2b0a      	cmp	r3, #10
 800b04c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800b050:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b054:	d025      	beq.n	800b0a2 <forward_dense+0x366>
 800b056:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800b05a:	2b0b      	cmp	r3, #11
 800b05c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800b060:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b064:	d01d      	beq.n	800b0a2 <forward_dense+0x366>
 800b066:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800b06a:	2b0c      	cmp	r3, #12
 800b06c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800b070:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b074:	d015      	beq.n	800b0a2 <forward_dense+0x366>
 800b076:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800b07a:	2b0d      	cmp	r3, #13
 800b07c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800b080:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b084:	d00d      	beq.n	800b0a2 <forward_dense+0x366>
 800b086:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800b08a:	2b0e      	cmp	r3, #14
 800b08c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800b090:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b094:	d005      	beq.n	800b0a2 <forward_dense+0x366>
 800b096:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800b09a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800b09e:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b0a2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b0a6:	444d      	add	r5, r9
 800b0a8:	ece0 6a01 	vstmia	r0!, {s13}
 800b0ac:	42b0      	cmp	r0, r6
 800b0ae:	f4bf aedb 	bcs.w	800ae68 <forward_dense+0x12c>
 800b0b2:	2c00      	cmp	r4, #0
 800b0b4:	f47f af02 	bne.w	800aebc <forward_dense+0x180>
 800b0b8:	f1b8 0f0f 	cmp.w	r8, #15
 800b0bc:	eeb0 6a62 	vmov.f32	s12, s5
 800b0c0:	f63f af04 	bhi.w	800aecc <forward_dense+0x190>
 800b0c4:	4643      	mov	r3, r8
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	463a      	mov	r2, r7
 800b0ca:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800b140 <forward_dense+0x404>
 800b0ce:	e770      	b.n	800afb2 <forward_dense+0x276>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	deff      	udf	#255	; 0xff
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	deff      	udf	#255	; 0xff
 800b0da:	2300      	movs	r3, #0
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	deff      	udf	#255	; 0xff
 800b0e0:	b1a4      	cbz	r4, 800b10c <forward_dense+0x3d0>
 800b0e2:	f8d4 c000 	ldr.w	ip, [r4]
 800b0e6:	463b      	mov	r3, r7
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	9600      	str	r6, [sp, #0]
 800b0ec:	4652      	mov	r2, sl
 800b0ee:	9803      	ldr	r0, [sp, #12]
 800b0f0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800b0f4:	f7ff fd64 	bl	800abc0 <ai_dict4_dot_array_f32>
 800b0f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0fa:	3404      	adds	r4, #4
 800b0fc:	444d      	add	r5, r9
 800b0fe:	f84b 3b04 	str.w	r3, [fp], #4
 800b102:	45c3      	cmp	fp, r8
 800b104:	f4bf aead 	bcs.w	800ae62 <forward_dense+0x126>
 800b108:	2c00      	cmp	r4, #0
 800b10a:	d1ea      	bne.n	800b0e2 <forward_dense+0x3a6>
 800b10c:	4634      	mov	r4, r6
 800b10e:	4646      	mov	r6, r8
 800b110:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b114:	463b      	mov	r3, r7
 800b116:	4629      	mov	r1, r5
 800b118:	9400      	str	r4, [sp, #0]
 800b11a:	4652      	mov	r2, sl
 800b11c:	4640      	mov	r0, r8
 800b11e:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800b122:	f7ff fd4d 	bl	800abc0 <ai_dict4_dot_array_f32>
 800b126:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b128:	444d      	add	r5, r9
 800b12a:	f84b 3b04 	str.w	r3, [fp], #4
 800b12e:	45b3      	cmp	fp, r6
 800b130:	d3f0      	bcc.n	800b114 <forward_dense+0x3d8>
 800b132:	46a0      	mov	r8, r4
 800b134:	e698      	b.n	800ae68 <forward_dense+0x12c>
 800b136:	9006      	str	r0, [sp, #24]
 800b138:	e62a      	b.n	800ad90 <forward_dense+0x54>
 800b13a:	9306      	str	r3, [sp, #24]
 800b13c:	e628      	b.n	800ad90 <forward_dense+0x54>
 800b13e:	bf00      	nop
 800b140:	00000000 	.word	0x00000000
 800b144:	4634      	mov	r4, r6
 800b146:	4646      	mov	r6, r8
 800b148:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b14c:	463b      	mov	r3, r7
 800b14e:	4629      	mov	r1, r5
 800b150:	9400      	str	r4, [sp, #0]
 800b152:	4652      	mov	r2, sl
 800b154:	4640      	mov	r0, r8
 800b156:	edcd 2a0f 	vstr	s5, [sp, #60]	; 0x3c
 800b15a:	f7ff fb01 	bl	800a760 <ai_dict8_dot_array_f32>
 800b15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b160:	444d      	add	r5, r9
 800b162:	f84b 3b04 	str.w	r3, [fp], #4
 800b166:	45b3      	cmp	fp, r6
 800b168:	d3f0      	bcc.n	800b14c <forward_dense+0x410>
 800b16a:	46a0      	mov	r8, r4
 800b16c:	e67c      	b.n	800ae68 <forward_dense+0x12c>
 800b16e:	b011      	add	sp, #68	; 0x44
 800b170:	ecbd 8b08 	vpop	{d8-d11}
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800b17c:	e626      	b.n	800adcc <forward_dense+0x90>
 800b17e:	2300      	movs	r3, #0
 800b180:	9306      	str	r3, [sp, #24]
 800b182:	e605      	b.n	800ad90 <forward_dense+0x54>
 800b184:	9308      	str	r3, [sp, #32]
 800b186:	e5f6      	b.n	800ad76 <forward_dense+0x3a>

0800b188 <ai_check_custom_types>:
 800b188:	4b13      	ldr	r3, [pc, #76]	; (800b1d8 <ai_check_custom_types+0x50>)
 800b18a:	b082      	sub	sp, #8
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	b118      	cbz	r0, 800b19a <ai_check_custom_types+0x12>
 800b192:	7803      	ldrb	r3, [r0, #0]
 800b194:	2b03      	cmp	r3, #3
 800b196:	d002      	beq.n	800b19e <ai_check_custom_types+0x16>
 800b198:	2000      	movs	r0, #0
 800b19a:	b002      	add	sp, #8
 800b19c:	4770      	bx	lr
 800b19e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d004      	beq.n	800b1b0 <ai_check_custom_types+0x28>
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	f080 0001 	eor.w	r0, r0, #1
 800b1ac:	b002      	add	sp, #8
 800b1ae:	4770      	bx	lr
 800b1b0:	7842      	ldrb	r2, [r0, #1]
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d1f4      	bne.n	800b1a6 <ai_check_custom_types+0x1e>
 800b1bc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800b1c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d1ee      	bne.n	800b1a6 <ai_check_custom_types+0x1e>
 800b1c8:	7842      	ldrb	r2, [r0, #1]
 800b1ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d1e9      	bne.n	800b1a6 <ai_check_custom_types+0x1e>
 800b1d2:	2000      	movs	r0, #0
 800b1d4:	e7e8      	b.n	800b1a8 <ai_check_custom_types+0x20>
 800b1d6:	bf00      	nop
 800b1d8:	0800e6d4 	.word	0x0800e6d4

0800b1dc <ai_layers_forward_all>:
 800b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1de:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800b1e4:	b316      	cbz	r6, 800b22c <ai_layers_forward_all+0x50>
 800b1e6:	b1c5      	cbz	r5, 800b21a <ai_layers_forward_all+0x3e>
 800b1e8:	6545      	str	r5, [r0, #84]	; 0x54
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800b1ee:	2001      	movs	r0, #1
 800b1f0:	47b0      	blx	r6
 800b1f2:	2700      	movs	r7, #0
 800b1f4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b1f6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b1f8:	2002      	movs	r0, #2
 800b1fa:	47b0      	blx	r6
 800b1fc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800b1fe:	692b      	ldr	r3, [r5, #16]
 800b200:	4628      	mov	r0, r5
 800b202:	4798      	blx	r3
 800b204:	68eb      	ldr	r3, [r5, #12]
 800b206:	2003      	movs	r0, #3
 800b208:	429d      	cmp	r5, r3
 800b20a:	4619      	mov	r1, r3
 800b20c:	d006      	beq.n	800b21c <ai_layers_forward_all+0x40>
 800b20e:	6563      	str	r3, [r4, #84]	; 0x54
 800b210:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b212:	47b0      	blx	r6
 800b214:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b216:	2900      	cmp	r1, #0
 800b218:	d1ed      	bne.n	800b1f6 <ai_layers_forward_all+0x1a>
 800b21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b21c:	2100      	movs	r1, #0
 800b21e:	6567      	str	r7, [r4, #84]	; 0x54
 800b220:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800b222:	47b0      	blx	r6
 800b224:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b226:	2900      	cmp	r1, #0
 800b228:	d1e5      	bne.n	800b1f6 <ai_layers_forward_all+0x1a>
 800b22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	d0f4      	beq.n	800b21a <ai_layers_forward_all+0x3e>
 800b230:	6545      	str	r5, [r0, #84]	; 0x54
 800b232:	692b      	ldr	r3, [r5, #16]
 800b234:	4628      	mov	r0, r5
 800b236:	4798      	blx	r3
 800b238:	68eb      	ldr	r3, [r5, #12]
 800b23a:	42ab      	cmp	r3, r5
 800b23c:	461d      	mov	r5, r3
 800b23e:	d003      	beq.n	800b248 <ai_layers_forward_all+0x6c>
 800b240:	6563      	str	r3, [r4, #84]	; 0x54
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1f5      	bne.n	800b232 <ai_layers_forward_all+0x56>
 800b246:	e7e8      	b.n	800b21a <ai_layers_forward_all+0x3e>
 800b248:	2300      	movs	r3, #0
 800b24a:	6563      	str	r3, [r4, #84]	; 0x54
 800b24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b24e:	bf00      	nop

0800b250 <ai_array_to_buffer_fmt>:
 800b250:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800b254:	2b02      	cmp	r3, #2
 800b256:	d01f      	beq.n	800b298 <ai_array_to_buffer_fmt+0x48>
 800b258:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800b25c:	4a1b      	ldr	r2, [pc, #108]	; (800b2cc <ai_array_to_buffer_fmt+0x7c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00a      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b262:	dc0d      	bgt.n	800b280 <ai_array_to_buffer_fmt+0x30>
 800b264:	4a1a      	ldr	r2, [pc, #104]	; (800b2d0 <ai_array_to_buffer_fmt+0x80>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d006      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b26a:	dd1d      	ble.n	800b2a8 <ai_array_to_buffer_fmt+0x58>
 800b26c:	4a19      	ldr	r2, [pc, #100]	; (800b2d4 <ai_array_to_buffer_fmt+0x84>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d002      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b272:	320f      	adds	r2, #15
 800b274:	4293      	cmp	r3, r2
 800b276:	d10d      	bne.n	800b294 <ai_array_to_buffer_fmt+0x44>
 800b278:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b27c:	4318      	orrs	r0, r3
 800b27e:	4770      	bx	lr
 800b280:	4a15      	ldr	r2, [pc, #84]	; (800b2d8 <ai_array_to_buffer_fmt+0x88>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d0f8      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b286:	dd18      	ble.n	800b2ba <ai_array_to_buffer_fmt+0x6a>
 800b288:	4a14      	ldr	r2, [pc, #80]	; (800b2dc <ai_array_to_buffer_fmt+0x8c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d0f4      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b28e:	4a14      	ldr	r2, [pc, #80]	; (800b2e0 <ai_array_to_buffer_fmt+0x90>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d0f1      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b294:	2340      	movs	r3, #64	; 0x40
 800b296:	e7ef      	b.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b298:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <ai_array_to_buffer_fmt+0x94>)
 800b29a:	4003      	ands	r3, r0
 800b29c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800b2a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2a4:	4318      	orrs	r0, r3
 800b2a6:	4770      	bx	lr
 800b2a8:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d0e3      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b2b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d0df      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b2b8:	e7ec      	b.n	800b294 <ai_array_to_buffer_fmt+0x44>
 800b2ba:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d0da      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b2c2:	3207      	adds	r2, #7
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d0d7      	beq.n	800b278 <ai_array_to_buffer_fmt+0x28>
 800b2c8:	e7e4      	b.n	800b294 <ai_array_to_buffer_fmt+0x44>
 800b2ca:	bf00      	nop
 800b2cc:	00840040 	.word	0x00840040
 800b2d0:	00040447 	.word	0x00040447
 800b2d4:	00040840 	.word	0x00040840
 800b2d8:	00840840 	.word	0x00840840
 800b2dc:	0084084f 	.word	0x0084084f
 800b2e0:	01821040 	.word	0x01821040
 800b2e4:	00803fff 	.word	0x00803fff

0800b2e8 <ai_array_get_byte_size>:
 800b2e8:	b1e1      	cbz	r1, 800b324 <ai_array_get_byte_size+0x3c>
 800b2ea:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800b2ee:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800b2f2:	b410      	push	{r4}
 800b2f4:	f3c0 3482 	ubfx	r4, r0, #14, #3
 800b2f8:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800b2fc:	4423      	add	r3, r4
 800b2fe:	2804      	cmp	r0, #4
 800b300:	fb01 f103 	mul.w	r1, r1, r3
 800b304:	f101 0107 	add.w	r1, r1, #7
 800b308:	f021 0107 	bic.w	r1, r1, #7
 800b30c:	fa21 f102 	lsr.w	r1, r1, r2
 800b310:	d00a      	beq.n	800b328 <ai_array_get_byte_size+0x40>
 800b312:	2808      	cmp	r0, #8
 800b314:	d101      	bne.n	800b31a <ai_array_get_byte_size+0x32>
 800b316:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800b31a:	3107      	adds	r1, #7
 800b31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b320:	08c8      	lsrs	r0, r1, #3
 800b322:	4770      	bx	lr
 800b324:	4608      	mov	r0, r1
 800b326:	4770      	bx	lr
 800b328:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800b32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b330:	3107      	adds	r1, #7
 800b332:	08c8      	lsrs	r0, r1, #3
 800b334:	4770      	bx	lr
 800b336:	bf00      	nop

0800b338 <__errno>:
 800b338:	4b01      	ldr	r3, [pc, #4]	; (800b340 <__errno+0x8>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	2400036c 	.word	0x2400036c

0800b344 <__sflush_r>:
 800b344:	898a      	ldrh	r2, [r1, #12]
 800b346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b34a:	4605      	mov	r5, r0
 800b34c:	0710      	lsls	r0, r2, #28
 800b34e:	460c      	mov	r4, r1
 800b350:	d458      	bmi.n	800b404 <__sflush_r+0xc0>
 800b352:	684b      	ldr	r3, [r1, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	dc05      	bgt.n	800b364 <__sflush_r+0x20>
 800b358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	dc02      	bgt.n	800b364 <__sflush_r+0x20>
 800b35e:	2000      	movs	r0, #0
 800b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b366:	2e00      	cmp	r6, #0
 800b368:	d0f9      	beq.n	800b35e <__sflush_r+0x1a>
 800b36a:	2300      	movs	r3, #0
 800b36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b370:	682f      	ldr	r7, [r5, #0]
 800b372:	6a21      	ldr	r1, [r4, #32]
 800b374:	602b      	str	r3, [r5, #0]
 800b376:	d032      	beq.n	800b3de <__sflush_r+0x9a>
 800b378:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	075a      	lsls	r2, r3, #29
 800b37e:	d505      	bpl.n	800b38c <__sflush_r+0x48>
 800b380:	6863      	ldr	r3, [r4, #4]
 800b382:	1ac0      	subs	r0, r0, r3
 800b384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b386:	b10b      	cbz	r3, 800b38c <__sflush_r+0x48>
 800b388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b38a:	1ac0      	subs	r0, r0, r3
 800b38c:	2300      	movs	r3, #0
 800b38e:	4602      	mov	r2, r0
 800b390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b392:	6a21      	ldr	r1, [r4, #32]
 800b394:	4628      	mov	r0, r5
 800b396:	47b0      	blx	r6
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	d106      	bne.n	800b3ac <__sflush_r+0x68>
 800b39e:	6829      	ldr	r1, [r5, #0]
 800b3a0:	291d      	cmp	r1, #29
 800b3a2:	d848      	bhi.n	800b436 <__sflush_r+0xf2>
 800b3a4:	4a29      	ldr	r2, [pc, #164]	; (800b44c <__sflush_r+0x108>)
 800b3a6:	40ca      	lsrs	r2, r1
 800b3a8:	07d6      	lsls	r6, r2, #31
 800b3aa:	d544      	bpl.n	800b436 <__sflush_r+0xf2>
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	6062      	str	r2, [r4, #4]
 800b3b0:	04d9      	lsls	r1, r3, #19
 800b3b2:	6922      	ldr	r2, [r4, #16]
 800b3b4:	6022      	str	r2, [r4, #0]
 800b3b6:	d504      	bpl.n	800b3c2 <__sflush_r+0x7e>
 800b3b8:	1c42      	adds	r2, r0, #1
 800b3ba:	d101      	bne.n	800b3c0 <__sflush_r+0x7c>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	b903      	cbnz	r3, 800b3c2 <__sflush_r+0x7e>
 800b3c0:	6560      	str	r0, [r4, #84]	; 0x54
 800b3c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3c4:	602f      	str	r7, [r5, #0]
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d0c9      	beq.n	800b35e <__sflush_r+0x1a>
 800b3ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3ce:	4299      	cmp	r1, r3
 800b3d0:	d002      	beq.n	800b3d8 <__sflush_r+0x94>
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f000 f970 	bl	800b6b8 <_free_r>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	6360      	str	r0, [r4, #52]	; 0x34
 800b3dc:	e7c0      	b.n	800b360 <__sflush_r+0x1c>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b0      	blx	r6
 800b3e4:	1c41      	adds	r1, r0, #1
 800b3e6:	d1c8      	bne.n	800b37a <__sflush_r+0x36>
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0c5      	beq.n	800b37a <__sflush_r+0x36>
 800b3ee:	2b1d      	cmp	r3, #29
 800b3f0:	d001      	beq.n	800b3f6 <__sflush_r+0xb2>
 800b3f2:	2b16      	cmp	r3, #22
 800b3f4:	d101      	bne.n	800b3fa <__sflush_r+0xb6>
 800b3f6:	602f      	str	r7, [r5, #0]
 800b3f8:	e7b1      	b.n	800b35e <__sflush_r+0x1a>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b400:	81a3      	strh	r3, [r4, #12]
 800b402:	e7ad      	b.n	800b360 <__sflush_r+0x1c>
 800b404:	690f      	ldr	r7, [r1, #16]
 800b406:	2f00      	cmp	r7, #0
 800b408:	d0a9      	beq.n	800b35e <__sflush_r+0x1a>
 800b40a:	0793      	lsls	r3, r2, #30
 800b40c:	680e      	ldr	r6, [r1, #0]
 800b40e:	bf08      	it	eq
 800b410:	694b      	ldreq	r3, [r1, #20]
 800b412:	600f      	str	r7, [r1, #0]
 800b414:	bf18      	it	ne
 800b416:	2300      	movne	r3, #0
 800b418:	eba6 0807 	sub.w	r8, r6, r7
 800b41c:	608b      	str	r3, [r1, #8]
 800b41e:	f1b8 0f00 	cmp.w	r8, #0
 800b422:	dd9c      	ble.n	800b35e <__sflush_r+0x1a>
 800b424:	4643      	mov	r3, r8
 800b426:	463a      	mov	r2, r7
 800b428:	6a21      	ldr	r1, [r4, #32]
 800b42a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b42c:	4628      	mov	r0, r5
 800b42e:	47b0      	blx	r6
 800b430:	2800      	cmp	r0, #0
 800b432:	dc06      	bgt.n	800b442 <__sflush_r+0xfe>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b43a:	81a3      	strh	r3, [r4, #12]
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b440:	e78e      	b.n	800b360 <__sflush_r+0x1c>
 800b442:	4407      	add	r7, r0
 800b444:	eba8 0800 	sub.w	r8, r8, r0
 800b448:	e7e9      	b.n	800b41e <__sflush_r+0xda>
 800b44a:	bf00      	nop
 800b44c:	20400001 	.word	0x20400001

0800b450 <_fflush_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	690b      	ldr	r3, [r1, #16]
 800b454:	4605      	mov	r5, r0
 800b456:	460c      	mov	r4, r1
 800b458:	b1db      	cbz	r3, 800b492 <_fflush_r+0x42>
 800b45a:	b118      	cbz	r0, 800b464 <_fflush_r+0x14>
 800b45c:	6983      	ldr	r3, [r0, #24]
 800b45e:	b90b      	cbnz	r3, 800b464 <_fflush_r+0x14>
 800b460:	f000 f860 	bl	800b524 <__sinit>
 800b464:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <_fflush_r+0x48>)
 800b466:	429c      	cmp	r4, r3
 800b468:	d109      	bne.n	800b47e <_fflush_r+0x2e>
 800b46a:	686c      	ldr	r4, [r5, #4]
 800b46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b470:	b17b      	cbz	r3, 800b492 <_fflush_r+0x42>
 800b472:	4621      	mov	r1, r4
 800b474:	4628      	mov	r0, r5
 800b476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47a:	f7ff bf63 	b.w	800b344 <__sflush_r>
 800b47e:	4b07      	ldr	r3, [pc, #28]	; (800b49c <_fflush_r+0x4c>)
 800b480:	429c      	cmp	r4, r3
 800b482:	d101      	bne.n	800b488 <_fflush_r+0x38>
 800b484:	68ac      	ldr	r4, [r5, #8]
 800b486:	e7f1      	b.n	800b46c <_fflush_r+0x1c>
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <_fflush_r+0x50>)
 800b48a:	429c      	cmp	r4, r3
 800b48c:	bf08      	it	eq
 800b48e:	68ec      	ldreq	r4, [r5, #12]
 800b490:	e7ec      	b.n	800b46c <_fflush_r+0x1c>
 800b492:	2000      	movs	r0, #0
 800b494:	bd38      	pop	{r3, r4, r5, pc}
 800b496:	bf00      	nop
 800b498:	0800e7c8 	.word	0x0800e7c8
 800b49c:	0800e7e8 	.word	0x0800e7e8
 800b4a0:	0800e7a8 	.word	0x0800e7a8

0800b4a4 <std>:
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	b510      	push	{r4, lr}
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b4ae:	6083      	str	r3, [r0, #8]
 800b4b0:	8181      	strh	r1, [r0, #12]
 800b4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b4b4:	81c2      	strh	r2, [r0, #14]
 800b4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4ba:	6183      	str	r3, [r0, #24]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	2208      	movs	r2, #8
 800b4c0:	305c      	adds	r0, #92	; 0x5c
 800b4c2:	f000 f8f0 	bl	800b6a6 <memset>
 800b4c6:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <std+0x38>)
 800b4c8:	6263      	str	r3, [r4, #36]	; 0x24
 800b4ca:	4b05      	ldr	r3, [pc, #20]	; (800b4e0 <std+0x3c>)
 800b4cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4ce:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <std+0x40>)
 800b4d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4d2:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <std+0x44>)
 800b4d4:	6224      	str	r4, [r4, #32]
 800b4d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b4d8:	bd10      	pop	{r4, pc}
 800b4da:	bf00      	nop
 800b4dc:	0800c249 	.word	0x0800c249
 800b4e0:	0800c26b 	.word	0x0800c26b
 800b4e4:	0800c2a3 	.word	0x0800c2a3
 800b4e8:	0800c2c7 	.word	0x0800c2c7

0800b4ec <_cleanup_r>:
 800b4ec:	4901      	ldr	r1, [pc, #4]	; (800b4f4 <_cleanup_r+0x8>)
 800b4ee:	f000 b885 	b.w	800b5fc <_fwalk_reent>
 800b4f2:	bf00      	nop
 800b4f4:	0800b451 	.word	0x0800b451

0800b4f8 <__sfmoreglue>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	1e4a      	subs	r2, r1, #1
 800b4fc:	2568      	movs	r5, #104	; 0x68
 800b4fe:	4355      	muls	r5, r2
 800b500:	460e      	mov	r6, r1
 800b502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b506:	f000 f925 	bl	800b754 <_malloc_r>
 800b50a:	4604      	mov	r4, r0
 800b50c:	b140      	cbz	r0, 800b520 <__sfmoreglue+0x28>
 800b50e:	2100      	movs	r1, #0
 800b510:	e9c0 1600 	strd	r1, r6, [r0]
 800b514:	300c      	adds	r0, #12
 800b516:	60a0      	str	r0, [r4, #8]
 800b518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b51c:	f000 f8c3 	bl	800b6a6 <memset>
 800b520:	4620      	mov	r0, r4
 800b522:	bd70      	pop	{r4, r5, r6, pc}

0800b524 <__sinit>:
 800b524:	6983      	ldr	r3, [r0, #24]
 800b526:	b510      	push	{r4, lr}
 800b528:	4604      	mov	r4, r0
 800b52a:	bb33      	cbnz	r3, 800b57a <__sinit+0x56>
 800b52c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b530:	6503      	str	r3, [r0, #80]	; 0x50
 800b532:	4b12      	ldr	r3, [pc, #72]	; (800b57c <__sinit+0x58>)
 800b534:	4a12      	ldr	r2, [pc, #72]	; (800b580 <__sinit+0x5c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6282      	str	r2, [r0, #40]	; 0x28
 800b53a:	4298      	cmp	r0, r3
 800b53c:	bf04      	itt	eq
 800b53e:	2301      	moveq	r3, #1
 800b540:	6183      	streq	r3, [r0, #24]
 800b542:	f000 f81f 	bl	800b584 <__sfp>
 800b546:	6060      	str	r0, [r4, #4]
 800b548:	4620      	mov	r0, r4
 800b54a:	f000 f81b 	bl	800b584 <__sfp>
 800b54e:	60a0      	str	r0, [r4, #8]
 800b550:	4620      	mov	r0, r4
 800b552:	f000 f817 	bl	800b584 <__sfp>
 800b556:	2200      	movs	r2, #0
 800b558:	60e0      	str	r0, [r4, #12]
 800b55a:	2104      	movs	r1, #4
 800b55c:	6860      	ldr	r0, [r4, #4]
 800b55e:	f7ff ffa1 	bl	800b4a4 <std>
 800b562:	2201      	movs	r2, #1
 800b564:	2109      	movs	r1, #9
 800b566:	68a0      	ldr	r0, [r4, #8]
 800b568:	f7ff ff9c 	bl	800b4a4 <std>
 800b56c:	2202      	movs	r2, #2
 800b56e:	2112      	movs	r1, #18
 800b570:	68e0      	ldr	r0, [r4, #12]
 800b572:	f7ff ff97 	bl	800b4a4 <std>
 800b576:	2301      	movs	r3, #1
 800b578:	61a3      	str	r3, [r4, #24]
 800b57a:	bd10      	pop	{r4, pc}
 800b57c:	0800e808 	.word	0x0800e808
 800b580:	0800b4ed 	.word	0x0800b4ed

0800b584 <__sfp>:
 800b584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b586:	4b1b      	ldr	r3, [pc, #108]	; (800b5f4 <__sfp+0x70>)
 800b588:	681e      	ldr	r6, [r3, #0]
 800b58a:	69b3      	ldr	r3, [r6, #24]
 800b58c:	4607      	mov	r7, r0
 800b58e:	b913      	cbnz	r3, 800b596 <__sfp+0x12>
 800b590:	4630      	mov	r0, r6
 800b592:	f7ff ffc7 	bl	800b524 <__sinit>
 800b596:	3648      	adds	r6, #72	; 0x48
 800b598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	d503      	bpl.n	800b5a8 <__sfp+0x24>
 800b5a0:	6833      	ldr	r3, [r6, #0]
 800b5a2:	b133      	cbz	r3, 800b5b2 <__sfp+0x2e>
 800b5a4:	6836      	ldr	r6, [r6, #0]
 800b5a6:	e7f7      	b.n	800b598 <__sfp+0x14>
 800b5a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5ac:	b16d      	cbz	r5, 800b5ca <__sfp+0x46>
 800b5ae:	3468      	adds	r4, #104	; 0x68
 800b5b0:	e7f4      	b.n	800b59c <__sfp+0x18>
 800b5b2:	2104      	movs	r1, #4
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	f7ff ff9f 	bl	800b4f8 <__sfmoreglue>
 800b5ba:	6030      	str	r0, [r6, #0]
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d1f1      	bne.n	800b5a4 <__sfp+0x20>
 800b5c0:	230c      	movs	r3, #12
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ca:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <__sfp+0x74>)
 800b5cc:	6665      	str	r5, [r4, #100]	; 0x64
 800b5ce:	e9c4 5500 	strd	r5, r5, [r4]
 800b5d2:	60a5      	str	r5, [r4, #8]
 800b5d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b5d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800b5dc:	2208      	movs	r2, #8
 800b5de:	4629      	mov	r1, r5
 800b5e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5e4:	f000 f85f 	bl	800b6a6 <memset>
 800b5e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5f0:	e7e9      	b.n	800b5c6 <__sfp+0x42>
 800b5f2:	bf00      	nop
 800b5f4:	0800e808 	.word	0x0800e808
 800b5f8:	ffff0001 	.word	0xffff0001

0800b5fc <_fwalk_reent>:
 800b5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b600:	4680      	mov	r8, r0
 800b602:	4689      	mov	r9, r1
 800b604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b608:	2600      	movs	r6, #0
 800b60a:	b914      	cbnz	r4, 800b612 <_fwalk_reent+0x16>
 800b60c:	4630      	mov	r0, r6
 800b60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b612:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800b616:	3f01      	subs	r7, #1
 800b618:	d501      	bpl.n	800b61e <_fwalk_reent+0x22>
 800b61a:	6824      	ldr	r4, [r4, #0]
 800b61c:	e7f5      	b.n	800b60a <_fwalk_reent+0xe>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d907      	bls.n	800b634 <_fwalk_reent+0x38>
 800b624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b628:	3301      	adds	r3, #1
 800b62a:	d003      	beq.n	800b634 <_fwalk_reent+0x38>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4640      	mov	r0, r8
 800b630:	47c8      	blx	r9
 800b632:	4306      	orrs	r6, r0
 800b634:	3568      	adds	r5, #104	; 0x68
 800b636:	e7ee      	b.n	800b616 <_fwalk_reent+0x1a>

0800b638 <__libc_init_array>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	4e0d      	ldr	r6, [pc, #52]	; (800b670 <__libc_init_array+0x38>)
 800b63c:	4c0d      	ldr	r4, [pc, #52]	; (800b674 <__libc_init_array+0x3c>)
 800b63e:	1ba4      	subs	r4, r4, r6
 800b640:	10a4      	asrs	r4, r4, #2
 800b642:	2500      	movs	r5, #0
 800b644:	42a5      	cmp	r5, r4
 800b646:	d109      	bne.n	800b65c <__libc_init_array+0x24>
 800b648:	4e0b      	ldr	r6, [pc, #44]	; (800b678 <__libc_init_array+0x40>)
 800b64a:	4c0c      	ldr	r4, [pc, #48]	; (800b67c <__libc_init_array+0x44>)
 800b64c:	f002 fa10 	bl	800da70 <_init>
 800b650:	1ba4      	subs	r4, r4, r6
 800b652:	10a4      	asrs	r4, r4, #2
 800b654:	2500      	movs	r5, #0
 800b656:	42a5      	cmp	r5, r4
 800b658:	d105      	bne.n	800b666 <__libc_init_array+0x2e>
 800b65a:	bd70      	pop	{r4, r5, r6, pc}
 800b65c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b660:	4798      	blx	r3
 800b662:	3501      	adds	r5, #1
 800b664:	e7ee      	b.n	800b644 <__libc_init_array+0xc>
 800b666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b66a:	4798      	blx	r3
 800b66c:	3501      	adds	r5, #1
 800b66e:	e7f2      	b.n	800b656 <__libc_init_array+0x1e>
 800b670:	0800ea70 	.word	0x0800ea70
 800b674:	0800ea70 	.word	0x0800ea70
 800b678:	0800ea70 	.word	0x0800ea70
 800b67c:	0800ea74 	.word	0x0800ea74

0800b680 <malloc>:
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <malloc+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f000 b865 	b.w	800b754 <_malloc_r>
 800b68a:	bf00      	nop
 800b68c:	2400036c 	.word	0x2400036c

0800b690 <memcpy>:
 800b690:	b510      	push	{r4, lr}
 800b692:	1e43      	subs	r3, r0, #1
 800b694:	440a      	add	r2, r1
 800b696:	4291      	cmp	r1, r2
 800b698:	d100      	bne.n	800b69c <memcpy+0xc>
 800b69a:	bd10      	pop	{r4, pc}
 800b69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6a4:	e7f7      	b.n	800b696 <memcpy+0x6>

0800b6a6 <memset>:
 800b6a6:	4402      	add	r2, r0
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d100      	bne.n	800b6b0 <memset+0xa>
 800b6ae:	4770      	bx	lr
 800b6b0:	f803 1b01 	strb.w	r1, [r3], #1
 800b6b4:	e7f9      	b.n	800b6aa <memset+0x4>
	...

0800b6b8 <_free_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4605      	mov	r5, r0
 800b6bc:	2900      	cmp	r1, #0
 800b6be:	d045      	beq.n	800b74c <_free_r+0x94>
 800b6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c4:	1f0c      	subs	r4, r1, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfb8      	it	lt
 800b6ca:	18e4      	addlt	r4, r4, r3
 800b6cc:	f001 fd50 	bl	800d170 <__malloc_lock>
 800b6d0:	4a1f      	ldr	r2, [pc, #124]	; (800b750 <_free_r+0x98>)
 800b6d2:	6813      	ldr	r3, [r2, #0]
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	b933      	cbnz	r3, 800b6e6 <_free_r+0x2e>
 800b6d8:	6063      	str	r3, [r4, #4]
 800b6da:	6014      	str	r4, [r2, #0]
 800b6dc:	4628      	mov	r0, r5
 800b6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e2:	f001 bd46 	b.w	800d172 <__malloc_unlock>
 800b6e6:	42a3      	cmp	r3, r4
 800b6e8:	d90c      	bls.n	800b704 <_free_r+0x4c>
 800b6ea:	6821      	ldr	r1, [r4, #0]
 800b6ec:	1862      	adds	r2, r4, r1
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	bf04      	itt	eq
 800b6f2:	681a      	ldreq	r2, [r3, #0]
 800b6f4:	685b      	ldreq	r3, [r3, #4]
 800b6f6:	6063      	str	r3, [r4, #4]
 800b6f8:	bf04      	itt	eq
 800b6fa:	1852      	addeq	r2, r2, r1
 800b6fc:	6022      	streq	r2, [r4, #0]
 800b6fe:	6004      	str	r4, [r0, #0]
 800b700:	e7ec      	b.n	800b6dc <_free_r+0x24>
 800b702:	4613      	mov	r3, r2
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	b10a      	cbz	r2, 800b70c <_free_r+0x54>
 800b708:	42a2      	cmp	r2, r4
 800b70a:	d9fa      	bls.n	800b702 <_free_r+0x4a>
 800b70c:	6819      	ldr	r1, [r3, #0]
 800b70e:	1858      	adds	r0, r3, r1
 800b710:	42a0      	cmp	r0, r4
 800b712:	d10b      	bne.n	800b72c <_free_r+0x74>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	4401      	add	r1, r0
 800b718:	1858      	adds	r0, r3, r1
 800b71a:	4282      	cmp	r2, r0
 800b71c:	6019      	str	r1, [r3, #0]
 800b71e:	d1dd      	bne.n	800b6dc <_free_r+0x24>
 800b720:	6810      	ldr	r0, [r2, #0]
 800b722:	6852      	ldr	r2, [r2, #4]
 800b724:	605a      	str	r2, [r3, #4]
 800b726:	4401      	add	r1, r0
 800b728:	6019      	str	r1, [r3, #0]
 800b72a:	e7d7      	b.n	800b6dc <_free_r+0x24>
 800b72c:	d902      	bls.n	800b734 <_free_r+0x7c>
 800b72e:	230c      	movs	r3, #12
 800b730:	602b      	str	r3, [r5, #0]
 800b732:	e7d3      	b.n	800b6dc <_free_r+0x24>
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	1821      	adds	r1, r4, r0
 800b738:	428a      	cmp	r2, r1
 800b73a:	bf04      	itt	eq
 800b73c:	6811      	ldreq	r1, [r2, #0]
 800b73e:	6852      	ldreq	r2, [r2, #4]
 800b740:	6062      	str	r2, [r4, #4]
 800b742:	bf04      	itt	eq
 800b744:	1809      	addeq	r1, r1, r0
 800b746:	6021      	streq	r1, [r4, #0]
 800b748:	605c      	str	r4, [r3, #4]
 800b74a:	e7c7      	b.n	800b6dc <_free_r+0x24>
 800b74c:	bd38      	pop	{r3, r4, r5, pc}
 800b74e:	bf00      	nop
 800b750:	24000754 	.word	0x24000754

0800b754 <_malloc_r>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	1ccd      	adds	r5, r1, #3
 800b758:	f025 0503 	bic.w	r5, r5, #3
 800b75c:	3508      	adds	r5, #8
 800b75e:	2d0c      	cmp	r5, #12
 800b760:	bf38      	it	cc
 800b762:	250c      	movcc	r5, #12
 800b764:	2d00      	cmp	r5, #0
 800b766:	4606      	mov	r6, r0
 800b768:	db01      	blt.n	800b76e <_malloc_r+0x1a>
 800b76a:	42a9      	cmp	r1, r5
 800b76c:	d903      	bls.n	800b776 <_malloc_r+0x22>
 800b76e:	230c      	movs	r3, #12
 800b770:	6033      	str	r3, [r6, #0]
 800b772:	2000      	movs	r0, #0
 800b774:	bd70      	pop	{r4, r5, r6, pc}
 800b776:	f001 fcfb 	bl	800d170 <__malloc_lock>
 800b77a:	4a21      	ldr	r2, [pc, #132]	; (800b800 <_malloc_r+0xac>)
 800b77c:	6814      	ldr	r4, [r2, #0]
 800b77e:	4621      	mov	r1, r4
 800b780:	b991      	cbnz	r1, 800b7a8 <_malloc_r+0x54>
 800b782:	4c20      	ldr	r4, [pc, #128]	; (800b804 <_malloc_r+0xb0>)
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	b91b      	cbnz	r3, 800b790 <_malloc_r+0x3c>
 800b788:	4630      	mov	r0, r6
 800b78a:	f000 fd4d 	bl	800c228 <_sbrk_r>
 800b78e:	6020      	str	r0, [r4, #0]
 800b790:	4629      	mov	r1, r5
 800b792:	4630      	mov	r0, r6
 800b794:	f000 fd48 	bl	800c228 <_sbrk_r>
 800b798:	1c43      	adds	r3, r0, #1
 800b79a:	d124      	bne.n	800b7e6 <_malloc_r+0x92>
 800b79c:	230c      	movs	r3, #12
 800b79e:	6033      	str	r3, [r6, #0]
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f001 fce6 	bl	800d172 <__malloc_unlock>
 800b7a6:	e7e4      	b.n	800b772 <_malloc_r+0x1e>
 800b7a8:	680b      	ldr	r3, [r1, #0]
 800b7aa:	1b5b      	subs	r3, r3, r5
 800b7ac:	d418      	bmi.n	800b7e0 <_malloc_r+0x8c>
 800b7ae:	2b0b      	cmp	r3, #11
 800b7b0:	d90f      	bls.n	800b7d2 <_malloc_r+0x7e>
 800b7b2:	600b      	str	r3, [r1, #0]
 800b7b4:	50cd      	str	r5, [r1, r3]
 800b7b6:	18cc      	adds	r4, r1, r3
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f001 fcda 	bl	800d172 <__malloc_unlock>
 800b7be:	f104 000b 	add.w	r0, r4, #11
 800b7c2:	1d23      	adds	r3, r4, #4
 800b7c4:	f020 0007 	bic.w	r0, r0, #7
 800b7c8:	1ac3      	subs	r3, r0, r3
 800b7ca:	d0d3      	beq.n	800b774 <_malloc_r+0x20>
 800b7cc:	425a      	negs	r2, r3
 800b7ce:	50e2      	str	r2, [r4, r3]
 800b7d0:	e7d0      	b.n	800b774 <_malloc_r+0x20>
 800b7d2:	428c      	cmp	r4, r1
 800b7d4:	684b      	ldr	r3, [r1, #4]
 800b7d6:	bf16      	itet	ne
 800b7d8:	6063      	strne	r3, [r4, #4]
 800b7da:	6013      	streq	r3, [r2, #0]
 800b7dc:	460c      	movne	r4, r1
 800b7de:	e7eb      	b.n	800b7b8 <_malloc_r+0x64>
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	6849      	ldr	r1, [r1, #4]
 800b7e4:	e7cc      	b.n	800b780 <_malloc_r+0x2c>
 800b7e6:	1cc4      	adds	r4, r0, #3
 800b7e8:	f024 0403 	bic.w	r4, r4, #3
 800b7ec:	42a0      	cmp	r0, r4
 800b7ee:	d005      	beq.n	800b7fc <_malloc_r+0xa8>
 800b7f0:	1a21      	subs	r1, r4, r0
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f000 fd18 	bl	800c228 <_sbrk_r>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	d0cf      	beq.n	800b79c <_malloc_r+0x48>
 800b7fc:	6025      	str	r5, [r4, #0]
 800b7fe:	e7db      	b.n	800b7b8 <_malloc_r+0x64>
 800b800:	24000754 	.word	0x24000754
 800b804:	24000758 	.word	0x24000758

0800b808 <__cvt>:
 800b808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b80a:	ed2d 8b02 	vpush	{d8}
 800b80e:	eeb0 8b40 	vmov.f64	d8, d0
 800b812:	b085      	sub	sp, #20
 800b814:	4617      	mov	r7, r2
 800b816:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b818:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b81a:	ee18 2a90 	vmov	r2, s17
 800b81e:	f025 0520 	bic.w	r5, r5, #32
 800b822:	2a00      	cmp	r2, #0
 800b824:	bfb6      	itet	lt
 800b826:	222d      	movlt	r2, #45	; 0x2d
 800b828:	2200      	movge	r2, #0
 800b82a:	eeb1 8b40 	vneglt.f64	d8, d0
 800b82e:	2d46      	cmp	r5, #70	; 0x46
 800b830:	460c      	mov	r4, r1
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	d004      	beq.n	800b840 <__cvt+0x38>
 800b836:	2d45      	cmp	r5, #69	; 0x45
 800b838:	d100      	bne.n	800b83c <__cvt+0x34>
 800b83a:	3401      	adds	r4, #1
 800b83c:	2102      	movs	r1, #2
 800b83e:	e000      	b.n	800b842 <__cvt+0x3a>
 800b840:	2103      	movs	r1, #3
 800b842:	ab03      	add	r3, sp, #12
 800b844:	9301      	str	r3, [sp, #4]
 800b846:	ab02      	add	r3, sp, #8
 800b848:	9300      	str	r3, [sp, #0]
 800b84a:	4622      	mov	r2, r4
 800b84c:	4633      	mov	r3, r6
 800b84e:	eeb0 0b48 	vmov.f64	d0, d8
 800b852:	f000 febd 	bl	800c5d0 <_dtoa_r>
 800b856:	2d47      	cmp	r5, #71	; 0x47
 800b858:	d101      	bne.n	800b85e <__cvt+0x56>
 800b85a:	07fb      	lsls	r3, r7, #31
 800b85c:	d51e      	bpl.n	800b89c <__cvt+0x94>
 800b85e:	2d46      	cmp	r5, #70	; 0x46
 800b860:	eb00 0304 	add.w	r3, r0, r4
 800b864:	d10c      	bne.n	800b880 <__cvt+0x78>
 800b866:	7802      	ldrb	r2, [r0, #0]
 800b868:	2a30      	cmp	r2, #48	; 0x30
 800b86a:	d107      	bne.n	800b87c <__cvt+0x74>
 800b86c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b874:	bf1c      	itt	ne
 800b876:	f1c4 0401 	rsbne	r4, r4, #1
 800b87a:	6034      	strne	r4, [r6, #0]
 800b87c:	6832      	ldr	r2, [r6, #0]
 800b87e:	4413      	add	r3, r2
 800b880:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b888:	d007      	beq.n	800b89a <__cvt+0x92>
 800b88a:	2130      	movs	r1, #48	; 0x30
 800b88c:	9a03      	ldr	r2, [sp, #12]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d204      	bcs.n	800b89c <__cvt+0x94>
 800b892:	1c54      	adds	r4, r2, #1
 800b894:	9403      	str	r4, [sp, #12]
 800b896:	7011      	strb	r1, [r2, #0]
 800b898:	e7f8      	b.n	800b88c <__cvt+0x84>
 800b89a:	9303      	str	r3, [sp, #12]
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8a0:	1a1b      	subs	r3, r3, r0
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	b005      	add	sp, #20
 800b8a6:	ecbd 8b02 	vpop	{d8}
 800b8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8ac <__exponent>:
 800b8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ae:	2900      	cmp	r1, #0
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	bfba      	itte	lt
 800b8b4:	4249      	neglt	r1, r1
 800b8b6:	232d      	movlt	r3, #45	; 0x2d
 800b8b8:	232b      	movge	r3, #43	; 0x2b
 800b8ba:	2909      	cmp	r1, #9
 800b8bc:	f804 2b02 	strb.w	r2, [r4], #2
 800b8c0:	7043      	strb	r3, [r0, #1]
 800b8c2:	dd20      	ble.n	800b906 <__exponent+0x5a>
 800b8c4:	f10d 0307 	add.w	r3, sp, #7
 800b8c8:	461f      	mov	r7, r3
 800b8ca:	260a      	movs	r6, #10
 800b8cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800b8d0:	fb06 1115 	mls	r1, r6, r5, r1
 800b8d4:	3130      	adds	r1, #48	; 0x30
 800b8d6:	2d09      	cmp	r5, #9
 800b8d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b8dc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	dc09      	bgt.n	800b8f8 <__exponent+0x4c>
 800b8e4:	3130      	adds	r1, #48	; 0x30
 800b8e6:	3b02      	subs	r3, #2
 800b8e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b8ec:	42bb      	cmp	r3, r7
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	d304      	bcc.n	800b8fc <__exponent+0x50>
 800b8f2:	1a10      	subs	r0, r2, r0
 800b8f4:	b003      	add	sp, #12
 800b8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	e7e7      	b.n	800b8cc <__exponent+0x20>
 800b8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b900:	f804 2b01 	strb.w	r2, [r4], #1
 800b904:	e7f2      	b.n	800b8ec <__exponent+0x40>
 800b906:	2330      	movs	r3, #48	; 0x30
 800b908:	4419      	add	r1, r3
 800b90a:	7083      	strb	r3, [r0, #2]
 800b90c:	1d02      	adds	r2, r0, #4
 800b90e:	70c1      	strb	r1, [r0, #3]
 800b910:	e7ef      	b.n	800b8f2 <__exponent+0x46>
 800b912:	0000      	movs	r0, r0
 800b914:	0000      	movs	r0, r0
	...

0800b918 <_printf_float>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	b08d      	sub	sp, #52	; 0x34
 800b91e:	460c      	mov	r4, r1
 800b920:	4616      	mov	r6, r2
 800b922:	461f      	mov	r7, r3
 800b924:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b928:	4605      	mov	r5, r0
 800b92a:	f001 fb9d 	bl	800d068 <_localeconv_r>
 800b92e:	f8d0 b000 	ldr.w	fp, [r0]
 800b932:	4658      	mov	r0, fp
 800b934:	f7f4 fcd4 	bl	80002e0 <strlen>
 800b938:	2300      	movs	r3, #0
 800b93a:	930a      	str	r3, [sp, #40]	; 0x28
 800b93c:	f8d8 3000 	ldr.w	r3, [r8]
 800b940:	9005      	str	r0, [sp, #20]
 800b942:	3307      	adds	r3, #7
 800b944:	f023 0307 	bic.w	r3, r3, #7
 800b948:	f103 0108 	add.w	r1, r3, #8
 800b94c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b950:	6822      	ldr	r2, [r4, #0]
 800b952:	f8c8 1000 	str.w	r1, [r8]
 800b956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b95a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b95e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800bbe8 <_printf_float+0x2d0>
 800b962:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b966:	eeb0 6bc0 	vabs.f64	d6, d0
 800b96a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b972:	dd24      	ble.n	800b9be <_printf_float+0xa6>
 800b974:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97c:	d502      	bpl.n	800b984 <_printf_float+0x6c>
 800b97e:	232d      	movs	r3, #45	; 0x2d
 800b980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b984:	499a      	ldr	r1, [pc, #616]	; (800bbf0 <_printf_float+0x2d8>)
 800b986:	4b9b      	ldr	r3, [pc, #620]	; (800bbf4 <_printf_float+0x2dc>)
 800b988:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b98c:	bf8c      	ite	hi
 800b98e:	4688      	movhi	r8, r1
 800b990:	4698      	movls	r8, r3
 800b992:	f022 0204 	bic.w	r2, r2, #4
 800b996:	2303      	movs	r3, #3
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	6022      	str	r2, [r4, #0]
 800b99c:	f04f 0a00 	mov.w	sl, #0
 800b9a0:	9700      	str	r7, [sp, #0]
 800b9a2:	4633      	mov	r3, r6
 800b9a4:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f000 f9e1 	bl	800bd70 <_printf_common>
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	f040 8089 	bne.w	800bac6 <_printf_float+0x1ae>
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9b8:	b00d      	add	sp, #52	; 0x34
 800b9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9be:	eeb4 0b40 	vcmp.f64	d0, d0
 800b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c6:	d702      	bvc.n	800b9ce <_printf_float+0xb6>
 800b9c8:	498b      	ldr	r1, [pc, #556]	; (800bbf8 <_printf_float+0x2e0>)
 800b9ca:	4b8c      	ldr	r3, [pc, #560]	; (800bbfc <_printf_float+0x2e4>)
 800b9cc:	e7dc      	b.n	800b988 <_printf_float+0x70>
 800b9ce:	6861      	ldr	r1, [r4, #4]
 800b9d0:	1c4b      	adds	r3, r1, #1
 800b9d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9d6:	ab0a      	add	r3, sp, #40	; 0x28
 800b9d8:	a809      	add	r0, sp, #36	; 0x24
 800b9da:	d13b      	bne.n	800ba54 <_printf_float+0x13c>
 800b9dc:	2106      	movs	r1, #6
 800b9de:	6061      	str	r1, [r4, #4]
 800b9e0:	f04f 0c00 	mov.w	ip, #0
 800b9e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b9e8:	e9cd 0900 	strd	r0, r9, [sp]
 800b9ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9f0:	6022      	str	r2, [r4, #0]
 800b9f2:	6861      	ldr	r1, [r4, #4]
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f7ff ff07 	bl	800b808 <__cvt>
 800b9fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b9fe:	2b47      	cmp	r3, #71	; 0x47
 800ba00:	4680      	mov	r8, r0
 800ba02:	d109      	bne.n	800ba18 <_printf_float+0x100>
 800ba04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba06:	1cd8      	adds	r0, r3, #3
 800ba08:	db02      	blt.n	800ba10 <_printf_float+0xf8>
 800ba0a:	6862      	ldr	r2, [r4, #4]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	dd47      	ble.n	800baa0 <_printf_float+0x188>
 800ba10:	f1a9 0902 	sub.w	r9, r9, #2
 800ba14:	fa5f f989 	uxtb.w	r9, r9
 800ba18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba1e:	d824      	bhi.n	800ba6a <_printf_float+0x152>
 800ba20:	3901      	subs	r1, #1
 800ba22:	464a      	mov	r2, r9
 800ba24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba28:	9109      	str	r1, [sp, #36]	; 0x24
 800ba2a:	f7ff ff3f 	bl	800b8ac <__exponent>
 800ba2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba30:	1813      	adds	r3, r2, r0
 800ba32:	2a01      	cmp	r2, #1
 800ba34:	4682      	mov	sl, r0
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	dc02      	bgt.n	800ba40 <_printf_float+0x128>
 800ba3a:	6822      	ldr	r2, [r4, #0]
 800ba3c:	07d1      	lsls	r1, r2, #31
 800ba3e:	d501      	bpl.n	800ba44 <_printf_float+0x12c>
 800ba40:	3301      	adds	r3, #1
 800ba42:	6123      	str	r3, [r4, #16]
 800ba44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0a9      	beq.n	800b9a0 <_printf_float+0x88>
 800ba4c:	232d      	movs	r3, #45	; 0x2d
 800ba4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba52:	e7a5      	b.n	800b9a0 <_printf_float+0x88>
 800ba54:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ba58:	f000 8178 	beq.w	800bd4c <_printf_float+0x434>
 800ba5c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ba60:	d1be      	bne.n	800b9e0 <_printf_float+0xc8>
 800ba62:	2900      	cmp	r1, #0
 800ba64:	d1bc      	bne.n	800b9e0 <_printf_float+0xc8>
 800ba66:	2101      	movs	r1, #1
 800ba68:	e7b9      	b.n	800b9de <_printf_float+0xc6>
 800ba6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ba6e:	d119      	bne.n	800baa4 <_printf_float+0x18c>
 800ba70:	2900      	cmp	r1, #0
 800ba72:	6863      	ldr	r3, [r4, #4]
 800ba74:	dd0c      	ble.n	800ba90 <_printf_float+0x178>
 800ba76:	6121      	str	r1, [r4, #16]
 800ba78:	b913      	cbnz	r3, 800ba80 <_printf_float+0x168>
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	07d2      	lsls	r2, r2, #31
 800ba7e:	d502      	bpl.n	800ba86 <_printf_float+0x16e>
 800ba80:	3301      	adds	r3, #1
 800ba82:	440b      	add	r3, r1
 800ba84:	6123      	str	r3, [r4, #16]
 800ba86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba88:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba8a:	f04f 0a00 	mov.w	sl, #0
 800ba8e:	e7d9      	b.n	800ba44 <_printf_float+0x12c>
 800ba90:	b913      	cbnz	r3, 800ba98 <_printf_float+0x180>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	07d0      	lsls	r0, r2, #31
 800ba96:	d501      	bpl.n	800ba9c <_printf_float+0x184>
 800ba98:	3302      	adds	r3, #2
 800ba9a:	e7f3      	b.n	800ba84 <_printf_float+0x16c>
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e7f1      	b.n	800ba84 <_printf_float+0x16c>
 800baa0:	f04f 0967 	mov.w	r9, #103	; 0x67
 800baa4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800baa8:	4293      	cmp	r3, r2
 800baaa:	db05      	blt.n	800bab8 <_printf_float+0x1a0>
 800baac:	6822      	ldr	r2, [r4, #0]
 800baae:	6123      	str	r3, [r4, #16]
 800bab0:	07d1      	lsls	r1, r2, #31
 800bab2:	d5e8      	bpl.n	800ba86 <_printf_float+0x16e>
 800bab4:	3301      	adds	r3, #1
 800bab6:	e7e5      	b.n	800ba84 <_printf_float+0x16c>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfd4      	ite	le
 800babc:	f1c3 0302 	rsble	r3, r3, #2
 800bac0:	2301      	movgt	r3, #1
 800bac2:	4413      	add	r3, r2
 800bac4:	e7de      	b.n	800ba84 <_printf_float+0x16c>
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	055a      	lsls	r2, r3, #21
 800baca:	d407      	bmi.n	800badc <_printf_float+0x1c4>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	4642      	mov	r2, r8
 800bad0:	4631      	mov	r1, r6
 800bad2:	4628      	mov	r0, r5
 800bad4:	47b8      	blx	r7
 800bad6:	3001      	adds	r0, #1
 800bad8:	d12a      	bne.n	800bb30 <_printf_float+0x218>
 800bada:	e76b      	b.n	800b9b4 <_printf_float+0x9c>
 800badc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bae0:	f240 80de 	bls.w	800bca0 <_printf_float+0x388>
 800bae4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bae8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800baec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf0:	d133      	bne.n	800bb5a <_printf_float+0x242>
 800baf2:	2301      	movs	r3, #1
 800baf4:	4a42      	ldr	r2, [pc, #264]	; (800bc00 <_printf_float+0x2e8>)
 800baf6:	4631      	mov	r1, r6
 800baf8:	4628      	mov	r0, r5
 800bafa:	47b8      	blx	r7
 800bafc:	3001      	adds	r0, #1
 800bafe:	f43f af59 	beq.w	800b9b4 <_printf_float+0x9c>
 800bb02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb06:	429a      	cmp	r2, r3
 800bb08:	db02      	blt.n	800bb10 <_printf_float+0x1f8>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	07d8      	lsls	r0, r3, #31
 800bb0e:	d50f      	bpl.n	800bb30 <_printf_float+0x218>
 800bb10:	9b05      	ldr	r3, [sp, #20]
 800bb12:	465a      	mov	r2, fp
 800bb14:	4631      	mov	r1, r6
 800bb16:	4628      	mov	r0, r5
 800bb18:	47b8      	blx	r7
 800bb1a:	3001      	adds	r0, #1
 800bb1c:	f43f af4a 	beq.w	800b9b4 <_printf_float+0x9c>
 800bb20:	f04f 0800 	mov.w	r8, #0
 800bb24:	f104 091a 	add.w	r9, r4, #26
 800bb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	4543      	cmp	r3, r8
 800bb2e:	dc09      	bgt.n	800bb44 <_printf_float+0x22c>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	079b      	lsls	r3, r3, #30
 800bb34:	f100 8105 	bmi.w	800bd42 <_printf_float+0x42a>
 800bb38:	68e0      	ldr	r0, [r4, #12]
 800bb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb3c:	4298      	cmp	r0, r3
 800bb3e:	bfb8      	it	lt
 800bb40:	4618      	movlt	r0, r3
 800bb42:	e739      	b.n	800b9b8 <_printf_float+0xa0>
 800bb44:	2301      	movs	r3, #1
 800bb46:	464a      	mov	r2, r9
 800bb48:	4631      	mov	r1, r6
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	47b8      	blx	r7
 800bb4e:	3001      	adds	r0, #1
 800bb50:	f43f af30 	beq.w	800b9b4 <_printf_float+0x9c>
 800bb54:	f108 0801 	add.w	r8, r8, #1
 800bb58:	e7e6      	b.n	800bb28 <_printf_float+0x210>
 800bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	dc2b      	bgt.n	800bbb8 <_printf_float+0x2a0>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4a27      	ldr	r2, [pc, #156]	; (800bc00 <_printf_float+0x2e8>)
 800bb64:	4631      	mov	r1, r6
 800bb66:	4628      	mov	r0, r5
 800bb68:	47b8      	blx	r7
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	f43f af22 	beq.w	800b9b4 <_printf_float+0x9c>
 800bb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb72:	b923      	cbnz	r3, 800bb7e <_printf_float+0x266>
 800bb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb76:	b913      	cbnz	r3, 800bb7e <_printf_float+0x266>
 800bb78:	6823      	ldr	r3, [r4, #0]
 800bb7a:	07d9      	lsls	r1, r3, #31
 800bb7c:	d5d8      	bpl.n	800bb30 <_printf_float+0x218>
 800bb7e:	9b05      	ldr	r3, [sp, #20]
 800bb80:	465a      	mov	r2, fp
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	f43f af13 	beq.w	800b9b4 <_printf_float+0x9c>
 800bb8e:	f04f 0900 	mov.w	r9, #0
 800bb92:	f104 0a1a 	add.w	sl, r4, #26
 800bb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb98:	425b      	negs	r3, r3
 800bb9a:	454b      	cmp	r3, r9
 800bb9c:	dc01      	bgt.n	800bba2 <_printf_float+0x28a>
 800bb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba0:	e795      	b.n	800bace <_printf_float+0x1b6>
 800bba2:	2301      	movs	r3, #1
 800bba4:	4652      	mov	r2, sl
 800bba6:	4631      	mov	r1, r6
 800bba8:	4628      	mov	r0, r5
 800bbaa:	47b8      	blx	r7
 800bbac:	3001      	adds	r0, #1
 800bbae:	f43f af01 	beq.w	800b9b4 <_printf_float+0x9c>
 800bbb2:	f109 0901 	add.w	r9, r9, #1
 800bbb6:	e7ee      	b.n	800bb96 <_printf_float+0x27e>
 800bbb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	bfa8      	it	ge
 800bbc0:	461a      	movge	r2, r3
 800bbc2:	2a00      	cmp	r2, #0
 800bbc4:	4691      	mov	r9, r2
 800bbc6:	dd07      	ble.n	800bbd8 <_printf_float+0x2c0>
 800bbc8:	4613      	mov	r3, r2
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4642      	mov	r2, r8
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f43f aeee 	beq.w	800b9b4 <_printf_float+0x9c>
 800bbd8:	f104 031a 	add.w	r3, r4, #26
 800bbdc:	f04f 0a00 	mov.w	sl, #0
 800bbe0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbe4:	9307      	str	r3, [sp, #28]
 800bbe6:	e017      	b.n	800bc18 <_printf_float+0x300>
 800bbe8:	ffffffff 	.word	0xffffffff
 800bbec:	7fefffff 	.word	0x7fefffff
 800bbf0:	0800e810 	.word	0x0800e810
 800bbf4:	0800e80c 	.word	0x0800e80c
 800bbf8:	0800e818 	.word	0x0800e818
 800bbfc:	0800e814 	.word	0x0800e814
 800bc00:	0800e81c 	.word	0x0800e81c
 800bc04:	2301      	movs	r3, #1
 800bc06:	9a07      	ldr	r2, [sp, #28]
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4628      	mov	r0, r5
 800bc0c:	47b8      	blx	r7
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f43f aed0 	beq.w	800b9b4 <_printf_float+0x9c>
 800bc14:	f10a 0a01 	add.w	sl, sl, #1
 800bc18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc1a:	9306      	str	r3, [sp, #24]
 800bc1c:	eba3 0309 	sub.w	r3, r3, r9
 800bc20:	4553      	cmp	r3, sl
 800bc22:	dcef      	bgt.n	800bc04 <_printf_float+0x2ec>
 800bc24:	9b06      	ldr	r3, [sp, #24]
 800bc26:	4498      	add	r8, r3
 800bc28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	db15      	blt.n	800bc5c <_printf_float+0x344>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	07da      	lsls	r2, r3, #31
 800bc34:	d412      	bmi.n	800bc5c <_printf_float+0x344>
 800bc36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc38:	9a06      	ldr	r2, [sp, #24]
 800bc3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc3c:	1a9a      	subs	r2, r3, r2
 800bc3e:	eba3 0a01 	sub.w	sl, r3, r1
 800bc42:	4592      	cmp	sl, r2
 800bc44:	bfa8      	it	ge
 800bc46:	4692      	movge	sl, r2
 800bc48:	f1ba 0f00 	cmp.w	sl, #0
 800bc4c:	dc0e      	bgt.n	800bc6c <_printf_float+0x354>
 800bc4e:	f04f 0800 	mov.w	r8, #0
 800bc52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc56:	f104 091a 	add.w	r9, r4, #26
 800bc5a:	e019      	b.n	800bc90 <_printf_float+0x378>
 800bc5c:	9b05      	ldr	r3, [sp, #20]
 800bc5e:	465a      	mov	r2, fp
 800bc60:	4631      	mov	r1, r6
 800bc62:	4628      	mov	r0, r5
 800bc64:	47b8      	blx	r7
 800bc66:	3001      	adds	r0, #1
 800bc68:	d1e5      	bne.n	800bc36 <_printf_float+0x31e>
 800bc6a:	e6a3      	b.n	800b9b4 <_printf_float+0x9c>
 800bc6c:	4653      	mov	r3, sl
 800bc6e:	4642      	mov	r2, r8
 800bc70:	4631      	mov	r1, r6
 800bc72:	4628      	mov	r0, r5
 800bc74:	47b8      	blx	r7
 800bc76:	3001      	adds	r0, #1
 800bc78:	d1e9      	bne.n	800bc4e <_printf_float+0x336>
 800bc7a:	e69b      	b.n	800b9b4 <_printf_float+0x9c>
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	464a      	mov	r2, r9
 800bc80:	4631      	mov	r1, r6
 800bc82:	4628      	mov	r0, r5
 800bc84:	47b8      	blx	r7
 800bc86:	3001      	adds	r0, #1
 800bc88:	f43f ae94 	beq.w	800b9b4 <_printf_float+0x9c>
 800bc8c:	f108 0801 	add.w	r8, r8, #1
 800bc90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc94:	1a9b      	subs	r3, r3, r2
 800bc96:	eba3 030a 	sub.w	r3, r3, sl
 800bc9a:	4543      	cmp	r3, r8
 800bc9c:	dcee      	bgt.n	800bc7c <_printf_float+0x364>
 800bc9e:	e747      	b.n	800bb30 <_printf_float+0x218>
 800bca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bca2:	2a01      	cmp	r2, #1
 800bca4:	dc01      	bgt.n	800bcaa <_printf_float+0x392>
 800bca6:	07db      	lsls	r3, r3, #31
 800bca8:	d539      	bpl.n	800bd1e <_printf_float+0x406>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4642      	mov	r2, r8
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	47b8      	blx	r7
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	f43f ae7d 	beq.w	800b9b4 <_printf_float+0x9c>
 800bcba:	9b05      	ldr	r3, [sp, #20]
 800bcbc:	465a      	mov	r2, fp
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	47b8      	blx	r7
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	f108 0801 	add.w	r8, r8, #1
 800bcca:	f43f ae73 	beq.w	800b9b4 <_printf_float+0x9c>
 800bcce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bcd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcdc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bce0:	d018      	beq.n	800bd14 <_printf_float+0x3fc>
 800bce2:	4642      	mov	r2, r8
 800bce4:	4631      	mov	r1, r6
 800bce6:	4628      	mov	r0, r5
 800bce8:	47b8      	blx	r7
 800bcea:	3001      	adds	r0, #1
 800bcec:	d10e      	bne.n	800bd0c <_printf_float+0x3f4>
 800bcee:	e661      	b.n	800b9b4 <_printf_float+0x9c>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	464a      	mov	r2, r9
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	47b8      	blx	r7
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	f43f ae5a 	beq.w	800b9b4 <_printf_float+0x9c>
 800bd00:	f108 0801 	add.w	r8, r8, #1
 800bd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd06:	3b01      	subs	r3, #1
 800bd08:	4543      	cmp	r3, r8
 800bd0a:	dcf1      	bgt.n	800bcf0 <_printf_float+0x3d8>
 800bd0c:	4653      	mov	r3, sl
 800bd0e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd12:	e6dd      	b.n	800bad0 <_printf_float+0x1b8>
 800bd14:	f04f 0800 	mov.w	r8, #0
 800bd18:	f104 091a 	add.w	r9, r4, #26
 800bd1c:	e7f2      	b.n	800bd04 <_printf_float+0x3ec>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e7df      	b.n	800bce2 <_printf_float+0x3ca>
 800bd22:	2301      	movs	r3, #1
 800bd24:	464a      	mov	r2, r9
 800bd26:	4631      	mov	r1, r6
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b8      	blx	r7
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	f43f ae41 	beq.w	800b9b4 <_printf_float+0x9c>
 800bd32:	f108 0801 	add.w	r8, r8, #1
 800bd36:	68e3      	ldr	r3, [r4, #12]
 800bd38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd3a:	1a9b      	subs	r3, r3, r2
 800bd3c:	4543      	cmp	r3, r8
 800bd3e:	dcf0      	bgt.n	800bd22 <_printf_float+0x40a>
 800bd40:	e6fa      	b.n	800bb38 <_printf_float+0x220>
 800bd42:	f04f 0800 	mov.w	r8, #0
 800bd46:	f104 0919 	add.w	r9, r4, #25
 800bd4a:	e7f4      	b.n	800bd36 <_printf_float+0x41e>
 800bd4c:	2900      	cmp	r1, #0
 800bd4e:	f43f ae8a 	beq.w	800ba66 <_printf_float+0x14e>
 800bd52:	f04f 0c00 	mov.w	ip, #0
 800bd56:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800bd5a:	e9cd 0900 	strd	r0, r9, [sp]
 800bd5e:	6022      	str	r2, [r4, #0]
 800bd60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd64:	4628      	mov	r0, r5
 800bd66:	f7ff fd4f 	bl	800b808 <__cvt>
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	e64a      	b.n	800ba04 <_printf_float+0xec>
 800bd6e:	bf00      	nop

0800bd70 <_printf_common>:
 800bd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	4691      	mov	r9, r2
 800bd76:	461f      	mov	r7, r3
 800bd78:	688a      	ldr	r2, [r1, #8]
 800bd7a:	690b      	ldr	r3, [r1, #16]
 800bd7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd80:	4293      	cmp	r3, r2
 800bd82:	bfb8      	it	lt
 800bd84:	4613      	movlt	r3, r2
 800bd86:	f8c9 3000 	str.w	r3, [r9]
 800bd8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460c      	mov	r4, r1
 800bd92:	b112      	cbz	r2, 800bd9a <_printf_common+0x2a>
 800bd94:	3301      	adds	r3, #1
 800bd96:	f8c9 3000 	str.w	r3, [r9]
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	0699      	lsls	r1, r3, #26
 800bd9e:	bf42      	ittt	mi
 800bda0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bda4:	3302      	addmi	r3, #2
 800bda6:	f8c9 3000 	strmi.w	r3, [r9]
 800bdaa:	6825      	ldr	r5, [r4, #0]
 800bdac:	f015 0506 	ands.w	r5, r5, #6
 800bdb0:	d107      	bne.n	800bdc2 <_printf_common+0x52>
 800bdb2:	f104 0a19 	add.w	sl, r4, #25
 800bdb6:	68e3      	ldr	r3, [r4, #12]
 800bdb8:	f8d9 2000 	ldr.w	r2, [r9]
 800bdbc:	1a9b      	subs	r3, r3, r2
 800bdbe:	42ab      	cmp	r3, r5
 800bdc0:	dc28      	bgt.n	800be14 <_printf_common+0xa4>
 800bdc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bdc6:	6822      	ldr	r2, [r4, #0]
 800bdc8:	3300      	adds	r3, #0
 800bdca:	bf18      	it	ne
 800bdcc:	2301      	movne	r3, #1
 800bdce:	0692      	lsls	r2, r2, #26
 800bdd0:	d42d      	bmi.n	800be2e <_printf_common+0xbe>
 800bdd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	4630      	mov	r0, r6
 800bdda:	47c0      	blx	r8
 800bddc:	3001      	adds	r0, #1
 800bdde:	d020      	beq.n	800be22 <_printf_common+0xb2>
 800bde0:	6823      	ldr	r3, [r4, #0]
 800bde2:	68e5      	ldr	r5, [r4, #12]
 800bde4:	f8d9 2000 	ldr.w	r2, [r9]
 800bde8:	f003 0306 	and.w	r3, r3, #6
 800bdec:	2b04      	cmp	r3, #4
 800bdee:	bf08      	it	eq
 800bdf0:	1aad      	subeq	r5, r5, r2
 800bdf2:	68a3      	ldr	r3, [r4, #8]
 800bdf4:	6922      	ldr	r2, [r4, #16]
 800bdf6:	bf0c      	ite	eq
 800bdf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdfc:	2500      	movne	r5, #0
 800bdfe:	4293      	cmp	r3, r2
 800be00:	bfc4      	itt	gt
 800be02:	1a9b      	subgt	r3, r3, r2
 800be04:	18ed      	addgt	r5, r5, r3
 800be06:	f04f 0900 	mov.w	r9, #0
 800be0a:	341a      	adds	r4, #26
 800be0c:	454d      	cmp	r5, r9
 800be0e:	d11a      	bne.n	800be46 <_printf_common+0xd6>
 800be10:	2000      	movs	r0, #0
 800be12:	e008      	b.n	800be26 <_printf_common+0xb6>
 800be14:	2301      	movs	r3, #1
 800be16:	4652      	mov	r2, sl
 800be18:	4639      	mov	r1, r7
 800be1a:	4630      	mov	r0, r6
 800be1c:	47c0      	blx	r8
 800be1e:	3001      	adds	r0, #1
 800be20:	d103      	bne.n	800be2a <_printf_common+0xba>
 800be22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2a:	3501      	adds	r5, #1
 800be2c:	e7c3      	b.n	800bdb6 <_printf_common+0x46>
 800be2e:	18e1      	adds	r1, r4, r3
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	2030      	movs	r0, #48	; 0x30
 800be34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be38:	4422      	add	r2, r4
 800be3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be42:	3302      	adds	r3, #2
 800be44:	e7c5      	b.n	800bdd2 <_printf_common+0x62>
 800be46:	2301      	movs	r3, #1
 800be48:	4622      	mov	r2, r4
 800be4a:	4639      	mov	r1, r7
 800be4c:	4630      	mov	r0, r6
 800be4e:	47c0      	blx	r8
 800be50:	3001      	adds	r0, #1
 800be52:	d0e6      	beq.n	800be22 <_printf_common+0xb2>
 800be54:	f109 0901 	add.w	r9, r9, #1
 800be58:	e7d8      	b.n	800be0c <_printf_common+0x9c>
	...

0800be5c <_printf_i>:
 800be5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be64:	460c      	mov	r4, r1
 800be66:	7e09      	ldrb	r1, [r1, #24]
 800be68:	b085      	sub	sp, #20
 800be6a:	296e      	cmp	r1, #110	; 0x6e
 800be6c:	4617      	mov	r7, r2
 800be6e:	4606      	mov	r6, r0
 800be70:	4698      	mov	r8, r3
 800be72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be74:	f000 80b3 	beq.w	800bfde <_printf_i+0x182>
 800be78:	d822      	bhi.n	800bec0 <_printf_i+0x64>
 800be7a:	2963      	cmp	r1, #99	; 0x63
 800be7c:	d036      	beq.n	800beec <_printf_i+0x90>
 800be7e:	d80a      	bhi.n	800be96 <_printf_i+0x3a>
 800be80:	2900      	cmp	r1, #0
 800be82:	f000 80b9 	beq.w	800bff8 <_printf_i+0x19c>
 800be86:	2958      	cmp	r1, #88	; 0x58
 800be88:	f000 8083 	beq.w	800bf92 <_printf_i+0x136>
 800be8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800be94:	e032      	b.n	800befc <_printf_i+0xa0>
 800be96:	2964      	cmp	r1, #100	; 0x64
 800be98:	d001      	beq.n	800be9e <_printf_i+0x42>
 800be9a:	2969      	cmp	r1, #105	; 0x69
 800be9c:	d1f6      	bne.n	800be8c <_printf_i+0x30>
 800be9e:	6820      	ldr	r0, [r4, #0]
 800bea0:	6813      	ldr	r3, [r2, #0]
 800bea2:	0605      	lsls	r5, r0, #24
 800bea4:	f103 0104 	add.w	r1, r3, #4
 800bea8:	d52a      	bpl.n	800bf00 <_printf_i+0xa4>
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6011      	str	r1, [r2, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da03      	bge.n	800beba <_printf_i+0x5e>
 800beb2:	222d      	movs	r2, #45	; 0x2d
 800beb4:	425b      	negs	r3, r3
 800beb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800beba:	486f      	ldr	r0, [pc, #444]	; (800c078 <_printf_i+0x21c>)
 800bebc:	220a      	movs	r2, #10
 800bebe:	e039      	b.n	800bf34 <_printf_i+0xd8>
 800bec0:	2973      	cmp	r1, #115	; 0x73
 800bec2:	f000 809d 	beq.w	800c000 <_printf_i+0x1a4>
 800bec6:	d808      	bhi.n	800beda <_printf_i+0x7e>
 800bec8:	296f      	cmp	r1, #111	; 0x6f
 800beca:	d020      	beq.n	800bf0e <_printf_i+0xb2>
 800becc:	2970      	cmp	r1, #112	; 0x70
 800bece:	d1dd      	bne.n	800be8c <_printf_i+0x30>
 800bed0:	6823      	ldr	r3, [r4, #0]
 800bed2:	f043 0320 	orr.w	r3, r3, #32
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	e003      	b.n	800bee2 <_printf_i+0x86>
 800beda:	2975      	cmp	r1, #117	; 0x75
 800bedc:	d017      	beq.n	800bf0e <_printf_i+0xb2>
 800bede:	2978      	cmp	r1, #120	; 0x78
 800bee0:	d1d4      	bne.n	800be8c <_printf_i+0x30>
 800bee2:	2378      	movs	r3, #120	; 0x78
 800bee4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bee8:	4864      	ldr	r0, [pc, #400]	; (800c07c <_printf_i+0x220>)
 800beea:	e055      	b.n	800bf98 <_printf_i+0x13c>
 800beec:	6813      	ldr	r3, [r2, #0]
 800beee:	1d19      	adds	r1, r3, #4
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6011      	str	r1, [r2, #0]
 800bef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800befc:	2301      	movs	r3, #1
 800befe:	e08c      	b.n	800c01a <_printf_i+0x1be>
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6011      	str	r1, [r2, #0]
 800bf04:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf08:	bf18      	it	ne
 800bf0a:	b21b      	sxthne	r3, r3
 800bf0c:	e7cf      	b.n	800beae <_printf_i+0x52>
 800bf0e:	6813      	ldr	r3, [r2, #0]
 800bf10:	6825      	ldr	r5, [r4, #0]
 800bf12:	1d18      	adds	r0, r3, #4
 800bf14:	6010      	str	r0, [r2, #0]
 800bf16:	0628      	lsls	r0, r5, #24
 800bf18:	d501      	bpl.n	800bf1e <_printf_i+0xc2>
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	e002      	b.n	800bf24 <_printf_i+0xc8>
 800bf1e:	0668      	lsls	r0, r5, #25
 800bf20:	d5fb      	bpl.n	800bf1a <_printf_i+0xbe>
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	4854      	ldr	r0, [pc, #336]	; (800c078 <_printf_i+0x21c>)
 800bf26:	296f      	cmp	r1, #111	; 0x6f
 800bf28:	bf14      	ite	ne
 800bf2a:	220a      	movne	r2, #10
 800bf2c:	2208      	moveq	r2, #8
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf34:	6865      	ldr	r5, [r4, #4]
 800bf36:	60a5      	str	r5, [r4, #8]
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	f2c0 8095 	blt.w	800c068 <_printf_i+0x20c>
 800bf3e:	6821      	ldr	r1, [r4, #0]
 800bf40:	f021 0104 	bic.w	r1, r1, #4
 800bf44:	6021      	str	r1, [r4, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d13d      	bne.n	800bfc6 <_printf_i+0x16a>
 800bf4a:	2d00      	cmp	r5, #0
 800bf4c:	f040 808e 	bne.w	800c06c <_printf_i+0x210>
 800bf50:	4665      	mov	r5, ip
 800bf52:	2a08      	cmp	r2, #8
 800bf54:	d10b      	bne.n	800bf6e <_printf_i+0x112>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	07db      	lsls	r3, r3, #31
 800bf5a:	d508      	bpl.n	800bf6e <_printf_i+0x112>
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	6862      	ldr	r2, [r4, #4]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	bfde      	ittt	le
 800bf64:	2330      	movle	r3, #48	; 0x30
 800bf66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf6e:	ebac 0305 	sub.w	r3, ip, r5
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	f8cd 8000 	str.w	r8, [sp]
 800bf78:	463b      	mov	r3, r7
 800bf7a:	aa03      	add	r2, sp, #12
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7ff fef6 	bl	800bd70 <_printf_common>
 800bf84:	3001      	adds	r0, #1
 800bf86:	d14d      	bne.n	800c024 <_printf_i+0x1c8>
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf8c:	b005      	add	sp, #20
 800bf8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf92:	4839      	ldr	r0, [pc, #228]	; (800c078 <_printf_i+0x21c>)
 800bf94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf98:	6813      	ldr	r3, [r2, #0]
 800bf9a:	6821      	ldr	r1, [r4, #0]
 800bf9c:	1d1d      	adds	r5, r3, #4
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6015      	str	r5, [r2, #0]
 800bfa2:	060a      	lsls	r2, r1, #24
 800bfa4:	d50b      	bpl.n	800bfbe <_printf_i+0x162>
 800bfa6:	07ca      	lsls	r2, r1, #31
 800bfa8:	bf44      	itt	mi
 800bfaa:	f041 0120 	orrmi.w	r1, r1, #32
 800bfae:	6021      	strmi	r1, [r4, #0]
 800bfb0:	b91b      	cbnz	r3, 800bfba <_printf_i+0x15e>
 800bfb2:	6822      	ldr	r2, [r4, #0]
 800bfb4:	f022 0220 	bic.w	r2, r2, #32
 800bfb8:	6022      	str	r2, [r4, #0]
 800bfba:	2210      	movs	r2, #16
 800bfbc:	e7b7      	b.n	800bf2e <_printf_i+0xd2>
 800bfbe:	064d      	lsls	r5, r1, #25
 800bfc0:	bf48      	it	mi
 800bfc2:	b29b      	uxthmi	r3, r3
 800bfc4:	e7ef      	b.n	800bfa6 <_printf_i+0x14a>
 800bfc6:	4665      	mov	r5, ip
 800bfc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfcc:	fb02 3311 	mls	r3, r2, r1, r3
 800bfd0:	5cc3      	ldrb	r3, [r0, r3]
 800bfd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	2900      	cmp	r1, #0
 800bfda:	d1f5      	bne.n	800bfc8 <_printf_i+0x16c>
 800bfdc:	e7b9      	b.n	800bf52 <_printf_i+0xf6>
 800bfde:	6813      	ldr	r3, [r2, #0]
 800bfe0:	6825      	ldr	r5, [r4, #0]
 800bfe2:	6961      	ldr	r1, [r4, #20]
 800bfe4:	1d18      	adds	r0, r3, #4
 800bfe6:	6010      	str	r0, [r2, #0]
 800bfe8:	0628      	lsls	r0, r5, #24
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	d501      	bpl.n	800bff2 <_printf_i+0x196>
 800bfee:	6019      	str	r1, [r3, #0]
 800bff0:	e002      	b.n	800bff8 <_printf_i+0x19c>
 800bff2:	066a      	lsls	r2, r5, #25
 800bff4:	d5fb      	bpl.n	800bfee <_printf_i+0x192>
 800bff6:	8019      	strh	r1, [r3, #0]
 800bff8:	2300      	movs	r3, #0
 800bffa:	6123      	str	r3, [r4, #16]
 800bffc:	4665      	mov	r5, ip
 800bffe:	e7b9      	b.n	800bf74 <_printf_i+0x118>
 800c000:	6813      	ldr	r3, [r2, #0]
 800c002:	1d19      	adds	r1, r3, #4
 800c004:	6011      	str	r1, [r2, #0]
 800c006:	681d      	ldr	r5, [r3, #0]
 800c008:	6862      	ldr	r2, [r4, #4]
 800c00a:	2100      	movs	r1, #0
 800c00c:	4628      	mov	r0, r5
 800c00e:	f7f4 f96f 	bl	80002f0 <memchr>
 800c012:	b108      	cbz	r0, 800c018 <_printf_i+0x1bc>
 800c014:	1b40      	subs	r0, r0, r5
 800c016:	6060      	str	r0, [r4, #4]
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	6123      	str	r3, [r4, #16]
 800c01c:	2300      	movs	r3, #0
 800c01e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c022:	e7a7      	b.n	800bf74 <_printf_i+0x118>
 800c024:	6923      	ldr	r3, [r4, #16]
 800c026:	462a      	mov	r2, r5
 800c028:	4639      	mov	r1, r7
 800c02a:	4630      	mov	r0, r6
 800c02c:	47c0      	blx	r8
 800c02e:	3001      	adds	r0, #1
 800c030:	d0aa      	beq.n	800bf88 <_printf_i+0x12c>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	079b      	lsls	r3, r3, #30
 800c036:	d413      	bmi.n	800c060 <_printf_i+0x204>
 800c038:	68e0      	ldr	r0, [r4, #12]
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	4298      	cmp	r0, r3
 800c03e:	bfb8      	it	lt
 800c040:	4618      	movlt	r0, r3
 800c042:	e7a3      	b.n	800bf8c <_printf_i+0x130>
 800c044:	2301      	movs	r3, #1
 800c046:	464a      	mov	r2, r9
 800c048:	4639      	mov	r1, r7
 800c04a:	4630      	mov	r0, r6
 800c04c:	47c0      	blx	r8
 800c04e:	3001      	adds	r0, #1
 800c050:	d09a      	beq.n	800bf88 <_printf_i+0x12c>
 800c052:	3501      	adds	r5, #1
 800c054:	68e3      	ldr	r3, [r4, #12]
 800c056:	9a03      	ldr	r2, [sp, #12]
 800c058:	1a9b      	subs	r3, r3, r2
 800c05a:	42ab      	cmp	r3, r5
 800c05c:	dcf2      	bgt.n	800c044 <_printf_i+0x1e8>
 800c05e:	e7eb      	b.n	800c038 <_printf_i+0x1dc>
 800c060:	2500      	movs	r5, #0
 800c062:	f104 0919 	add.w	r9, r4, #25
 800c066:	e7f5      	b.n	800c054 <_printf_i+0x1f8>
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1ac      	bne.n	800bfc6 <_printf_i+0x16a>
 800c06c:	7803      	ldrb	r3, [r0, #0]
 800c06e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c072:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c076:	e76c      	b.n	800bf52 <_printf_i+0xf6>
 800c078:	0800e81e 	.word	0x0800e81e
 800c07c:	0800e82f 	.word	0x0800e82f

0800c080 <iprintf>:
 800c080:	b40f      	push	{r0, r1, r2, r3}
 800c082:	4b0a      	ldr	r3, [pc, #40]	; (800c0ac <iprintf+0x2c>)
 800c084:	b513      	push	{r0, r1, r4, lr}
 800c086:	681c      	ldr	r4, [r3, #0]
 800c088:	b124      	cbz	r4, 800c094 <iprintf+0x14>
 800c08a:	69a3      	ldr	r3, [r4, #24]
 800c08c:	b913      	cbnz	r3, 800c094 <iprintf+0x14>
 800c08e:	4620      	mov	r0, r4
 800c090:	f7ff fa48 	bl	800b524 <__sinit>
 800c094:	ab05      	add	r3, sp, #20
 800c096:	9a04      	ldr	r2, [sp, #16]
 800c098:	68a1      	ldr	r1, [r4, #8]
 800c09a:	9301      	str	r3, [sp, #4]
 800c09c:	4620      	mov	r0, r4
 800c09e:	f001 fb7d 	bl	800d79c <_vfiprintf_r>
 800c0a2:	b002      	add	sp, #8
 800c0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0a8:	b004      	add	sp, #16
 800c0aa:	4770      	bx	lr
 800c0ac:	2400036c 	.word	0x2400036c

0800c0b0 <_puts_r>:
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	460e      	mov	r6, r1
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	b118      	cbz	r0, 800c0c0 <_puts_r+0x10>
 800c0b8:	6983      	ldr	r3, [r0, #24]
 800c0ba:	b90b      	cbnz	r3, 800c0c0 <_puts_r+0x10>
 800c0bc:	f7ff fa32 	bl	800b524 <__sinit>
 800c0c0:	69ab      	ldr	r3, [r5, #24]
 800c0c2:	68ac      	ldr	r4, [r5, #8]
 800c0c4:	b913      	cbnz	r3, 800c0cc <_puts_r+0x1c>
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f7ff fa2c 	bl	800b524 <__sinit>
 800c0cc:	4b23      	ldr	r3, [pc, #140]	; (800c15c <_puts_r+0xac>)
 800c0ce:	429c      	cmp	r4, r3
 800c0d0:	d117      	bne.n	800c102 <_puts_r+0x52>
 800c0d2:	686c      	ldr	r4, [r5, #4]
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	071b      	lsls	r3, r3, #28
 800c0d8:	d51d      	bpl.n	800c116 <_puts_r+0x66>
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	b1db      	cbz	r3, 800c116 <_puts_r+0x66>
 800c0de:	3e01      	subs	r6, #1
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	60a3      	str	r3, [r4, #8]
 800c0ea:	b9e9      	cbnz	r1, 800c128 <_puts_r+0x78>
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da2e      	bge.n	800c14e <_puts_r+0x9e>
 800c0f0:	4622      	mov	r2, r4
 800c0f2:	210a      	movs	r1, #10
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	f000 f8fd 	bl	800c2f4 <__swbuf_r>
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	d011      	beq.n	800c122 <_puts_r+0x72>
 800c0fe:	200a      	movs	r0, #10
 800c100:	e011      	b.n	800c126 <_puts_r+0x76>
 800c102:	4b17      	ldr	r3, [pc, #92]	; (800c160 <_puts_r+0xb0>)
 800c104:	429c      	cmp	r4, r3
 800c106:	d101      	bne.n	800c10c <_puts_r+0x5c>
 800c108:	68ac      	ldr	r4, [r5, #8]
 800c10a:	e7e3      	b.n	800c0d4 <_puts_r+0x24>
 800c10c:	4b15      	ldr	r3, [pc, #84]	; (800c164 <_puts_r+0xb4>)
 800c10e:	429c      	cmp	r4, r3
 800c110:	bf08      	it	eq
 800c112:	68ec      	ldreq	r4, [r5, #12]
 800c114:	e7de      	b.n	800c0d4 <_puts_r+0x24>
 800c116:	4621      	mov	r1, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	f000 f94f 	bl	800c3bc <__swsetup_r>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d0dd      	beq.n	800c0de <_puts_r+0x2e>
 800c122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c126:	bd70      	pop	{r4, r5, r6, pc}
 800c128:	2b00      	cmp	r3, #0
 800c12a:	da04      	bge.n	800c136 <_puts_r+0x86>
 800c12c:	69a2      	ldr	r2, [r4, #24]
 800c12e:	429a      	cmp	r2, r3
 800c130:	dc06      	bgt.n	800c140 <_puts_r+0x90>
 800c132:	290a      	cmp	r1, #10
 800c134:	d004      	beq.n	800c140 <_puts_r+0x90>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	6022      	str	r2, [r4, #0]
 800c13c:	7019      	strb	r1, [r3, #0]
 800c13e:	e7cf      	b.n	800c0e0 <_puts_r+0x30>
 800c140:	4622      	mov	r2, r4
 800c142:	4628      	mov	r0, r5
 800c144:	f000 f8d6 	bl	800c2f4 <__swbuf_r>
 800c148:	3001      	adds	r0, #1
 800c14a:	d1c9      	bne.n	800c0e0 <_puts_r+0x30>
 800c14c:	e7e9      	b.n	800c122 <_puts_r+0x72>
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	200a      	movs	r0, #10
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	6022      	str	r2, [r4, #0]
 800c156:	7018      	strb	r0, [r3, #0]
 800c158:	e7e5      	b.n	800c126 <_puts_r+0x76>
 800c15a:	bf00      	nop
 800c15c:	0800e7c8 	.word	0x0800e7c8
 800c160:	0800e7e8 	.word	0x0800e7e8
 800c164:	0800e7a8 	.word	0x0800e7a8

0800c168 <puts>:
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <puts+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f7ff bf9f 	b.w	800c0b0 <_puts_r>
 800c172:	bf00      	nop
 800c174:	2400036c 	.word	0x2400036c

0800c178 <srand>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4b0d      	ldr	r3, [pc, #52]	; (800c1b0 <srand+0x38>)
 800c17c:	681c      	ldr	r4, [r3, #0]
 800c17e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c180:	4605      	mov	r5, r0
 800c182:	b97b      	cbnz	r3, 800c1a4 <srand+0x2c>
 800c184:	2018      	movs	r0, #24
 800c186:	f7ff fa7b 	bl	800b680 <malloc>
 800c18a:	4a0a      	ldr	r2, [pc, #40]	; (800c1b4 <srand+0x3c>)
 800c18c:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <srand+0x40>)
 800c18e:	63a0      	str	r0, [r4, #56]	; 0x38
 800c190:	e9c0 2300 	strd	r2, r3, [r0]
 800c194:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <srand+0x44>)
 800c196:	6083      	str	r3, [r0, #8]
 800c198:	230b      	movs	r3, #11
 800c19a:	8183      	strh	r3, [r0, #12]
 800c19c:	2201      	movs	r2, #1
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c1a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	611d      	str	r5, [r3, #16]
 800c1aa:	615a      	str	r2, [r3, #20]
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop
 800c1b0:	2400036c 	.word	0x2400036c
 800c1b4:	abcd330e 	.word	0xabcd330e
 800c1b8:	e66d1234 	.word	0xe66d1234
 800c1bc:	0005deec 	.word	0x0005deec

0800c1c0 <rand>:
 800c1c0:	b538      	push	{r3, r4, r5, lr}
 800c1c2:	4b13      	ldr	r3, [pc, #76]	; (800c210 <rand+0x50>)
 800c1c4:	681c      	ldr	r4, [r3, #0]
 800c1c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c1c8:	b97b      	cbnz	r3, 800c1ea <rand+0x2a>
 800c1ca:	2018      	movs	r0, #24
 800c1cc:	f7ff fa58 	bl	800b680 <malloc>
 800c1d0:	4a10      	ldr	r2, [pc, #64]	; (800c214 <rand+0x54>)
 800c1d2:	4b11      	ldr	r3, [pc, #68]	; (800c218 <rand+0x58>)
 800c1d4:	63a0      	str	r0, [r4, #56]	; 0x38
 800c1d6:	e9c0 2300 	strd	r2, r3, [r0]
 800c1da:	4b10      	ldr	r3, [pc, #64]	; (800c21c <rand+0x5c>)
 800c1dc:	6083      	str	r3, [r0, #8]
 800c1de:	230b      	movs	r3, #11
 800c1e0:	8183      	strh	r3, [r0, #12]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c1ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c1ec:	480c      	ldr	r0, [pc, #48]	; (800c220 <rand+0x60>)
 800c1ee:	690a      	ldr	r2, [r1, #16]
 800c1f0:	694b      	ldr	r3, [r1, #20]
 800c1f2:	4c0c      	ldr	r4, [pc, #48]	; (800c224 <rand+0x64>)
 800c1f4:	4350      	muls	r0, r2
 800c1f6:	fb04 0003 	mla	r0, r4, r3, r0
 800c1fa:	fba2 2304 	umull	r2, r3, r2, r4
 800c1fe:	4403      	add	r3, r0
 800c200:	1c54      	adds	r4, r2, #1
 800c202:	f143 0500 	adc.w	r5, r3, #0
 800c206:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c20a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	2400036c 	.word	0x2400036c
 800c214:	abcd330e 	.word	0xabcd330e
 800c218:	e66d1234 	.word	0xe66d1234
 800c21c:	0005deec 	.word	0x0005deec
 800c220:	5851f42d 	.word	0x5851f42d
 800c224:	4c957f2d 	.word	0x4c957f2d

0800c228 <_sbrk_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4c06      	ldr	r4, [pc, #24]	; (800c244 <_sbrk_r+0x1c>)
 800c22c:	2300      	movs	r3, #0
 800c22e:	4605      	mov	r5, r0
 800c230:	4608      	mov	r0, r1
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	f7f6 fbb0 	bl	8002998 <_sbrk>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_sbrk_r+0x1a>
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_sbrk_r+0x1a>
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	24000cbc 	.word	0x24000cbc

0800c248 <__sread>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c250:	f001 fbba 	bl	800d9c8 <_read_r>
 800c254:	2800      	cmp	r0, #0
 800c256:	bfab      	itete	ge
 800c258:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c25a:	89a3      	ldrhlt	r3, [r4, #12]
 800c25c:	181b      	addge	r3, r3, r0
 800c25e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c262:	bfac      	ite	ge
 800c264:	6563      	strge	r3, [r4, #84]	; 0x54
 800c266:	81a3      	strhlt	r3, [r4, #12]
 800c268:	bd10      	pop	{r4, pc}

0800c26a <__swrite>:
 800c26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c26e:	461f      	mov	r7, r3
 800c270:	898b      	ldrh	r3, [r1, #12]
 800c272:	05db      	lsls	r3, r3, #23
 800c274:	4605      	mov	r5, r0
 800c276:	460c      	mov	r4, r1
 800c278:	4616      	mov	r6, r2
 800c27a:	d505      	bpl.n	800c288 <__swrite+0x1e>
 800c27c:	2302      	movs	r3, #2
 800c27e:	2200      	movs	r2, #0
 800c280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c284:	f000 fefe 	bl	800d084 <_lseek_r>
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c28e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	4632      	mov	r2, r6
 800c296:	463b      	mov	r3, r7
 800c298:	4628      	mov	r0, r5
 800c29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c29e:	f000 b87b 	b.w	800c398 <_write_r>

0800c2a2 <__sseek>:
 800c2a2:	b510      	push	{r4, lr}
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2aa:	f000 feeb 	bl	800d084 <_lseek_r>
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	bf15      	itete	ne
 800c2b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2be:	81a3      	strheq	r3, [r4, #12]
 800c2c0:	bf18      	it	ne
 800c2c2:	81a3      	strhne	r3, [r4, #12]
 800c2c4:	bd10      	pop	{r4, pc}

0800c2c6 <__sclose>:
 800c2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ca:	f000 b8e5 	b.w	800c498 <_close_r>

0800c2ce <strncmp>:
 800c2ce:	b510      	push	{r4, lr}
 800c2d0:	b16a      	cbz	r2, 800c2ee <strncmp+0x20>
 800c2d2:	3901      	subs	r1, #1
 800c2d4:	1884      	adds	r4, r0, r2
 800c2d6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c2da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d103      	bne.n	800c2ea <strncmp+0x1c>
 800c2e2:	42a0      	cmp	r0, r4
 800c2e4:	d001      	beq.n	800c2ea <strncmp+0x1c>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1f5      	bne.n	800c2d6 <strncmp+0x8>
 800c2ea:	1a98      	subs	r0, r3, r2
 800c2ec:	bd10      	pop	{r4, pc}
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	e7fc      	b.n	800c2ec <strncmp+0x1e>
	...

0800c2f4 <__swbuf_r>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	460e      	mov	r6, r1
 800c2f8:	4614      	mov	r4, r2
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	b118      	cbz	r0, 800c306 <__swbuf_r+0x12>
 800c2fe:	6983      	ldr	r3, [r0, #24]
 800c300:	b90b      	cbnz	r3, 800c306 <__swbuf_r+0x12>
 800c302:	f7ff f90f 	bl	800b524 <__sinit>
 800c306:	4b21      	ldr	r3, [pc, #132]	; (800c38c <__swbuf_r+0x98>)
 800c308:	429c      	cmp	r4, r3
 800c30a:	d12a      	bne.n	800c362 <__swbuf_r+0x6e>
 800c30c:	686c      	ldr	r4, [r5, #4]
 800c30e:	69a3      	ldr	r3, [r4, #24]
 800c310:	60a3      	str	r3, [r4, #8]
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	071a      	lsls	r2, r3, #28
 800c316:	d52e      	bpl.n	800c376 <__swbuf_r+0x82>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	b363      	cbz	r3, 800c376 <__swbuf_r+0x82>
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	6820      	ldr	r0, [r4, #0]
 800c320:	1ac0      	subs	r0, r0, r3
 800c322:	6963      	ldr	r3, [r4, #20]
 800c324:	b2f6      	uxtb	r6, r6
 800c326:	4283      	cmp	r3, r0
 800c328:	4637      	mov	r7, r6
 800c32a:	dc04      	bgt.n	800c336 <__swbuf_r+0x42>
 800c32c:	4621      	mov	r1, r4
 800c32e:	4628      	mov	r0, r5
 800c330:	f7ff f88e 	bl	800b450 <_fflush_r>
 800c334:	bb28      	cbnz	r0, 800c382 <__swbuf_r+0x8e>
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	3b01      	subs	r3, #1
 800c33a:	60a3      	str	r3, [r4, #8]
 800c33c:	6823      	ldr	r3, [r4, #0]
 800c33e:	1c5a      	adds	r2, r3, #1
 800c340:	6022      	str	r2, [r4, #0]
 800c342:	701e      	strb	r6, [r3, #0]
 800c344:	6963      	ldr	r3, [r4, #20]
 800c346:	3001      	adds	r0, #1
 800c348:	4283      	cmp	r3, r0
 800c34a:	d004      	beq.n	800c356 <__swbuf_r+0x62>
 800c34c:	89a3      	ldrh	r3, [r4, #12]
 800c34e:	07db      	lsls	r3, r3, #31
 800c350:	d519      	bpl.n	800c386 <__swbuf_r+0x92>
 800c352:	2e0a      	cmp	r6, #10
 800c354:	d117      	bne.n	800c386 <__swbuf_r+0x92>
 800c356:	4621      	mov	r1, r4
 800c358:	4628      	mov	r0, r5
 800c35a:	f7ff f879 	bl	800b450 <_fflush_r>
 800c35e:	b190      	cbz	r0, 800c386 <__swbuf_r+0x92>
 800c360:	e00f      	b.n	800c382 <__swbuf_r+0x8e>
 800c362:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <__swbuf_r+0x9c>)
 800c364:	429c      	cmp	r4, r3
 800c366:	d101      	bne.n	800c36c <__swbuf_r+0x78>
 800c368:	68ac      	ldr	r4, [r5, #8]
 800c36a:	e7d0      	b.n	800c30e <__swbuf_r+0x1a>
 800c36c:	4b09      	ldr	r3, [pc, #36]	; (800c394 <__swbuf_r+0xa0>)
 800c36e:	429c      	cmp	r4, r3
 800c370:	bf08      	it	eq
 800c372:	68ec      	ldreq	r4, [r5, #12]
 800c374:	e7cb      	b.n	800c30e <__swbuf_r+0x1a>
 800c376:	4621      	mov	r1, r4
 800c378:	4628      	mov	r0, r5
 800c37a:	f000 f81f 	bl	800c3bc <__swsetup_r>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0cc      	beq.n	800c31c <__swbuf_r+0x28>
 800c382:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c386:	4638      	mov	r0, r7
 800c388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c38a:	bf00      	nop
 800c38c:	0800e7c8 	.word	0x0800e7c8
 800c390:	0800e7e8 	.word	0x0800e7e8
 800c394:	0800e7a8 	.word	0x0800e7a8

0800c398 <_write_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4c07      	ldr	r4, [pc, #28]	; (800c3b8 <_write_r+0x20>)
 800c39c:	4605      	mov	r5, r0
 800c39e:	4608      	mov	r0, r1
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	6022      	str	r2, [r4, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	f7f4 fd12 	bl	8000dd0 <_write>
 800c3ac:	1c43      	adds	r3, r0, #1
 800c3ae:	d102      	bne.n	800c3b6 <_write_r+0x1e>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	b103      	cbz	r3, 800c3b6 <_write_r+0x1e>
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	24000cbc 	.word	0x24000cbc

0800c3bc <__swsetup_r>:
 800c3bc:	4b32      	ldr	r3, [pc, #200]	; (800c488 <__swsetup_r+0xcc>)
 800c3be:	b570      	push	{r4, r5, r6, lr}
 800c3c0:	681d      	ldr	r5, [r3, #0]
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	b125      	cbz	r5, 800c3d2 <__swsetup_r+0x16>
 800c3c8:	69ab      	ldr	r3, [r5, #24]
 800c3ca:	b913      	cbnz	r3, 800c3d2 <__swsetup_r+0x16>
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	f7ff f8a9 	bl	800b524 <__sinit>
 800c3d2:	4b2e      	ldr	r3, [pc, #184]	; (800c48c <__swsetup_r+0xd0>)
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d10f      	bne.n	800c3f8 <__swsetup_r+0x3c>
 800c3d8:	686c      	ldr	r4, [r5, #4]
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	0715      	lsls	r5, r2, #28
 800c3e2:	d42c      	bmi.n	800c43e <__swsetup_r+0x82>
 800c3e4:	06d0      	lsls	r0, r2, #27
 800c3e6:	d411      	bmi.n	800c40c <__swsetup_r+0x50>
 800c3e8:	2209      	movs	r2, #9
 800c3ea:	6032      	str	r2, [r6, #0]
 800c3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f0:	81a3      	strh	r3, [r4, #12]
 800c3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3f6:	e03e      	b.n	800c476 <__swsetup_r+0xba>
 800c3f8:	4b25      	ldr	r3, [pc, #148]	; (800c490 <__swsetup_r+0xd4>)
 800c3fa:	429c      	cmp	r4, r3
 800c3fc:	d101      	bne.n	800c402 <__swsetup_r+0x46>
 800c3fe:	68ac      	ldr	r4, [r5, #8]
 800c400:	e7eb      	b.n	800c3da <__swsetup_r+0x1e>
 800c402:	4b24      	ldr	r3, [pc, #144]	; (800c494 <__swsetup_r+0xd8>)
 800c404:	429c      	cmp	r4, r3
 800c406:	bf08      	it	eq
 800c408:	68ec      	ldreq	r4, [r5, #12]
 800c40a:	e7e6      	b.n	800c3da <__swsetup_r+0x1e>
 800c40c:	0751      	lsls	r1, r2, #29
 800c40e:	d512      	bpl.n	800c436 <__swsetup_r+0x7a>
 800c410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c412:	b141      	cbz	r1, 800c426 <__swsetup_r+0x6a>
 800c414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c418:	4299      	cmp	r1, r3
 800c41a:	d002      	beq.n	800c422 <__swsetup_r+0x66>
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7ff f94b 	bl	800b6b8 <_free_r>
 800c422:	2300      	movs	r3, #0
 800c424:	6363      	str	r3, [r4, #52]	; 0x34
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	2300      	movs	r3, #0
 800c430:	6063      	str	r3, [r4, #4]
 800c432:	6923      	ldr	r3, [r4, #16]
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	f043 0308 	orr.w	r3, r3, #8
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	b94b      	cbnz	r3, 800c456 <__swsetup_r+0x9a>
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c44c:	d003      	beq.n	800c456 <__swsetup_r+0x9a>
 800c44e:	4621      	mov	r1, r4
 800c450:	4630      	mov	r0, r6
 800c452:	f000 fe4d 	bl	800d0f0 <__smakebuf_r>
 800c456:	89a2      	ldrh	r2, [r4, #12]
 800c458:	f012 0301 	ands.w	r3, r2, #1
 800c45c:	d00c      	beq.n	800c478 <__swsetup_r+0xbc>
 800c45e:	2300      	movs	r3, #0
 800c460:	60a3      	str	r3, [r4, #8]
 800c462:	6963      	ldr	r3, [r4, #20]
 800c464:	425b      	negs	r3, r3
 800c466:	61a3      	str	r3, [r4, #24]
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	b953      	cbnz	r3, 800c482 <__swsetup_r+0xc6>
 800c46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c470:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c474:	d1ba      	bne.n	800c3ec <__swsetup_r+0x30>
 800c476:	bd70      	pop	{r4, r5, r6, pc}
 800c478:	0792      	lsls	r2, r2, #30
 800c47a:	bf58      	it	pl
 800c47c:	6963      	ldrpl	r3, [r4, #20]
 800c47e:	60a3      	str	r3, [r4, #8]
 800c480:	e7f2      	b.n	800c468 <__swsetup_r+0xac>
 800c482:	2000      	movs	r0, #0
 800c484:	e7f7      	b.n	800c476 <__swsetup_r+0xba>
 800c486:	bf00      	nop
 800c488:	2400036c 	.word	0x2400036c
 800c48c:	0800e7c8 	.word	0x0800e7c8
 800c490:	0800e7e8 	.word	0x0800e7e8
 800c494:	0800e7a8 	.word	0x0800e7a8

0800c498 <_close_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4c06      	ldr	r4, [pc, #24]	; (800c4b4 <_close_r+0x1c>)
 800c49c:	2300      	movs	r3, #0
 800c49e:	4605      	mov	r5, r0
 800c4a0:	4608      	mov	r0, r1
 800c4a2:	6023      	str	r3, [r4, #0]
 800c4a4:	f7f6 fa43 	bl	800292e <_close>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_close_r+0x1a>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_close_r+0x1a>
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	24000cbc 	.word	0x24000cbc

0800c4b8 <quorem>:
 800c4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	6903      	ldr	r3, [r0, #16]
 800c4be:	690c      	ldr	r4, [r1, #16]
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	f2c0 8082 	blt.w	800c5cc <quorem+0x114>
 800c4c8:	3c01      	subs	r4, #1
 800c4ca:	f101 0714 	add.w	r7, r1, #20
 800c4ce:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c4d2:	f100 0614 	add.w	r6, r0, #20
 800c4d6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c4da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c4de:	eb06 030c 	add.w	r3, r6, ip
 800c4e2:	3501      	adds	r5, #1
 800c4e4:	eb07 090c 	add.w	r9, r7, ip
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	fbb0 f5f5 	udiv	r5, r0, r5
 800c4ee:	b395      	cbz	r5, 800c556 <quorem+0x9e>
 800c4f0:	f04f 0a00 	mov.w	sl, #0
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	46b6      	mov	lr, r6
 800c4f8:	46d3      	mov	fp, sl
 800c4fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800c4fe:	b293      	uxth	r3, r2
 800c500:	fb05 a303 	mla	r3, r5, r3, sl
 800c504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c508:	b29b      	uxth	r3, r3
 800c50a:	ebab 0303 	sub.w	r3, fp, r3
 800c50e:	0c12      	lsrs	r2, r2, #16
 800c510:	f8de b000 	ldr.w	fp, [lr]
 800c514:	fb05 a202 	mla	r2, r5, r2, sl
 800c518:	fa13 f38b 	uxtah	r3, r3, fp
 800c51c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c520:	fa1f fb82 	uxth.w	fp, r2
 800c524:	f8de 2000 	ldr.w	r2, [lr]
 800c528:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c52c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c530:	b29b      	uxth	r3, r3
 800c532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c536:	4581      	cmp	r9, r0
 800c538:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c53c:	f84e 3b04 	str.w	r3, [lr], #4
 800c540:	d2db      	bcs.n	800c4fa <quorem+0x42>
 800c542:	f856 300c 	ldr.w	r3, [r6, ip]
 800c546:	b933      	cbnz	r3, 800c556 <quorem+0x9e>
 800c548:	9b01      	ldr	r3, [sp, #4]
 800c54a:	3b04      	subs	r3, #4
 800c54c:	429e      	cmp	r6, r3
 800c54e:	461a      	mov	r2, r3
 800c550:	d330      	bcc.n	800c5b4 <quorem+0xfc>
 800c552:	f8c8 4010 	str.w	r4, [r8, #16]
 800c556:	4640      	mov	r0, r8
 800c558:	f001 f822 	bl	800d5a0 <__mcmp>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	db25      	blt.n	800c5ac <quorem+0xf4>
 800c560:	3501      	adds	r5, #1
 800c562:	4630      	mov	r0, r6
 800c564:	f04f 0c00 	mov.w	ip, #0
 800c568:	f857 2b04 	ldr.w	r2, [r7], #4
 800c56c:	f8d0 e000 	ldr.w	lr, [r0]
 800c570:	b293      	uxth	r3, r2
 800c572:	ebac 0303 	sub.w	r3, ip, r3
 800c576:	0c12      	lsrs	r2, r2, #16
 800c578:	fa13 f38e 	uxtah	r3, r3, lr
 800c57c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c580:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c584:	b29b      	uxth	r3, r3
 800c586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c58a:	45b9      	cmp	r9, r7
 800c58c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c590:	f840 3b04 	str.w	r3, [r0], #4
 800c594:	d2e8      	bcs.n	800c568 <quorem+0xb0>
 800c596:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c59a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c59e:	b92a      	cbnz	r2, 800c5ac <quorem+0xf4>
 800c5a0:	3b04      	subs	r3, #4
 800c5a2:	429e      	cmp	r6, r3
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	d30b      	bcc.n	800c5c0 <quorem+0x108>
 800c5a8:	f8c8 4010 	str.w	r4, [r8, #16]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	b003      	add	sp, #12
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b4:	6812      	ldr	r2, [r2, #0]
 800c5b6:	3b04      	subs	r3, #4
 800c5b8:	2a00      	cmp	r2, #0
 800c5ba:	d1ca      	bne.n	800c552 <quorem+0x9a>
 800c5bc:	3c01      	subs	r4, #1
 800c5be:	e7c5      	b.n	800c54c <quorem+0x94>
 800c5c0:	6812      	ldr	r2, [r2, #0]
 800c5c2:	3b04      	subs	r3, #4
 800c5c4:	2a00      	cmp	r2, #0
 800c5c6:	d1ef      	bne.n	800c5a8 <quorem+0xf0>
 800c5c8:	3c01      	subs	r4, #1
 800c5ca:	e7ea      	b.n	800c5a2 <quorem+0xea>
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e7ee      	b.n	800c5ae <quorem+0xf6>

0800c5d0 <_dtoa_r>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	ec57 6b10 	vmov	r6, r7, d0
 800c5d8:	b095      	sub	sp, #84	; 0x54
 800c5da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c5dc:	9108      	str	r1, [sp, #32]
 800c5de:	4604      	mov	r4, r0
 800c5e0:	920a      	str	r2, [sp, #40]	; 0x28
 800c5e2:	9311      	str	r3, [sp, #68]	; 0x44
 800c5e4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c5e8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c5ec:	b93d      	cbnz	r5, 800c5fe <_dtoa_r+0x2e>
 800c5ee:	2010      	movs	r0, #16
 800c5f0:	f7ff f846 	bl	800b680 <malloc>
 800c5f4:	6260      	str	r0, [r4, #36]	; 0x24
 800c5f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5fa:	6005      	str	r5, [r0, #0]
 800c5fc:	60c5      	str	r5, [r0, #12]
 800c5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c600:	6819      	ldr	r1, [r3, #0]
 800c602:	b151      	cbz	r1, 800c61a <_dtoa_r+0x4a>
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	604a      	str	r2, [r1, #4]
 800c608:	2301      	movs	r3, #1
 800c60a:	4093      	lsls	r3, r2
 800c60c:	608b      	str	r3, [r1, #8]
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 fde4 	bl	800d1dc <_Bfree>
 800c614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	1e3b      	subs	r3, r7, #0
 800c61c:	bfb9      	ittee	lt
 800c61e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c622:	9303      	strlt	r3, [sp, #12]
 800c624:	2300      	movge	r3, #0
 800c626:	f8c8 3000 	strge.w	r3, [r8]
 800c62a:	9d03      	ldr	r5, [sp, #12]
 800c62c:	4bac      	ldr	r3, [pc, #688]	; (800c8e0 <_dtoa_r+0x310>)
 800c62e:	bfbc      	itt	lt
 800c630:	2201      	movlt	r2, #1
 800c632:	f8c8 2000 	strlt.w	r2, [r8]
 800c636:	43ab      	bics	r3, r5
 800c638:	d11b      	bne.n	800c672 <_dtoa_r+0xa2>
 800c63a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c63c:	f242 730f 	movw	r3, #9999	; 0x270f
 800c640:	6013      	str	r3, [r2, #0]
 800c642:	9b02      	ldr	r3, [sp, #8]
 800c644:	b923      	cbnz	r3, 800c650 <_dtoa_r+0x80>
 800c646:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	f000 84dd 	beq.w	800d00a <_dtoa_r+0xa3a>
 800c650:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c652:	b953      	cbnz	r3, 800c66a <_dtoa_r+0x9a>
 800c654:	4ba3      	ldr	r3, [pc, #652]	; (800c8e4 <_dtoa_r+0x314>)
 800c656:	e020      	b.n	800c69a <_dtoa_r+0xca>
 800c658:	4ba3      	ldr	r3, [pc, #652]	; (800c8e8 <_dtoa_r+0x318>)
 800c65a:	9304      	str	r3, [sp, #16]
 800c65c:	3308      	adds	r3, #8
 800c65e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c660:	6013      	str	r3, [r2, #0]
 800c662:	9804      	ldr	r0, [sp, #16]
 800c664:	b015      	add	sp, #84	; 0x54
 800c666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66a:	4b9e      	ldr	r3, [pc, #632]	; (800c8e4 <_dtoa_r+0x314>)
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	3303      	adds	r3, #3
 800c670:	e7f5      	b.n	800c65e <_dtoa_r+0x8e>
 800c672:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c676:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c67e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c682:	d10c      	bne.n	800c69e <_dtoa_r+0xce>
 800c684:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c686:	2301      	movs	r3, #1
 800c688:	6013      	str	r3, [r2, #0]
 800c68a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 84b9 	beq.w	800d004 <_dtoa_r+0xa34>
 800c692:	4b96      	ldr	r3, [pc, #600]	; (800c8ec <_dtoa_r+0x31c>)
 800c694:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c696:	6013      	str	r3, [r2, #0]
 800c698:	3b01      	subs	r3, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	e7e1      	b.n	800c662 <_dtoa_r+0x92>
 800c69e:	a913      	add	r1, sp, #76	; 0x4c
 800c6a0:	aa12      	add	r2, sp, #72	; 0x48
 800c6a2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f000 fff1 	bl	800d68e <__d2b>
 800c6ac:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800c6b0:	9001      	str	r0, [sp, #4]
 800c6b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c6b4:	2e00      	cmp	r6, #0
 800c6b6:	d046      	beq.n	800c746 <_dtoa_r+0x176>
 800c6b8:	9805      	ldr	r0, [sp, #20]
 800c6ba:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800c6be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6c2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800c6c6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6ca:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800c6ce:	2700      	movs	r7, #0
 800c6d0:	ee07 aa90 	vmov	s15, sl
 800c6d4:	ec43 2b16 	vmov	d6, r2, r3
 800c6d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c6dc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800c8c8 <_dtoa_r+0x2f8>
 800c6e0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800c6e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c6e8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800c8d0 <_dtoa_r+0x300>
 800c6ec:	eea7 6b04 	vfma.f64	d6, d7, d4
 800c6f0:	eeb0 7b46 	vmov.f64	d7, d6
 800c6f4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800c8d8 <_dtoa_r+0x308>
 800c6f8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c6fc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c700:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c708:	ee16 ba90 	vmov	fp, s13
 800c70c:	d508      	bpl.n	800c720 <_dtoa_r+0x150>
 800c70e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c712:	eeb4 6b47 	vcmp.f64	d6, d7
 800c716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71a:	bf18      	it	ne
 800c71c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800c720:	f1bb 0f16 	cmp.w	fp, #22
 800c724:	d834      	bhi.n	800c790 <_dtoa_r+0x1c0>
 800c726:	4b72      	ldr	r3, [pc, #456]	; (800c8f0 <_dtoa_r+0x320>)
 800c728:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c72c:	ed93 7b00 	vldr	d7, [r3]
 800c730:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c734:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73c:	dd01      	ble.n	800c742 <_dtoa_r+0x172>
 800c73e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c742:	2300      	movs	r3, #0
 800c744:	e025      	b.n	800c792 <_dtoa_r+0x1c2>
 800c746:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c748:	eb01 0a03 	add.w	sl, r1, r3
 800c74c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800c750:	2b20      	cmp	r3, #32
 800c752:	dd17      	ble.n	800c784 <_dtoa_r+0x1b4>
 800c754:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800c758:	9a02      	ldr	r2, [sp, #8]
 800c75a:	409d      	lsls	r5, r3
 800c75c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800c760:	fa22 f303 	lsr.w	r3, r2, r3
 800c764:	432b      	orrs	r3, r5
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c76e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c772:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c776:	9805      	ldr	r0, [sp, #20]
 800c778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c77c:	2701      	movs	r7, #1
 800c77e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800c782:	e7a5      	b.n	800c6d0 <_dtoa_r+0x100>
 800c784:	9a02      	ldr	r2, [sp, #8]
 800c786:	f1c3 0320 	rsb	r3, r3, #32
 800c78a:	fa02 f303 	lsl.w	r3, r2, r3
 800c78e:	e7ea      	b.n	800c766 <_dtoa_r+0x196>
 800c790:	2301      	movs	r3, #1
 800c792:	eba1 0a0a 	sub.w	sl, r1, sl
 800c796:	9310      	str	r3, [sp, #64]	; 0x40
 800c798:	f1ba 0301 	subs.w	r3, sl, #1
 800c79c:	9307      	str	r3, [sp, #28]
 800c79e:	bf43      	ittte	mi
 800c7a0:	2300      	movmi	r3, #0
 800c7a2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800c7a6:	9307      	strmi	r3, [sp, #28]
 800c7a8:	f04f 0a00 	movpl.w	sl, #0
 800c7ac:	f1bb 0f00 	cmp.w	fp, #0
 800c7b0:	db19      	blt.n	800c7e6 <_dtoa_r+0x216>
 800c7b2:	9b07      	ldr	r3, [sp, #28]
 800c7b4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c7b8:	445b      	add	r3, fp
 800c7ba:	9307      	str	r3, [sp, #28]
 800c7bc:	f04f 0800 	mov.w	r8, #0
 800c7c0:	9b08      	ldr	r3, [sp, #32]
 800c7c2:	2b09      	cmp	r3, #9
 800c7c4:	d866      	bhi.n	800c894 <_dtoa_r+0x2c4>
 800c7c6:	2b05      	cmp	r3, #5
 800c7c8:	bfc4      	itt	gt
 800c7ca:	3b04      	subgt	r3, #4
 800c7cc:	9308      	strgt	r3, [sp, #32]
 800c7ce:	9b08      	ldr	r3, [sp, #32]
 800c7d0:	f1a3 0302 	sub.w	r3, r3, #2
 800c7d4:	bfcc      	ite	gt
 800c7d6:	2500      	movgt	r5, #0
 800c7d8:	2501      	movle	r5, #1
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d866      	bhi.n	800c8ac <_dtoa_r+0x2dc>
 800c7de:	e8df f003 	tbb	[pc, r3]
 800c7e2:	5755      	.short	0x5755
 800c7e4:	4909      	.short	0x4909
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	ebaa 0a0b 	sub.w	sl, sl, fp
 800c7ec:	f1cb 0800 	rsb	r8, fp, #0
 800c7f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7f2:	e7e5      	b.n	800c7c0 <_dtoa_r+0x1f0>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	dd59      	ble.n	800c8b2 <_dtoa_r+0x2e2>
 800c7fe:	9306      	str	r3, [sp, #24]
 800c800:	4699      	mov	r9, r3
 800c802:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c804:	2200      	movs	r2, #0
 800c806:	6072      	str	r2, [r6, #4]
 800c808:	2204      	movs	r2, #4
 800c80a:	f102 0014 	add.w	r0, r2, #20
 800c80e:	4298      	cmp	r0, r3
 800c810:	6871      	ldr	r1, [r6, #4]
 800c812:	d953      	bls.n	800c8bc <_dtoa_r+0x2ec>
 800c814:	4620      	mov	r0, r4
 800c816:	f000 fcad 	bl	800d174 <_Balloc>
 800c81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c81c:	6030      	str	r0, [r6, #0]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	f1b9 0f0e 	cmp.w	r9, #14
 800c826:	f200 80c2 	bhi.w	800c9ae <_dtoa_r+0x3de>
 800c82a:	2d00      	cmp	r5, #0
 800c82c:	f000 80bf 	beq.w	800c9ae <_dtoa_r+0x3de>
 800c830:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c834:	f1bb 0f00 	cmp.w	fp, #0
 800c838:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800c83c:	f340 80e6 	ble.w	800ca0c <_dtoa_r+0x43c>
 800c840:	4a2b      	ldr	r2, [pc, #172]	; (800c8f0 <_dtoa_r+0x320>)
 800c842:	f00b 030f 	and.w	r3, fp, #15
 800c846:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c84a:	ed93 7b00 	vldr	d7, [r3]
 800c84e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800c852:	06da      	lsls	r2, r3, #27
 800c854:	f140 80d8 	bpl.w	800ca08 <_dtoa_r+0x438>
 800c858:	4a26      	ldr	r2, [pc, #152]	; (800c8f4 <_dtoa_r+0x324>)
 800c85a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800c85e:	ed92 6b08 	vldr	d6, [r2, #32]
 800c862:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800c866:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c86a:	f003 030f 	and.w	r3, r3, #15
 800c86e:	2203      	movs	r2, #3
 800c870:	4920      	ldr	r1, [pc, #128]	; (800c8f4 <_dtoa_r+0x324>)
 800c872:	e04a      	b.n	800c90a <_dtoa_r+0x33a>
 800c874:	2301      	movs	r3, #1
 800c876:	9309      	str	r3, [sp, #36]	; 0x24
 800c878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c87a:	445b      	add	r3, fp
 800c87c:	f103 0901 	add.w	r9, r3, #1
 800c880:	9306      	str	r3, [sp, #24]
 800c882:	464b      	mov	r3, r9
 800c884:	2b01      	cmp	r3, #1
 800c886:	bfb8      	it	lt
 800c888:	2301      	movlt	r3, #1
 800c88a:	e7ba      	b.n	800c802 <_dtoa_r+0x232>
 800c88c:	2300      	movs	r3, #0
 800c88e:	e7b2      	b.n	800c7f6 <_dtoa_r+0x226>
 800c890:	2300      	movs	r3, #0
 800c892:	e7f0      	b.n	800c876 <_dtoa_r+0x2a6>
 800c894:	2501      	movs	r5, #1
 800c896:	2300      	movs	r3, #0
 800c898:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800c89c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8a0:	9306      	str	r3, [sp, #24]
 800c8a2:	4699      	mov	r9, r3
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	2312      	movs	r3, #18
 800c8a8:	920a      	str	r2, [sp, #40]	; 0x28
 800c8aa:	e7aa      	b.n	800c802 <_dtoa_r+0x232>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b0:	e7f4      	b.n	800c89c <_dtoa_r+0x2cc>
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	9306      	str	r3, [sp, #24]
 800c8b6:	4699      	mov	r9, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	e7f5      	b.n	800c8a8 <_dtoa_r+0x2d8>
 800c8bc:	3101      	adds	r1, #1
 800c8be:	6071      	str	r1, [r6, #4]
 800c8c0:	0052      	lsls	r2, r2, #1
 800c8c2:	e7a2      	b.n	800c80a <_dtoa_r+0x23a>
 800c8c4:	f3af 8000 	nop.w
 800c8c8:	636f4361 	.word	0x636f4361
 800c8cc:	3fd287a7 	.word	0x3fd287a7
 800c8d0:	8b60c8b3 	.word	0x8b60c8b3
 800c8d4:	3fc68a28 	.word	0x3fc68a28
 800c8d8:	509f79fb 	.word	0x509f79fb
 800c8dc:	3fd34413 	.word	0x3fd34413
 800c8e0:	7ff00000 	.word	0x7ff00000
 800c8e4:	0800e849 	.word	0x0800e849
 800c8e8:	0800e840 	.word	0x0800e840
 800c8ec:	0800e81d 	.word	0x0800e81d
 800c8f0:	0800e878 	.word	0x0800e878
 800c8f4:	0800e850 	.word	0x0800e850
 800c8f8:	07de      	lsls	r6, r3, #31
 800c8fa:	d504      	bpl.n	800c906 <_dtoa_r+0x336>
 800c8fc:	ed91 6b00 	vldr	d6, [r1]
 800c900:	3201      	adds	r2, #1
 800c902:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c906:	105b      	asrs	r3, r3, #1
 800c908:	3108      	adds	r1, #8
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1f4      	bne.n	800c8f8 <_dtoa_r+0x328>
 800c90e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c912:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c916:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c91a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 80a7 	beq.w	800ca70 <_dtoa_r+0x4a0>
 800c922:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c926:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c92a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c932:	f140 809d 	bpl.w	800ca70 <_dtoa_r+0x4a0>
 800c936:	f1b9 0f00 	cmp.w	r9, #0
 800c93a:	f000 8099 	beq.w	800ca70 <_dtoa_r+0x4a0>
 800c93e:	9b06      	ldr	r3, [sp, #24]
 800c940:	2b00      	cmp	r3, #0
 800c942:	dd30      	ble.n	800c9a6 <_dtoa_r+0x3d6>
 800c944:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c948:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c94c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c950:	9d06      	ldr	r5, [sp, #24]
 800c952:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800c956:	3201      	adds	r2, #1
 800c958:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c95c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c960:	ee07 2a90 	vmov	s15, r2
 800c964:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c968:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c96c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c970:	9a03      	ldr	r2, [sp, #12]
 800c972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c976:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800c97a:	2d00      	cmp	r5, #0
 800c97c:	d17b      	bne.n	800ca76 <_dtoa_r+0x4a6>
 800c97e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c982:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c986:	ec41 0b17 	vmov	d7, r0, r1
 800c98a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c992:	f300 8253 	bgt.w	800ce3c <_dtoa_r+0x86c>
 800c996:	eeb1 7b47 	vneg.f64	d7, d7
 800c99a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a2:	f100 8249 	bmi.w	800ce38 <_dtoa_r+0x868>
 800c9a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c9aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f2c0 8119 	blt.w	800cbe8 <_dtoa_r+0x618>
 800c9b6:	f1bb 0f0e 	cmp.w	fp, #14
 800c9ba:	f300 8115 	bgt.w	800cbe8 <_dtoa_r+0x618>
 800c9be:	4bc3      	ldr	r3, [pc, #780]	; (800cccc <_dtoa_r+0x6fc>)
 800c9c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c9c4:	ed93 6b00 	vldr	d6, [r3]
 800c9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f280 80ba 	bge.w	800cb44 <_dtoa_r+0x574>
 800c9d0:	f1b9 0f00 	cmp.w	r9, #0
 800c9d4:	f300 80b6 	bgt.w	800cb44 <_dtoa_r+0x574>
 800c9d8:	f040 822d 	bne.w	800ce36 <_dtoa_r+0x866>
 800c9dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c9e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c9e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f0:	464d      	mov	r5, r9
 800c9f2:	464f      	mov	r7, r9
 800c9f4:	f280 8204 	bge.w	800ce00 <_dtoa_r+0x830>
 800c9f8:	9b04      	ldr	r3, [sp, #16]
 800c9fa:	9a04      	ldr	r2, [sp, #16]
 800c9fc:	1c5e      	adds	r6, r3, #1
 800c9fe:	2331      	movs	r3, #49	; 0x31
 800ca00:	7013      	strb	r3, [r2, #0]
 800ca02:	f10b 0b01 	add.w	fp, fp, #1
 800ca06:	e1ff      	b.n	800ce08 <_dtoa_r+0x838>
 800ca08:	2202      	movs	r2, #2
 800ca0a:	e731      	b.n	800c870 <_dtoa_r+0x2a0>
 800ca0c:	d02e      	beq.n	800ca6c <_dtoa_r+0x49c>
 800ca0e:	f1cb 0300 	rsb	r3, fp, #0
 800ca12:	4aae      	ldr	r2, [pc, #696]	; (800cccc <_dtoa_r+0x6fc>)
 800ca14:	f003 010f 	and.w	r1, r3, #15
 800ca18:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ca1c:	ed92 7b00 	vldr	d7, [r2]
 800ca20:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800ca24:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ca28:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ca2c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800ca30:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ca34:	49a6      	ldr	r1, [pc, #664]	; (800ccd0 <_dtoa_r+0x700>)
 800ca36:	111b      	asrs	r3, r3, #4
 800ca38:	2000      	movs	r0, #0
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	b93b      	cbnz	r3, 800ca4e <_dtoa_r+0x47e>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f af6b 	beq.w	800c91a <_dtoa_r+0x34a>
 800ca44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ca48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca4c:	e765      	b.n	800c91a <_dtoa_r+0x34a>
 800ca4e:	07dd      	lsls	r5, r3, #31
 800ca50:	d509      	bpl.n	800ca66 <_dtoa_r+0x496>
 800ca52:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800ca56:	ed91 7b00 	vldr	d7, [r1]
 800ca5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ca5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ca62:	3201      	adds	r2, #1
 800ca64:	2001      	movs	r0, #1
 800ca66:	105b      	asrs	r3, r3, #1
 800ca68:	3108      	adds	r1, #8
 800ca6a:	e7e7      	b.n	800ca3c <_dtoa_r+0x46c>
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	e754      	b.n	800c91a <_dtoa_r+0x34a>
 800ca70:	465b      	mov	r3, fp
 800ca72:	464d      	mov	r5, r9
 800ca74:	e770      	b.n	800c958 <_dtoa_r+0x388>
 800ca76:	4a95      	ldr	r2, [pc, #596]	; (800cccc <_dtoa_r+0x6fc>)
 800ca78:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800ca7c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ca80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca82:	ec41 0b17 	vmov	d7, r0, r1
 800ca86:	b35a      	cbz	r2, 800cae0 <_dtoa_r+0x510>
 800ca88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ca8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ca90:	9e04      	ldr	r6, [sp, #16]
 800ca92:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ca96:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ca9a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ca9e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800caa2:	ee14 2a90 	vmov	r2, s9
 800caa6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800caaa:	3230      	adds	r2, #48	; 0x30
 800caac:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cab0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab8:	f806 2b01 	strb.w	r2, [r6], #1
 800cabc:	d43b      	bmi.n	800cb36 <_dtoa_r+0x566>
 800cabe:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cac2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caca:	d472      	bmi.n	800cbb2 <_dtoa_r+0x5e2>
 800cacc:	9a04      	ldr	r2, [sp, #16]
 800cace:	1ab2      	subs	r2, r6, r2
 800cad0:	4295      	cmp	r5, r2
 800cad2:	f77f af68 	ble.w	800c9a6 <_dtoa_r+0x3d6>
 800cad6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cada:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cade:	e7de      	b.n	800ca9e <_dtoa_r+0x4ce>
 800cae0:	9a04      	ldr	r2, [sp, #16]
 800cae2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cae6:	1956      	adds	r6, r2, r5
 800cae8:	4611      	mov	r1, r2
 800caea:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800caee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800caf2:	ee14 2a90 	vmov	r2, s9
 800caf6:	3230      	adds	r2, #48	; 0x30
 800caf8:	f801 2b01 	strb.w	r2, [r1], #1
 800cafc:	42b1      	cmp	r1, r6
 800cafe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cb02:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cb06:	d11a      	bne.n	800cb3e <_dtoa_r+0x56e>
 800cb08:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cb0c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cb10:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb18:	dc4b      	bgt.n	800cbb2 <_dtoa_r+0x5e2>
 800cb1a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cb1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb26:	f57f af3e 	bpl.w	800c9a6 <_dtoa_r+0x3d6>
 800cb2a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cb2e:	2a30      	cmp	r2, #48	; 0x30
 800cb30:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 800cb34:	d001      	beq.n	800cb3a <_dtoa_r+0x56a>
 800cb36:	469b      	mov	fp, r3
 800cb38:	e02a      	b.n	800cb90 <_dtoa_r+0x5c0>
 800cb3a:	460e      	mov	r6, r1
 800cb3c:	e7f5      	b.n	800cb2a <_dtoa_r+0x55a>
 800cb3e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cb42:	e7d4      	b.n	800caee <_dtoa_r+0x51e>
 800cb44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb48:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cb4c:	9e04      	ldr	r6, [sp, #16]
 800cb4e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cb52:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cb56:	ee15 3a10 	vmov	r3, s10
 800cb5a:	3330      	adds	r3, #48	; 0x30
 800cb5c:	f806 3b01 	strb.w	r3, [r6], #1
 800cb60:	9b04      	ldr	r3, [sp, #16]
 800cb62:	1af3      	subs	r3, r6, r3
 800cb64:	4599      	cmp	r9, r3
 800cb66:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cb6a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cb6e:	d133      	bne.n	800cbd8 <_dtoa_r+0x608>
 800cb70:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cb74:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb7c:	dc18      	bgt.n	800cbb0 <_dtoa_r+0x5e0>
 800cb7e:	eeb4 7b46 	vcmp.f64	d7, d6
 800cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb86:	d103      	bne.n	800cb90 <_dtoa_r+0x5c0>
 800cb88:	ee15 3a10 	vmov	r3, s10
 800cb8c:	07db      	lsls	r3, r3, #31
 800cb8e:	d40f      	bmi.n	800cbb0 <_dtoa_r+0x5e0>
 800cb90:	9901      	ldr	r1, [sp, #4]
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 fb22 	bl	800d1dc <_Bfree>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cb9c:	7033      	strb	r3, [r6, #0]
 800cb9e:	f10b 0301 	add.w	r3, fp, #1
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	f43f ad5b 	beq.w	800c662 <_dtoa_r+0x92>
 800cbac:	601e      	str	r6, [r3, #0]
 800cbae:	e558      	b.n	800c662 <_dtoa_r+0x92>
 800cbb0:	465b      	mov	r3, fp
 800cbb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cbb6:	2939      	cmp	r1, #57	; 0x39
 800cbb8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800cbbc:	d106      	bne.n	800cbcc <_dtoa_r+0x5fc>
 800cbbe:	9904      	ldr	r1, [sp, #16]
 800cbc0:	4291      	cmp	r1, r2
 800cbc2:	d107      	bne.n	800cbd4 <_dtoa_r+0x604>
 800cbc4:	2230      	movs	r2, #48	; 0x30
 800cbc6:	700a      	strb	r2, [r1, #0]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	460a      	mov	r2, r1
 800cbcc:	7811      	ldrb	r1, [r2, #0]
 800cbce:	3101      	adds	r1, #1
 800cbd0:	7011      	strb	r1, [r2, #0]
 800cbd2:	e7b0      	b.n	800cb36 <_dtoa_r+0x566>
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	e7ec      	b.n	800cbb2 <_dtoa_r+0x5e2>
 800cbd8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cbdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe4:	d1b3      	bne.n	800cb4e <_dtoa_r+0x57e>
 800cbe6:	e7d3      	b.n	800cb90 <_dtoa_r+0x5c0>
 800cbe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbea:	2a00      	cmp	r2, #0
 800cbec:	f000 808d 	beq.w	800cd0a <_dtoa_r+0x73a>
 800cbf0:	9a08      	ldr	r2, [sp, #32]
 800cbf2:	2a01      	cmp	r2, #1
 800cbf4:	dc72      	bgt.n	800ccdc <_dtoa_r+0x70c>
 800cbf6:	2f00      	cmp	r7, #0
 800cbf8:	d06c      	beq.n	800ccd4 <_dtoa_r+0x704>
 800cbfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cbfe:	4645      	mov	r5, r8
 800cc00:	4656      	mov	r6, sl
 800cc02:	9a07      	ldr	r2, [sp, #28]
 800cc04:	2101      	movs	r1, #1
 800cc06:	441a      	add	r2, r3
 800cc08:	4620      	mov	r0, r4
 800cc0a:	449a      	add	sl, r3
 800cc0c:	9207      	str	r2, [sp, #28]
 800cc0e:	f000 fb85 	bl	800d31c <__i2b>
 800cc12:	4607      	mov	r7, r0
 800cc14:	2e00      	cmp	r6, #0
 800cc16:	dd0b      	ble.n	800cc30 <_dtoa_r+0x660>
 800cc18:	9b07      	ldr	r3, [sp, #28]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	dd08      	ble.n	800cc30 <_dtoa_r+0x660>
 800cc1e:	42b3      	cmp	r3, r6
 800cc20:	9a07      	ldr	r2, [sp, #28]
 800cc22:	bfa8      	it	ge
 800cc24:	4633      	movge	r3, r6
 800cc26:	ebaa 0a03 	sub.w	sl, sl, r3
 800cc2a:	1af6      	subs	r6, r6, r3
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	9307      	str	r3, [sp, #28]
 800cc30:	f1b8 0f00 	cmp.w	r8, #0
 800cc34:	d01d      	beq.n	800cc72 <_dtoa_r+0x6a2>
 800cc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d06a      	beq.n	800cd12 <_dtoa_r+0x742>
 800cc3c:	b18d      	cbz	r5, 800cc62 <_dtoa_r+0x692>
 800cc3e:	4639      	mov	r1, r7
 800cc40:	462a      	mov	r2, r5
 800cc42:	4620      	mov	r0, r4
 800cc44:	f000 fc0a 	bl	800d45c <__pow5mult>
 800cc48:	9a01      	ldr	r2, [sp, #4]
 800cc4a:	4601      	mov	r1, r0
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 fb6d 	bl	800d32e <__multiply>
 800cc54:	9901      	ldr	r1, [sp, #4]
 800cc56:	900c      	str	r0, [sp, #48]	; 0x30
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 fabf 	bl	800d1dc <_Bfree>
 800cc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc60:	9301      	str	r3, [sp, #4]
 800cc62:	ebb8 0205 	subs.w	r2, r8, r5
 800cc66:	d004      	beq.n	800cc72 <_dtoa_r+0x6a2>
 800cc68:	9901      	ldr	r1, [sp, #4]
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f000 fbf6 	bl	800d45c <__pow5mult>
 800cc70:	9001      	str	r0, [sp, #4]
 800cc72:	2101      	movs	r1, #1
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fb51 	bl	800d31c <__i2b>
 800cc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc7c:	4605      	mov	r5, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f000 81ca 	beq.w	800d018 <_dtoa_r+0xa48>
 800cc84:	461a      	mov	r2, r3
 800cc86:	4601      	mov	r1, r0
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 fbe7 	bl	800d45c <__pow5mult>
 800cc8e:	9b08      	ldr	r3, [sp, #32]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	4605      	mov	r5, r0
 800cc94:	dc44      	bgt.n	800cd20 <_dtoa_r+0x750>
 800cc96:	9b02      	ldr	r3, [sp, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d13c      	bne.n	800cd16 <_dtoa_r+0x746>
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d137      	bne.n	800cd16 <_dtoa_r+0x746>
 800cca6:	9b03      	ldr	r3, [sp, #12]
 800cca8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ccac:	0d1b      	lsrs	r3, r3, #20
 800ccae:	051b      	lsls	r3, r3, #20
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d033      	beq.n	800cd1c <_dtoa_r+0x74c>
 800ccb4:	9b07      	ldr	r3, [sp, #28]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	f10a 0a01 	add.w	sl, sl, #1
 800ccbc:	9307      	str	r3, [sp, #28]
 800ccbe:	f04f 0801 	mov.w	r8, #1
 800ccc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccc4:	bb73      	cbnz	r3, 800cd24 <_dtoa_r+0x754>
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	e034      	b.n	800cd34 <_dtoa_r+0x764>
 800ccca:	bf00      	nop
 800cccc:	0800e878 	.word	0x0800e878
 800ccd0:	0800e850 	.word	0x0800e850
 800ccd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ccd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ccda:	e790      	b.n	800cbfe <_dtoa_r+0x62e>
 800ccdc:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 800cce0:	45a8      	cmp	r8, r5
 800cce2:	bfbf      	itttt	lt
 800cce4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800cce6:	eba5 0808 	sublt.w	r8, r5, r8
 800ccea:	4443      	addlt	r3, r8
 800ccec:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800ccee:	bfb6      	itet	lt
 800ccf0:	46a8      	movlt	r8, r5
 800ccf2:	eba8 0505 	subge.w	r5, r8, r5
 800ccf6:	2500      	movlt	r5, #0
 800ccf8:	f1b9 0f00 	cmp.w	r9, #0
 800ccfc:	bfb9      	ittee	lt
 800ccfe:	ebaa 0609 	sublt.w	r6, sl, r9
 800cd02:	2300      	movlt	r3, #0
 800cd04:	4656      	movge	r6, sl
 800cd06:	464b      	movge	r3, r9
 800cd08:	e77b      	b.n	800cc02 <_dtoa_r+0x632>
 800cd0a:	4645      	mov	r5, r8
 800cd0c:	4656      	mov	r6, sl
 800cd0e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cd10:	e780      	b.n	800cc14 <_dtoa_r+0x644>
 800cd12:	4642      	mov	r2, r8
 800cd14:	e7a8      	b.n	800cc68 <_dtoa_r+0x698>
 800cd16:	f04f 0800 	mov.w	r8, #0
 800cd1a:	e7d2      	b.n	800ccc2 <_dtoa_r+0x6f2>
 800cd1c:	4698      	mov	r8, r3
 800cd1e:	e7d0      	b.n	800ccc2 <_dtoa_r+0x6f2>
 800cd20:	f04f 0800 	mov.w	r8, #0
 800cd24:	692b      	ldr	r3, [r5, #16]
 800cd26:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cd2a:	6918      	ldr	r0, [r3, #16]
 800cd2c:	f000 faa8 	bl	800d280 <__hi0bits>
 800cd30:	f1c0 0020 	rsb	r0, r0, #32
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	4418      	add	r0, r3
 800cd38:	f010 001f 	ands.w	r0, r0, #31
 800cd3c:	d047      	beq.n	800cdce <_dtoa_r+0x7fe>
 800cd3e:	f1c0 0320 	rsb	r3, r0, #32
 800cd42:	2b04      	cmp	r3, #4
 800cd44:	dd3b      	ble.n	800cdbe <_dtoa_r+0x7ee>
 800cd46:	9b07      	ldr	r3, [sp, #28]
 800cd48:	f1c0 001c 	rsb	r0, r0, #28
 800cd4c:	4482      	add	sl, r0
 800cd4e:	4406      	add	r6, r0
 800cd50:	4403      	add	r3, r0
 800cd52:	9307      	str	r3, [sp, #28]
 800cd54:	f1ba 0f00 	cmp.w	sl, #0
 800cd58:	dd05      	ble.n	800cd66 <_dtoa_r+0x796>
 800cd5a:	4652      	mov	r2, sl
 800cd5c:	9901      	ldr	r1, [sp, #4]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f000 fbca 	bl	800d4f8 <__lshift>
 800cd64:	9001      	str	r0, [sp, #4]
 800cd66:	9b07      	ldr	r3, [sp, #28]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	dd05      	ble.n	800cd78 <_dtoa_r+0x7a8>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	461a      	mov	r2, r3
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fbc1 	bl	800d4f8 <__lshift>
 800cd76:	4605      	mov	r5, r0
 800cd78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd7a:	b353      	cbz	r3, 800cdd2 <_dtoa_r+0x802>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	9801      	ldr	r0, [sp, #4]
 800cd80:	f000 fc0e 	bl	800d5a0 <__mcmp>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	da24      	bge.n	800cdd2 <_dtoa_r+0x802>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	220a      	movs	r2, #10
 800cd8c:	9901      	ldr	r1, [sp, #4]
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 fa3b 	bl	800d20a <__multadd>
 800cd94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd96:	9001      	str	r0, [sp, #4]
 800cd98:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f000 8142 	beq.w	800d026 <_dtoa_r+0xa56>
 800cda2:	2300      	movs	r3, #0
 800cda4:	4639      	mov	r1, r7
 800cda6:	220a      	movs	r2, #10
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 fa2e 	bl	800d20a <__multadd>
 800cdae:	9b06      	ldr	r3, [sp, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	4607      	mov	r7, r0
 800cdb4:	dc4b      	bgt.n	800ce4e <_dtoa_r+0x87e>
 800cdb6:	9b08      	ldr	r3, [sp, #32]
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	dd48      	ble.n	800ce4e <_dtoa_r+0x87e>
 800cdbc:	e011      	b.n	800cde2 <_dtoa_r+0x812>
 800cdbe:	d0c9      	beq.n	800cd54 <_dtoa_r+0x784>
 800cdc0:	9a07      	ldr	r2, [sp, #28]
 800cdc2:	331c      	adds	r3, #28
 800cdc4:	441a      	add	r2, r3
 800cdc6:	449a      	add	sl, r3
 800cdc8:	441e      	add	r6, r3
 800cdca:	4613      	mov	r3, r2
 800cdcc:	e7c1      	b.n	800cd52 <_dtoa_r+0x782>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	e7f6      	b.n	800cdc0 <_dtoa_r+0x7f0>
 800cdd2:	f1b9 0f00 	cmp.w	r9, #0
 800cdd6:	dc34      	bgt.n	800ce42 <_dtoa_r+0x872>
 800cdd8:	9b08      	ldr	r3, [sp, #32]
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	dd31      	ble.n	800ce42 <_dtoa_r+0x872>
 800cdde:	f8cd 9018 	str.w	r9, [sp, #24]
 800cde2:	9b06      	ldr	r3, [sp, #24]
 800cde4:	b963      	cbnz	r3, 800ce00 <_dtoa_r+0x830>
 800cde6:	4629      	mov	r1, r5
 800cde8:	2205      	movs	r2, #5
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 fa0d 	bl	800d20a <__multadd>
 800cdf0:	4601      	mov	r1, r0
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	9801      	ldr	r0, [sp, #4]
 800cdf6:	f000 fbd3 	bl	800d5a0 <__mcmp>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f73f adfc 	bgt.w	800c9f8 <_dtoa_r+0x428>
 800ce00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce02:	9e04      	ldr	r6, [sp, #16]
 800ce04:	ea6f 0b03 	mvn.w	fp, r3
 800ce08:	f04f 0900 	mov.w	r9, #0
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 f9e4 	bl	800d1dc <_Bfree>
 800ce14:	2f00      	cmp	r7, #0
 800ce16:	f43f aebb 	beq.w	800cb90 <_dtoa_r+0x5c0>
 800ce1a:	f1b9 0f00 	cmp.w	r9, #0
 800ce1e:	d005      	beq.n	800ce2c <_dtoa_r+0x85c>
 800ce20:	45b9      	cmp	r9, r7
 800ce22:	d003      	beq.n	800ce2c <_dtoa_r+0x85c>
 800ce24:	4649      	mov	r1, r9
 800ce26:	4620      	mov	r0, r4
 800ce28:	f000 f9d8 	bl	800d1dc <_Bfree>
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f000 f9d4 	bl	800d1dc <_Bfree>
 800ce34:	e6ac      	b.n	800cb90 <_dtoa_r+0x5c0>
 800ce36:	2500      	movs	r5, #0
 800ce38:	462f      	mov	r7, r5
 800ce3a:	e7e1      	b.n	800ce00 <_dtoa_r+0x830>
 800ce3c:	469b      	mov	fp, r3
 800ce3e:	462f      	mov	r7, r5
 800ce40:	e5da      	b.n	800c9f8 <_dtoa_r+0x428>
 800ce42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce44:	f8cd 9018 	str.w	r9, [sp, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 80f3 	beq.w	800d034 <_dtoa_r+0xa64>
 800ce4e:	2e00      	cmp	r6, #0
 800ce50:	dd05      	ble.n	800ce5e <_dtoa_r+0x88e>
 800ce52:	4639      	mov	r1, r7
 800ce54:	4632      	mov	r2, r6
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 fb4e 	bl	800d4f8 <__lshift>
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	d04c      	beq.n	800cefe <_dtoa_r+0x92e>
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 f984 	bl	800d174 <_Balloc>
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	3202      	adds	r2, #2
 800ce70:	4606      	mov	r6, r0
 800ce72:	0092      	lsls	r2, r2, #2
 800ce74:	f107 010c 	add.w	r1, r7, #12
 800ce78:	300c      	adds	r0, #12
 800ce7a:	f7fe fc09 	bl	800b690 <memcpy>
 800ce7e:	2201      	movs	r2, #1
 800ce80:	4631      	mov	r1, r6
 800ce82:	4620      	mov	r0, r4
 800ce84:	f000 fb38 	bl	800d4f8 <__lshift>
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	46b9      	mov	r9, r7
 800ce94:	9307      	str	r3, [sp, #28]
 800ce96:	4607      	mov	r7, r0
 800ce98:	4629      	mov	r1, r5
 800ce9a:	9801      	ldr	r0, [sp, #4]
 800ce9c:	f7ff fb0c 	bl	800c4b8 <quorem>
 800cea0:	4649      	mov	r1, r9
 800cea2:	4606      	mov	r6, r0
 800cea4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cea8:	9801      	ldr	r0, [sp, #4]
 800ceaa:	f000 fb79 	bl	800d5a0 <__mcmp>
 800ceae:	463a      	mov	r2, r7
 800ceb0:	9002      	str	r0, [sp, #8]
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f000 fb8d 	bl	800d5d4 <__mdiff>
 800ceba:	68c3      	ldr	r3, [r0, #12]
 800cebc:	4602      	mov	r2, r0
 800cebe:	bb03      	cbnz	r3, 800cf02 <_dtoa_r+0x932>
 800cec0:	4601      	mov	r1, r0
 800cec2:	9009      	str	r0, [sp, #36]	; 0x24
 800cec4:	9801      	ldr	r0, [sp, #4]
 800cec6:	f000 fb6b 	bl	800d5a0 <__mcmp>
 800ceca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cecc:	4603      	mov	r3, r0
 800cece:	4611      	mov	r1, r2
 800ced0:	4620      	mov	r0, r4
 800ced2:	9309      	str	r3, [sp, #36]	; 0x24
 800ced4:	f000 f982 	bl	800d1dc <_Bfree>
 800ced8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceda:	b9a3      	cbnz	r3, 800cf06 <_dtoa_r+0x936>
 800cedc:	9a08      	ldr	r2, [sp, #32]
 800cede:	b992      	cbnz	r2, 800cf06 <_dtoa_r+0x936>
 800cee0:	9a07      	ldr	r2, [sp, #28]
 800cee2:	b982      	cbnz	r2, 800cf06 <_dtoa_r+0x936>
 800cee4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cee8:	d029      	beq.n	800cf3e <_dtoa_r+0x96e>
 800ceea:	9b02      	ldr	r3, [sp, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dd01      	ble.n	800cef4 <_dtoa_r+0x924>
 800cef0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800cef4:	f10a 0601 	add.w	r6, sl, #1
 800cef8:	f88a 8000 	strb.w	r8, [sl]
 800cefc:	e786      	b.n	800ce0c <_dtoa_r+0x83c>
 800cefe:	4638      	mov	r0, r7
 800cf00:	e7c2      	b.n	800ce88 <_dtoa_r+0x8b8>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e7e3      	b.n	800cece <_dtoa_r+0x8fe>
 800cf06:	9a02      	ldr	r2, [sp, #8]
 800cf08:	2a00      	cmp	r2, #0
 800cf0a:	db04      	blt.n	800cf16 <_dtoa_r+0x946>
 800cf0c:	d124      	bne.n	800cf58 <_dtoa_r+0x988>
 800cf0e:	9a08      	ldr	r2, [sp, #32]
 800cf10:	bb12      	cbnz	r2, 800cf58 <_dtoa_r+0x988>
 800cf12:	9a07      	ldr	r2, [sp, #28]
 800cf14:	bb02      	cbnz	r2, 800cf58 <_dtoa_r+0x988>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	ddec      	ble.n	800cef4 <_dtoa_r+0x924>
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	9901      	ldr	r1, [sp, #4]
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f000 faea 	bl	800d4f8 <__lshift>
 800cf24:	4629      	mov	r1, r5
 800cf26:	9001      	str	r0, [sp, #4]
 800cf28:	f000 fb3a 	bl	800d5a0 <__mcmp>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	dc03      	bgt.n	800cf38 <_dtoa_r+0x968>
 800cf30:	d1e0      	bne.n	800cef4 <_dtoa_r+0x924>
 800cf32:	f018 0f01 	tst.w	r8, #1
 800cf36:	d0dd      	beq.n	800cef4 <_dtoa_r+0x924>
 800cf38:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf3c:	d1d8      	bne.n	800cef0 <_dtoa_r+0x920>
 800cf3e:	2339      	movs	r3, #57	; 0x39
 800cf40:	f10a 0601 	add.w	r6, sl, #1
 800cf44:	f88a 3000 	strb.w	r3, [sl]
 800cf48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf4c:	2b39      	cmp	r3, #57	; 0x39
 800cf4e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800cf52:	d04c      	beq.n	800cfee <_dtoa_r+0xa1e>
 800cf54:	3301      	adds	r3, #1
 800cf56:	e051      	b.n	800cffc <_dtoa_r+0xa2c>
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f10a 0601 	add.w	r6, sl, #1
 800cf5e:	dd05      	ble.n	800cf6c <_dtoa_r+0x99c>
 800cf60:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cf64:	d0eb      	beq.n	800cf3e <_dtoa_r+0x96e>
 800cf66:	f108 0801 	add.w	r8, r8, #1
 800cf6a:	e7c5      	b.n	800cef8 <_dtoa_r+0x928>
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	9a06      	ldr	r2, [sp, #24]
 800cf70:	f806 8c01 	strb.w	r8, [r6, #-1]
 800cf74:	1af3      	subs	r3, r6, r3
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d021      	beq.n	800cfbe <_dtoa_r+0x9ee>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	220a      	movs	r2, #10
 800cf7e:	9901      	ldr	r1, [sp, #4]
 800cf80:	4620      	mov	r0, r4
 800cf82:	f000 f942 	bl	800d20a <__multadd>
 800cf86:	45b9      	cmp	r9, r7
 800cf88:	9001      	str	r0, [sp, #4]
 800cf8a:	f04f 0300 	mov.w	r3, #0
 800cf8e:	f04f 020a 	mov.w	r2, #10
 800cf92:	4649      	mov	r1, r9
 800cf94:	4620      	mov	r0, r4
 800cf96:	d105      	bne.n	800cfa4 <_dtoa_r+0x9d4>
 800cf98:	f000 f937 	bl	800d20a <__multadd>
 800cf9c:	4681      	mov	r9, r0
 800cf9e:	4607      	mov	r7, r0
 800cfa0:	46b2      	mov	sl, r6
 800cfa2:	e779      	b.n	800ce98 <_dtoa_r+0x8c8>
 800cfa4:	f000 f931 	bl	800d20a <__multadd>
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	4681      	mov	r9, r0
 800cfac:	2300      	movs	r3, #0
 800cfae:	220a      	movs	r2, #10
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f000 f92a 	bl	800d20a <__multadd>
 800cfb6:	4607      	mov	r7, r0
 800cfb8:	e7f2      	b.n	800cfa0 <_dtoa_r+0x9d0>
 800cfba:	f04f 0900 	mov.w	r9, #0
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	9901      	ldr	r1, [sp, #4]
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f000 fa98 	bl	800d4f8 <__lshift>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	9001      	str	r0, [sp, #4]
 800cfcc:	f000 fae8 	bl	800d5a0 <__mcmp>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	dcb9      	bgt.n	800cf48 <_dtoa_r+0x978>
 800cfd4:	d102      	bne.n	800cfdc <_dtoa_r+0xa0c>
 800cfd6:	f018 0f01 	tst.w	r8, #1
 800cfda:	d1b5      	bne.n	800cf48 <_dtoa_r+0x978>
 800cfdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfe0:	2b30      	cmp	r3, #48	; 0x30
 800cfe2:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800cfe6:	f47f af11 	bne.w	800ce0c <_dtoa_r+0x83c>
 800cfea:	4616      	mov	r6, r2
 800cfec:	e7f6      	b.n	800cfdc <_dtoa_r+0xa0c>
 800cfee:	9b04      	ldr	r3, [sp, #16]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d105      	bne.n	800d000 <_dtoa_r+0xa30>
 800cff4:	9a04      	ldr	r2, [sp, #16]
 800cff6:	f10b 0b01 	add.w	fp, fp, #1
 800cffa:	2331      	movs	r3, #49	; 0x31
 800cffc:	7013      	strb	r3, [r2, #0]
 800cffe:	e705      	b.n	800ce0c <_dtoa_r+0x83c>
 800d000:	4616      	mov	r6, r2
 800d002:	e7a1      	b.n	800cf48 <_dtoa_r+0x978>
 800d004:	4b16      	ldr	r3, [pc, #88]	; (800d060 <_dtoa_r+0xa90>)
 800d006:	f7ff bb48 	b.w	800c69a <_dtoa_r+0xca>
 800d00a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	f47f ab23 	bne.w	800c658 <_dtoa_r+0x88>
 800d012:	4b14      	ldr	r3, [pc, #80]	; (800d064 <_dtoa_r+0xa94>)
 800d014:	f7ff bb41 	b.w	800c69a <_dtoa_r+0xca>
 800d018:	9b08      	ldr	r3, [sp, #32]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	f77f ae3b 	ble.w	800cc96 <_dtoa_r+0x6c6>
 800d020:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d024:	e64f      	b.n	800ccc6 <_dtoa_r+0x6f6>
 800d026:	9b06      	ldr	r3, [sp, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dc03      	bgt.n	800d034 <_dtoa_r+0xa64>
 800d02c:	9b08      	ldr	r3, [sp, #32]
 800d02e:	2b02      	cmp	r3, #2
 800d030:	f73f aed7 	bgt.w	800cde2 <_dtoa_r+0x812>
 800d034:	9e04      	ldr	r6, [sp, #16]
 800d036:	9801      	ldr	r0, [sp, #4]
 800d038:	4629      	mov	r1, r5
 800d03a:	f7ff fa3d 	bl	800c4b8 <quorem>
 800d03e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d042:	f806 8b01 	strb.w	r8, [r6], #1
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	9a06      	ldr	r2, [sp, #24]
 800d04a:	1af3      	subs	r3, r6, r3
 800d04c:	429a      	cmp	r2, r3
 800d04e:	ddb4      	ble.n	800cfba <_dtoa_r+0x9ea>
 800d050:	2300      	movs	r3, #0
 800d052:	220a      	movs	r2, #10
 800d054:	9901      	ldr	r1, [sp, #4]
 800d056:	4620      	mov	r0, r4
 800d058:	f000 f8d7 	bl	800d20a <__multadd>
 800d05c:	9001      	str	r0, [sp, #4]
 800d05e:	e7ea      	b.n	800d036 <_dtoa_r+0xa66>
 800d060:	0800e81c 	.word	0x0800e81c
 800d064:	0800e840 	.word	0x0800e840

0800d068 <_localeconv_r>:
 800d068:	4b04      	ldr	r3, [pc, #16]	; (800d07c <_localeconv_r+0x14>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	6a18      	ldr	r0, [r3, #32]
 800d06e:	4b04      	ldr	r3, [pc, #16]	; (800d080 <_localeconv_r+0x18>)
 800d070:	2800      	cmp	r0, #0
 800d072:	bf08      	it	eq
 800d074:	4618      	moveq	r0, r3
 800d076:	30f0      	adds	r0, #240	; 0xf0
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	2400036c 	.word	0x2400036c
 800d080:	240003d0 	.word	0x240003d0

0800d084 <_lseek_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4c07      	ldr	r4, [pc, #28]	; (800d0a4 <_lseek_r+0x20>)
 800d088:	4605      	mov	r5, r0
 800d08a:	4608      	mov	r0, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	6022      	str	r2, [r4, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	f7f5 fc72 	bl	800297c <_lseek>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_lseek_r+0x1e>
 800d09c:	6823      	ldr	r3, [r4, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_lseek_r+0x1e>
 800d0a0:	602b      	str	r3, [r5, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	24000cbc 	.word	0x24000cbc

0800d0a8 <__swhatbuf_r>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	460e      	mov	r6, r1
 800d0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b0:	2900      	cmp	r1, #0
 800d0b2:	b096      	sub	sp, #88	; 0x58
 800d0b4:	4614      	mov	r4, r2
 800d0b6:	461d      	mov	r5, r3
 800d0b8:	da07      	bge.n	800d0ca <__swhatbuf_r+0x22>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	602b      	str	r3, [r5, #0]
 800d0be:	89b3      	ldrh	r3, [r6, #12]
 800d0c0:	061a      	lsls	r2, r3, #24
 800d0c2:	d410      	bmi.n	800d0e6 <__swhatbuf_r+0x3e>
 800d0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0c8:	e00e      	b.n	800d0e8 <__swhatbuf_r+0x40>
 800d0ca:	466a      	mov	r2, sp
 800d0cc:	f000 fc8e 	bl	800d9ec <_fstat_r>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dbf2      	blt.n	800d0ba <__swhatbuf_r+0x12>
 800d0d4:	9a01      	ldr	r2, [sp, #4]
 800d0d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0de:	425a      	negs	r2, r3
 800d0e0:	415a      	adcs	r2, r3
 800d0e2:	602a      	str	r2, [r5, #0]
 800d0e4:	e7ee      	b.n	800d0c4 <__swhatbuf_r+0x1c>
 800d0e6:	2340      	movs	r3, #64	; 0x40
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	6023      	str	r3, [r4, #0]
 800d0ec:	b016      	add	sp, #88	; 0x58
 800d0ee:	bd70      	pop	{r4, r5, r6, pc}

0800d0f0 <__smakebuf_r>:
 800d0f0:	898b      	ldrh	r3, [r1, #12]
 800d0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0f4:	079d      	lsls	r5, r3, #30
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	d507      	bpl.n	800d10c <__smakebuf_r+0x1c>
 800d0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	6123      	str	r3, [r4, #16]
 800d104:	2301      	movs	r3, #1
 800d106:	6163      	str	r3, [r4, #20]
 800d108:	b002      	add	sp, #8
 800d10a:	bd70      	pop	{r4, r5, r6, pc}
 800d10c:	ab01      	add	r3, sp, #4
 800d10e:	466a      	mov	r2, sp
 800d110:	f7ff ffca 	bl	800d0a8 <__swhatbuf_r>
 800d114:	9900      	ldr	r1, [sp, #0]
 800d116:	4605      	mov	r5, r0
 800d118:	4630      	mov	r0, r6
 800d11a:	f7fe fb1b 	bl	800b754 <_malloc_r>
 800d11e:	b948      	cbnz	r0, 800d134 <__smakebuf_r+0x44>
 800d120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d124:	059a      	lsls	r2, r3, #22
 800d126:	d4ef      	bmi.n	800d108 <__smakebuf_r+0x18>
 800d128:	f023 0303 	bic.w	r3, r3, #3
 800d12c:	f043 0302 	orr.w	r3, r3, #2
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	e7e3      	b.n	800d0fc <__smakebuf_r+0xc>
 800d134:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <__smakebuf_r+0x7c>)
 800d136:	62b3      	str	r3, [r6, #40]	; 0x28
 800d138:	89a3      	ldrh	r3, [r4, #12]
 800d13a:	6020      	str	r0, [r4, #0]
 800d13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	9b00      	ldr	r3, [sp, #0]
 800d144:	6163      	str	r3, [r4, #20]
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	6120      	str	r0, [r4, #16]
 800d14a:	b15b      	cbz	r3, 800d164 <__smakebuf_r+0x74>
 800d14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d150:	4630      	mov	r0, r6
 800d152:	f000 fc5d 	bl	800da10 <_isatty_r>
 800d156:	b128      	cbz	r0, 800d164 <__smakebuf_r+0x74>
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	f023 0303 	bic.w	r3, r3, #3
 800d15e:	f043 0301 	orr.w	r3, r3, #1
 800d162:	81a3      	strh	r3, [r4, #12]
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	431d      	orrs	r5, r3
 800d168:	81a5      	strh	r5, [r4, #12]
 800d16a:	e7cd      	b.n	800d108 <__smakebuf_r+0x18>
 800d16c:	0800b4ed 	.word	0x0800b4ed

0800d170 <__malloc_lock>:
 800d170:	4770      	bx	lr

0800d172 <__malloc_unlock>:
 800d172:	4770      	bx	lr

0800d174 <_Balloc>:
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d178:	4604      	mov	r4, r0
 800d17a:	460e      	mov	r6, r1
 800d17c:	b93d      	cbnz	r5, 800d18e <_Balloc+0x1a>
 800d17e:	2010      	movs	r0, #16
 800d180:	f7fe fa7e 	bl	800b680 <malloc>
 800d184:	6260      	str	r0, [r4, #36]	; 0x24
 800d186:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d18a:	6005      	str	r5, [r0, #0]
 800d18c:	60c5      	str	r5, [r0, #12]
 800d18e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d190:	68eb      	ldr	r3, [r5, #12]
 800d192:	b183      	cbz	r3, 800d1b6 <_Balloc+0x42>
 800d194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d19c:	b9b8      	cbnz	r0, 800d1ce <_Balloc+0x5a>
 800d19e:	2101      	movs	r1, #1
 800d1a0:	fa01 f506 	lsl.w	r5, r1, r6
 800d1a4:	1d6a      	adds	r2, r5, #5
 800d1a6:	0092      	lsls	r2, r2, #2
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f000 fabf 	bl	800d72c <_calloc_r>
 800d1ae:	b160      	cbz	r0, 800d1ca <_Balloc+0x56>
 800d1b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d1b4:	e00e      	b.n	800d1d4 <_Balloc+0x60>
 800d1b6:	2221      	movs	r2, #33	; 0x21
 800d1b8:	2104      	movs	r1, #4
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f000 fab6 	bl	800d72c <_calloc_r>
 800d1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1c2:	60e8      	str	r0, [r5, #12]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1e4      	bne.n	800d194 <_Balloc+0x20>
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	bd70      	pop	{r4, r5, r6, pc}
 800d1ce:	6802      	ldr	r2, [r0, #0]
 800d1d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1da:	e7f7      	b.n	800d1cc <_Balloc+0x58>

0800d1dc <_Bfree>:
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d1e0:	4606      	mov	r6, r0
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	b93c      	cbnz	r4, 800d1f6 <_Bfree+0x1a>
 800d1e6:	2010      	movs	r0, #16
 800d1e8:	f7fe fa4a 	bl	800b680 <malloc>
 800d1ec:	6270      	str	r0, [r6, #36]	; 0x24
 800d1ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1f2:	6004      	str	r4, [r0, #0]
 800d1f4:	60c4      	str	r4, [r0, #12]
 800d1f6:	b13d      	cbz	r5, 800d208 <_Bfree+0x2c>
 800d1f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d1fa:	686a      	ldr	r2, [r5, #4]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d202:	6029      	str	r1, [r5, #0]
 800d204:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d208:	bd70      	pop	{r4, r5, r6, pc}

0800d20a <__multadd>:
 800d20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20e:	690d      	ldr	r5, [r1, #16]
 800d210:	461f      	mov	r7, r3
 800d212:	4606      	mov	r6, r0
 800d214:	460c      	mov	r4, r1
 800d216:	f101 0c14 	add.w	ip, r1, #20
 800d21a:	2300      	movs	r3, #0
 800d21c:	f8dc 0000 	ldr.w	r0, [ip]
 800d220:	b281      	uxth	r1, r0
 800d222:	fb02 7101 	mla	r1, r2, r1, r7
 800d226:	0c0f      	lsrs	r7, r1, #16
 800d228:	0c00      	lsrs	r0, r0, #16
 800d22a:	fb02 7000 	mla	r0, r2, r0, r7
 800d22e:	b289      	uxth	r1, r1
 800d230:	3301      	adds	r3, #1
 800d232:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d236:	429d      	cmp	r5, r3
 800d238:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d23c:	f84c 1b04 	str.w	r1, [ip], #4
 800d240:	dcec      	bgt.n	800d21c <__multadd+0x12>
 800d242:	b1d7      	cbz	r7, 800d27a <__multadd+0x70>
 800d244:	68a3      	ldr	r3, [r4, #8]
 800d246:	42ab      	cmp	r3, r5
 800d248:	dc12      	bgt.n	800d270 <__multadd+0x66>
 800d24a:	6861      	ldr	r1, [r4, #4]
 800d24c:	4630      	mov	r0, r6
 800d24e:	3101      	adds	r1, #1
 800d250:	f7ff ff90 	bl	800d174 <_Balloc>
 800d254:	6922      	ldr	r2, [r4, #16]
 800d256:	3202      	adds	r2, #2
 800d258:	f104 010c 	add.w	r1, r4, #12
 800d25c:	4680      	mov	r8, r0
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	300c      	adds	r0, #12
 800d262:	f7fe fa15 	bl	800b690 <memcpy>
 800d266:	4621      	mov	r1, r4
 800d268:	4630      	mov	r0, r6
 800d26a:	f7ff ffb7 	bl	800d1dc <_Bfree>
 800d26e:	4644      	mov	r4, r8
 800d270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d274:	3501      	adds	r5, #1
 800d276:	615f      	str	r7, [r3, #20]
 800d278:	6125      	str	r5, [r4, #16]
 800d27a:	4620      	mov	r0, r4
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d280 <__hi0bits>:
 800d280:	0c02      	lsrs	r2, r0, #16
 800d282:	0412      	lsls	r2, r2, #16
 800d284:	4603      	mov	r3, r0
 800d286:	b9b2      	cbnz	r2, 800d2b6 <__hi0bits+0x36>
 800d288:	0403      	lsls	r3, r0, #16
 800d28a:	2010      	movs	r0, #16
 800d28c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d290:	bf04      	itt	eq
 800d292:	021b      	lsleq	r3, r3, #8
 800d294:	3008      	addeq	r0, #8
 800d296:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d29a:	bf04      	itt	eq
 800d29c:	011b      	lsleq	r3, r3, #4
 800d29e:	3004      	addeq	r0, #4
 800d2a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2a4:	bf04      	itt	eq
 800d2a6:	009b      	lsleq	r3, r3, #2
 800d2a8:	3002      	addeq	r0, #2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	db06      	blt.n	800d2bc <__hi0bits+0x3c>
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	d503      	bpl.n	800d2ba <__hi0bits+0x3a>
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	4770      	bx	lr
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	e7e8      	b.n	800d28c <__hi0bits+0xc>
 800d2ba:	2020      	movs	r0, #32
 800d2bc:	4770      	bx	lr

0800d2be <__lo0bits>:
 800d2be:	6803      	ldr	r3, [r0, #0]
 800d2c0:	f013 0207 	ands.w	r2, r3, #7
 800d2c4:	4601      	mov	r1, r0
 800d2c6:	d00b      	beq.n	800d2e0 <__lo0bits+0x22>
 800d2c8:	07da      	lsls	r2, r3, #31
 800d2ca:	d423      	bmi.n	800d314 <__lo0bits+0x56>
 800d2cc:	0798      	lsls	r0, r3, #30
 800d2ce:	bf49      	itett	mi
 800d2d0:	085b      	lsrmi	r3, r3, #1
 800d2d2:	089b      	lsrpl	r3, r3, #2
 800d2d4:	2001      	movmi	r0, #1
 800d2d6:	600b      	strmi	r3, [r1, #0]
 800d2d8:	bf5c      	itt	pl
 800d2da:	600b      	strpl	r3, [r1, #0]
 800d2dc:	2002      	movpl	r0, #2
 800d2de:	4770      	bx	lr
 800d2e0:	b298      	uxth	r0, r3
 800d2e2:	b9a8      	cbnz	r0, 800d310 <__lo0bits+0x52>
 800d2e4:	0c1b      	lsrs	r3, r3, #16
 800d2e6:	2010      	movs	r0, #16
 800d2e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2ec:	bf04      	itt	eq
 800d2ee:	0a1b      	lsreq	r3, r3, #8
 800d2f0:	3008      	addeq	r0, #8
 800d2f2:	071a      	lsls	r2, r3, #28
 800d2f4:	bf04      	itt	eq
 800d2f6:	091b      	lsreq	r3, r3, #4
 800d2f8:	3004      	addeq	r0, #4
 800d2fa:	079a      	lsls	r2, r3, #30
 800d2fc:	bf04      	itt	eq
 800d2fe:	089b      	lsreq	r3, r3, #2
 800d300:	3002      	addeq	r0, #2
 800d302:	07da      	lsls	r2, r3, #31
 800d304:	d402      	bmi.n	800d30c <__lo0bits+0x4e>
 800d306:	085b      	lsrs	r3, r3, #1
 800d308:	d006      	beq.n	800d318 <__lo0bits+0x5a>
 800d30a:	3001      	adds	r0, #1
 800d30c:	600b      	str	r3, [r1, #0]
 800d30e:	4770      	bx	lr
 800d310:	4610      	mov	r0, r2
 800d312:	e7e9      	b.n	800d2e8 <__lo0bits+0x2a>
 800d314:	2000      	movs	r0, #0
 800d316:	4770      	bx	lr
 800d318:	2020      	movs	r0, #32
 800d31a:	4770      	bx	lr

0800d31c <__i2b>:
 800d31c:	b510      	push	{r4, lr}
 800d31e:	460c      	mov	r4, r1
 800d320:	2101      	movs	r1, #1
 800d322:	f7ff ff27 	bl	800d174 <_Balloc>
 800d326:	2201      	movs	r2, #1
 800d328:	6144      	str	r4, [r0, #20]
 800d32a:	6102      	str	r2, [r0, #16]
 800d32c:	bd10      	pop	{r4, pc}

0800d32e <__multiply>:
 800d32e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d332:	4614      	mov	r4, r2
 800d334:	690a      	ldr	r2, [r1, #16]
 800d336:	6923      	ldr	r3, [r4, #16]
 800d338:	429a      	cmp	r2, r3
 800d33a:	bfb8      	it	lt
 800d33c:	460b      	movlt	r3, r1
 800d33e:	4688      	mov	r8, r1
 800d340:	bfbc      	itt	lt
 800d342:	46a0      	movlt	r8, r4
 800d344:	461c      	movlt	r4, r3
 800d346:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d34a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d34e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d352:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d356:	eb07 0609 	add.w	r6, r7, r9
 800d35a:	42b3      	cmp	r3, r6
 800d35c:	bfb8      	it	lt
 800d35e:	3101      	addlt	r1, #1
 800d360:	f7ff ff08 	bl	800d174 <_Balloc>
 800d364:	f100 0514 	add.w	r5, r0, #20
 800d368:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d36c:	462b      	mov	r3, r5
 800d36e:	2200      	movs	r2, #0
 800d370:	4573      	cmp	r3, lr
 800d372:	d316      	bcc.n	800d3a2 <__multiply+0x74>
 800d374:	f104 0214 	add.w	r2, r4, #20
 800d378:	f108 0114 	add.w	r1, r8, #20
 800d37c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d380:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	9b00      	ldr	r3, [sp, #0]
 800d388:	9201      	str	r2, [sp, #4]
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d80c      	bhi.n	800d3a8 <__multiply+0x7a>
 800d38e:	2e00      	cmp	r6, #0
 800d390:	dd03      	ble.n	800d39a <__multiply+0x6c>
 800d392:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d396:	2b00      	cmp	r3, #0
 800d398:	d05d      	beq.n	800d456 <__multiply+0x128>
 800d39a:	6106      	str	r6, [r0, #16]
 800d39c:	b003      	add	sp, #12
 800d39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a2:	f843 2b04 	str.w	r2, [r3], #4
 800d3a6:	e7e3      	b.n	800d370 <__multiply+0x42>
 800d3a8:	f8b2 b000 	ldrh.w	fp, [r2]
 800d3ac:	f1bb 0f00 	cmp.w	fp, #0
 800d3b0:	d023      	beq.n	800d3fa <__multiply+0xcc>
 800d3b2:	4689      	mov	r9, r1
 800d3b4:	46ac      	mov	ip, r5
 800d3b6:	f04f 0800 	mov.w	r8, #0
 800d3ba:	f859 4b04 	ldr.w	r4, [r9], #4
 800d3be:	f8dc a000 	ldr.w	sl, [ip]
 800d3c2:	b2a3      	uxth	r3, r4
 800d3c4:	fa1f fa8a 	uxth.w	sl, sl
 800d3c8:	fb0b a303 	mla	r3, fp, r3, sl
 800d3cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d3d0:	f8dc 4000 	ldr.w	r4, [ip]
 800d3d4:	4443      	add	r3, r8
 800d3d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3da:	fb0b 840a 	mla	r4, fp, sl, r8
 800d3de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d3e2:	46e2      	mov	sl, ip
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d3ea:	454f      	cmp	r7, r9
 800d3ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d3f0:	f84a 3b04 	str.w	r3, [sl], #4
 800d3f4:	d82b      	bhi.n	800d44e <__multiply+0x120>
 800d3f6:	f8cc 8004 	str.w	r8, [ip, #4]
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d400:	3204      	adds	r2, #4
 800d402:	f1ba 0f00 	cmp.w	sl, #0
 800d406:	d020      	beq.n	800d44a <__multiply+0x11c>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	4689      	mov	r9, r1
 800d40c:	46a8      	mov	r8, r5
 800d40e:	f04f 0b00 	mov.w	fp, #0
 800d412:	f8b9 c000 	ldrh.w	ip, [r9]
 800d416:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d41a:	fb0a 440c 	mla	r4, sl, ip, r4
 800d41e:	445c      	add	r4, fp
 800d420:	46c4      	mov	ip, r8
 800d422:	b29b      	uxth	r3, r3
 800d424:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d428:	f84c 3b04 	str.w	r3, [ip], #4
 800d42c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d430:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d434:	0c1b      	lsrs	r3, r3, #16
 800d436:	fb0a b303 	mla	r3, sl, r3, fp
 800d43a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d43e:	454f      	cmp	r7, r9
 800d440:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d444:	d805      	bhi.n	800d452 <__multiply+0x124>
 800d446:	f8c8 3004 	str.w	r3, [r8, #4]
 800d44a:	3504      	adds	r5, #4
 800d44c:	e79b      	b.n	800d386 <__multiply+0x58>
 800d44e:	46d4      	mov	ip, sl
 800d450:	e7b3      	b.n	800d3ba <__multiply+0x8c>
 800d452:	46e0      	mov	r8, ip
 800d454:	e7dd      	b.n	800d412 <__multiply+0xe4>
 800d456:	3e01      	subs	r6, #1
 800d458:	e799      	b.n	800d38e <__multiply+0x60>
	...

0800d45c <__pow5mult>:
 800d45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d460:	4615      	mov	r5, r2
 800d462:	f012 0203 	ands.w	r2, r2, #3
 800d466:	4606      	mov	r6, r0
 800d468:	460f      	mov	r7, r1
 800d46a:	d007      	beq.n	800d47c <__pow5mult+0x20>
 800d46c:	3a01      	subs	r2, #1
 800d46e:	4c21      	ldr	r4, [pc, #132]	; (800d4f4 <__pow5mult+0x98>)
 800d470:	2300      	movs	r3, #0
 800d472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d476:	f7ff fec8 	bl	800d20a <__multadd>
 800d47a:	4607      	mov	r7, r0
 800d47c:	10ad      	asrs	r5, r5, #2
 800d47e:	d035      	beq.n	800d4ec <__pow5mult+0x90>
 800d480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d482:	b93c      	cbnz	r4, 800d494 <__pow5mult+0x38>
 800d484:	2010      	movs	r0, #16
 800d486:	f7fe f8fb 	bl	800b680 <malloc>
 800d48a:	6270      	str	r0, [r6, #36]	; 0x24
 800d48c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d490:	6004      	str	r4, [r0, #0]
 800d492:	60c4      	str	r4, [r0, #12]
 800d494:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d49c:	b94c      	cbnz	r4, 800d4b2 <__pow5mult+0x56>
 800d49e:	f240 2171 	movw	r1, #625	; 0x271
 800d4a2:	4630      	mov	r0, r6
 800d4a4:	f7ff ff3a 	bl	800d31c <__i2b>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	6003      	str	r3, [r0, #0]
 800d4b2:	f04f 0800 	mov.w	r8, #0
 800d4b6:	07eb      	lsls	r3, r5, #31
 800d4b8:	d50a      	bpl.n	800d4d0 <__pow5mult+0x74>
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	4622      	mov	r2, r4
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ff35 	bl	800d32e <__multiply>
 800d4c4:	4639      	mov	r1, r7
 800d4c6:	4681      	mov	r9, r0
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	f7ff fe87 	bl	800d1dc <_Bfree>
 800d4ce:	464f      	mov	r7, r9
 800d4d0:	106d      	asrs	r5, r5, #1
 800d4d2:	d00b      	beq.n	800d4ec <__pow5mult+0x90>
 800d4d4:	6820      	ldr	r0, [r4, #0]
 800d4d6:	b938      	cbnz	r0, 800d4e8 <__pow5mult+0x8c>
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff ff26 	bl	800d32e <__multiply>
 800d4e2:	6020      	str	r0, [r4, #0]
 800d4e4:	f8c0 8000 	str.w	r8, [r0]
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	e7e4      	b.n	800d4b6 <__pow5mult+0x5a>
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f2:	bf00      	nop
 800d4f4:	0800e940 	.word	0x0800e940

0800d4f8 <__lshift>:
 800d4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	6849      	ldr	r1, [r1, #4]
 800d506:	eb0a 0903 	add.w	r9, sl, r3
 800d50a:	68a3      	ldr	r3, [r4, #8]
 800d50c:	4607      	mov	r7, r0
 800d50e:	4616      	mov	r6, r2
 800d510:	f109 0501 	add.w	r5, r9, #1
 800d514:	42ab      	cmp	r3, r5
 800d516:	db32      	blt.n	800d57e <__lshift+0x86>
 800d518:	4638      	mov	r0, r7
 800d51a:	f7ff fe2b 	bl	800d174 <_Balloc>
 800d51e:	2300      	movs	r3, #0
 800d520:	4680      	mov	r8, r0
 800d522:	f100 0114 	add.w	r1, r0, #20
 800d526:	461a      	mov	r2, r3
 800d528:	4553      	cmp	r3, sl
 800d52a:	db2b      	blt.n	800d584 <__lshift+0x8c>
 800d52c:	6920      	ldr	r0, [r4, #16]
 800d52e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d532:	f104 0314 	add.w	r3, r4, #20
 800d536:	f016 021f 	ands.w	r2, r6, #31
 800d53a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d53e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d542:	d025      	beq.n	800d590 <__lshift+0x98>
 800d544:	f1c2 0e20 	rsb	lr, r2, #32
 800d548:	2000      	movs	r0, #0
 800d54a:	681e      	ldr	r6, [r3, #0]
 800d54c:	468a      	mov	sl, r1
 800d54e:	4096      	lsls	r6, r2
 800d550:	4330      	orrs	r0, r6
 800d552:	f84a 0b04 	str.w	r0, [sl], #4
 800d556:	f853 0b04 	ldr.w	r0, [r3], #4
 800d55a:	459c      	cmp	ip, r3
 800d55c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d560:	d814      	bhi.n	800d58c <__lshift+0x94>
 800d562:	6048      	str	r0, [r1, #4]
 800d564:	b108      	cbz	r0, 800d56a <__lshift+0x72>
 800d566:	f109 0502 	add.w	r5, r9, #2
 800d56a:	3d01      	subs	r5, #1
 800d56c:	4638      	mov	r0, r7
 800d56e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d572:	4621      	mov	r1, r4
 800d574:	f7ff fe32 	bl	800d1dc <_Bfree>
 800d578:	4640      	mov	r0, r8
 800d57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d57e:	3101      	adds	r1, #1
 800d580:	005b      	lsls	r3, r3, #1
 800d582:	e7c7      	b.n	800d514 <__lshift+0x1c>
 800d584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d588:	3301      	adds	r3, #1
 800d58a:	e7cd      	b.n	800d528 <__lshift+0x30>
 800d58c:	4651      	mov	r1, sl
 800d58e:	e7dc      	b.n	800d54a <__lshift+0x52>
 800d590:	3904      	subs	r1, #4
 800d592:	f853 2b04 	ldr.w	r2, [r3], #4
 800d596:	f841 2f04 	str.w	r2, [r1, #4]!
 800d59a:	459c      	cmp	ip, r3
 800d59c:	d8f9      	bhi.n	800d592 <__lshift+0x9a>
 800d59e:	e7e4      	b.n	800d56a <__lshift+0x72>

0800d5a0 <__mcmp>:
 800d5a0:	6903      	ldr	r3, [r0, #16]
 800d5a2:	690a      	ldr	r2, [r1, #16]
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	b530      	push	{r4, r5, lr}
 800d5a8:	d10c      	bne.n	800d5c4 <__mcmp+0x24>
 800d5aa:	0092      	lsls	r2, r2, #2
 800d5ac:	3014      	adds	r0, #20
 800d5ae:	3114      	adds	r1, #20
 800d5b0:	1884      	adds	r4, r0, r2
 800d5b2:	4411      	add	r1, r2
 800d5b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d5b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d5bc:	4295      	cmp	r5, r2
 800d5be:	d003      	beq.n	800d5c8 <__mcmp+0x28>
 800d5c0:	d305      	bcc.n	800d5ce <__mcmp+0x2e>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	bd30      	pop	{r4, r5, pc}
 800d5c8:	42a0      	cmp	r0, r4
 800d5ca:	d3f3      	bcc.n	800d5b4 <__mcmp+0x14>
 800d5cc:	e7fa      	b.n	800d5c4 <__mcmp+0x24>
 800d5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5d2:	e7f7      	b.n	800d5c4 <__mcmp+0x24>

0800d5d4 <__mdiff>:
 800d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	460d      	mov	r5, r1
 800d5da:	4607      	mov	r7, r0
 800d5dc:	4611      	mov	r1, r2
 800d5de:	4628      	mov	r0, r5
 800d5e0:	4614      	mov	r4, r2
 800d5e2:	f7ff ffdd 	bl	800d5a0 <__mcmp>
 800d5e6:	1e06      	subs	r6, r0, #0
 800d5e8:	d108      	bne.n	800d5fc <__mdiff+0x28>
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f7ff fdc1 	bl	800d174 <_Balloc>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fc:	bfa4      	itt	ge
 800d5fe:	4623      	movge	r3, r4
 800d600:	462c      	movge	r4, r5
 800d602:	4638      	mov	r0, r7
 800d604:	6861      	ldr	r1, [r4, #4]
 800d606:	bfa6      	itte	ge
 800d608:	461d      	movge	r5, r3
 800d60a:	2600      	movge	r6, #0
 800d60c:	2601      	movlt	r6, #1
 800d60e:	f7ff fdb1 	bl	800d174 <_Balloc>
 800d612:	692b      	ldr	r3, [r5, #16]
 800d614:	60c6      	str	r6, [r0, #12]
 800d616:	6926      	ldr	r6, [r4, #16]
 800d618:	f105 0914 	add.w	r9, r5, #20
 800d61c:	f104 0214 	add.w	r2, r4, #20
 800d620:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d624:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d628:	f100 0514 	add.w	r5, r0, #20
 800d62c:	f04f 0e00 	mov.w	lr, #0
 800d630:	f852 ab04 	ldr.w	sl, [r2], #4
 800d634:	f859 4b04 	ldr.w	r4, [r9], #4
 800d638:	fa1e f18a 	uxtah	r1, lr, sl
 800d63c:	b2a3      	uxth	r3, r4
 800d63e:	1ac9      	subs	r1, r1, r3
 800d640:	0c23      	lsrs	r3, r4, #16
 800d642:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d646:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d64a:	b289      	uxth	r1, r1
 800d64c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d650:	45c8      	cmp	r8, r9
 800d652:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d656:	4694      	mov	ip, r2
 800d658:	f845 3b04 	str.w	r3, [r5], #4
 800d65c:	d8e8      	bhi.n	800d630 <__mdiff+0x5c>
 800d65e:	45bc      	cmp	ip, r7
 800d660:	d304      	bcc.n	800d66c <__mdiff+0x98>
 800d662:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d666:	b183      	cbz	r3, 800d68a <__mdiff+0xb6>
 800d668:	6106      	str	r6, [r0, #16]
 800d66a:	e7c5      	b.n	800d5f8 <__mdiff+0x24>
 800d66c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d670:	fa1e f381 	uxtah	r3, lr, r1
 800d674:	141a      	asrs	r2, r3, #16
 800d676:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d680:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d684:	f845 3b04 	str.w	r3, [r5], #4
 800d688:	e7e9      	b.n	800d65e <__mdiff+0x8a>
 800d68a:	3e01      	subs	r6, #1
 800d68c:	e7e9      	b.n	800d662 <__mdiff+0x8e>

0800d68e <__d2b>:
 800d68e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d692:	460e      	mov	r6, r1
 800d694:	2101      	movs	r1, #1
 800d696:	ec59 8b10 	vmov	r8, r9, d0
 800d69a:	4615      	mov	r5, r2
 800d69c:	f7ff fd6a 	bl	800d174 <_Balloc>
 800d6a0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d6a4:	4607      	mov	r7, r0
 800d6a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6aa:	bb34      	cbnz	r4, 800d6fa <__d2b+0x6c>
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	f1b8 0300 	subs.w	r3, r8, #0
 800d6b2:	d027      	beq.n	800d704 <__d2b+0x76>
 800d6b4:	a802      	add	r0, sp, #8
 800d6b6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d6ba:	f7ff fe00 	bl	800d2be <__lo0bits>
 800d6be:	9900      	ldr	r1, [sp, #0]
 800d6c0:	b1f0      	cbz	r0, 800d700 <__d2b+0x72>
 800d6c2:	9a01      	ldr	r2, [sp, #4]
 800d6c4:	f1c0 0320 	rsb	r3, r0, #32
 800d6c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6cc:	430b      	orrs	r3, r1
 800d6ce:	40c2      	lsrs	r2, r0
 800d6d0:	617b      	str	r3, [r7, #20]
 800d6d2:	9201      	str	r2, [sp, #4]
 800d6d4:	9b01      	ldr	r3, [sp, #4]
 800d6d6:	61bb      	str	r3, [r7, #24]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	bf14      	ite	ne
 800d6dc:	2102      	movne	r1, #2
 800d6de:	2101      	moveq	r1, #1
 800d6e0:	6139      	str	r1, [r7, #16]
 800d6e2:	b1c4      	cbz	r4, 800d716 <__d2b+0x88>
 800d6e4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d6e8:	4404      	add	r4, r0
 800d6ea:	6034      	str	r4, [r6, #0]
 800d6ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d6f0:	6028      	str	r0, [r5, #0]
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	b003      	add	sp, #12
 800d6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6fe:	e7d5      	b.n	800d6ac <__d2b+0x1e>
 800d700:	6179      	str	r1, [r7, #20]
 800d702:	e7e7      	b.n	800d6d4 <__d2b+0x46>
 800d704:	a801      	add	r0, sp, #4
 800d706:	f7ff fdda 	bl	800d2be <__lo0bits>
 800d70a:	9b01      	ldr	r3, [sp, #4]
 800d70c:	617b      	str	r3, [r7, #20]
 800d70e:	2101      	movs	r1, #1
 800d710:	6139      	str	r1, [r7, #16]
 800d712:	3020      	adds	r0, #32
 800d714:	e7e5      	b.n	800d6e2 <__d2b+0x54>
 800d716:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d71a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d71e:	6030      	str	r0, [r6, #0]
 800d720:	6918      	ldr	r0, [r3, #16]
 800d722:	f7ff fdad 	bl	800d280 <__hi0bits>
 800d726:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d72a:	e7e1      	b.n	800d6f0 <__d2b+0x62>

0800d72c <_calloc_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	fb02 f401 	mul.w	r4, r2, r1
 800d732:	4621      	mov	r1, r4
 800d734:	f7fe f80e 	bl	800b754 <_malloc_r>
 800d738:	4605      	mov	r5, r0
 800d73a:	b118      	cbz	r0, 800d744 <_calloc_r+0x18>
 800d73c:	4622      	mov	r2, r4
 800d73e:	2100      	movs	r1, #0
 800d740:	f7fd ffb1 	bl	800b6a6 <memset>
 800d744:	4628      	mov	r0, r5
 800d746:	bd38      	pop	{r3, r4, r5, pc}

0800d748 <__sfputc_r>:
 800d748:	6893      	ldr	r3, [r2, #8]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	b410      	push	{r4}
 800d750:	6093      	str	r3, [r2, #8]
 800d752:	da08      	bge.n	800d766 <__sfputc_r+0x1e>
 800d754:	6994      	ldr	r4, [r2, #24]
 800d756:	42a3      	cmp	r3, r4
 800d758:	db01      	blt.n	800d75e <__sfputc_r+0x16>
 800d75a:	290a      	cmp	r1, #10
 800d75c:	d103      	bne.n	800d766 <__sfputc_r+0x1e>
 800d75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d762:	f7fe bdc7 	b.w	800c2f4 <__swbuf_r>
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	1c58      	adds	r0, r3, #1
 800d76a:	6010      	str	r0, [r2, #0]
 800d76c:	7019      	strb	r1, [r3, #0]
 800d76e:	4608      	mov	r0, r1
 800d770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <__sfputs_r>:
 800d776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d778:	4606      	mov	r6, r0
 800d77a:	460f      	mov	r7, r1
 800d77c:	4614      	mov	r4, r2
 800d77e:	18d5      	adds	r5, r2, r3
 800d780:	42ac      	cmp	r4, r5
 800d782:	d101      	bne.n	800d788 <__sfputs_r+0x12>
 800d784:	2000      	movs	r0, #0
 800d786:	e007      	b.n	800d798 <__sfputs_r+0x22>
 800d788:	463a      	mov	r2, r7
 800d78a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78e:	4630      	mov	r0, r6
 800d790:	f7ff ffda 	bl	800d748 <__sfputc_r>
 800d794:	1c43      	adds	r3, r0, #1
 800d796:	d1f3      	bne.n	800d780 <__sfputs_r+0xa>
 800d798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d79c <_vfiprintf_r>:
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	460c      	mov	r4, r1
 800d7a2:	b09d      	sub	sp, #116	; 0x74
 800d7a4:	4617      	mov	r7, r2
 800d7a6:	461d      	mov	r5, r3
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	b118      	cbz	r0, 800d7b4 <_vfiprintf_r+0x18>
 800d7ac:	6983      	ldr	r3, [r0, #24]
 800d7ae:	b90b      	cbnz	r3, 800d7b4 <_vfiprintf_r+0x18>
 800d7b0:	f7fd feb8 	bl	800b524 <__sinit>
 800d7b4:	4b7c      	ldr	r3, [pc, #496]	; (800d9a8 <_vfiprintf_r+0x20c>)
 800d7b6:	429c      	cmp	r4, r3
 800d7b8:	d158      	bne.n	800d86c <_vfiprintf_r+0xd0>
 800d7ba:	6874      	ldr	r4, [r6, #4]
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	0718      	lsls	r0, r3, #28
 800d7c0:	d55e      	bpl.n	800d880 <_vfiprintf_r+0xe4>
 800d7c2:	6923      	ldr	r3, [r4, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d05b      	beq.n	800d880 <_vfiprintf_r+0xe4>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d7cc:	2320      	movs	r3, #32
 800d7ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7d2:	2330      	movs	r3, #48	; 0x30
 800d7d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7d8:	9503      	str	r5, [sp, #12]
 800d7da:	f04f 0b01 	mov.w	fp, #1
 800d7de:	46b8      	mov	r8, r7
 800d7e0:	4645      	mov	r5, r8
 800d7e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d7e6:	b10b      	cbz	r3, 800d7ec <_vfiprintf_r+0x50>
 800d7e8:	2b25      	cmp	r3, #37	; 0x25
 800d7ea:	d154      	bne.n	800d896 <_vfiprintf_r+0xfa>
 800d7ec:	ebb8 0a07 	subs.w	sl, r8, r7
 800d7f0:	d00b      	beq.n	800d80a <_vfiprintf_r+0x6e>
 800d7f2:	4653      	mov	r3, sl
 800d7f4:	463a      	mov	r2, r7
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f7ff ffbc 	bl	800d776 <__sfputs_r>
 800d7fe:	3001      	adds	r0, #1
 800d800:	f000 80c2 	beq.w	800d988 <_vfiprintf_r+0x1ec>
 800d804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d806:	4453      	add	r3, sl
 800d808:	9309      	str	r3, [sp, #36]	; 0x24
 800d80a:	f898 3000 	ldrb.w	r3, [r8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 80ba 	beq.w	800d988 <_vfiprintf_r+0x1ec>
 800d814:	2300      	movs	r3, #0
 800d816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d81a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d81e:	9304      	str	r3, [sp, #16]
 800d820:	9307      	str	r3, [sp, #28]
 800d822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d826:	931a      	str	r3, [sp, #104]	; 0x68
 800d828:	46a8      	mov	r8, r5
 800d82a:	2205      	movs	r2, #5
 800d82c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d830:	485e      	ldr	r0, [pc, #376]	; (800d9ac <_vfiprintf_r+0x210>)
 800d832:	f7f2 fd5d 	bl	80002f0 <memchr>
 800d836:	9b04      	ldr	r3, [sp, #16]
 800d838:	bb78      	cbnz	r0, 800d89a <_vfiprintf_r+0xfe>
 800d83a:	06d9      	lsls	r1, r3, #27
 800d83c:	bf44      	itt	mi
 800d83e:	2220      	movmi	r2, #32
 800d840:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d844:	071a      	lsls	r2, r3, #28
 800d846:	bf44      	itt	mi
 800d848:	222b      	movmi	r2, #43	; 0x2b
 800d84a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d84e:	782a      	ldrb	r2, [r5, #0]
 800d850:	2a2a      	cmp	r2, #42	; 0x2a
 800d852:	d02a      	beq.n	800d8aa <_vfiprintf_r+0x10e>
 800d854:	9a07      	ldr	r2, [sp, #28]
 800d856:	46a8      	mov	r8, r5
 800d858:	2000      	movs	r0, #0
 800d85a:	250a      	movs	r5, #10
 800d85c:	4641      	mov	r1, r8
 800d85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d862:	3b30      	subs	r3, #48	; 0x30
 800d864:	2b09      	cmp	r3, #9
 800d866:	d969      	bls.n	800d93c <_vfiprintf_r+0x1a0>
 800d868:	b360      	cbz	r0, 800d8c4 <_vfiprintf_r+0x128>
 800d86a:	e024      	b.n	800d8b6 <_vfiprintf_r+0x11a>
 800d86c:	4b50      	ldr	r3, [pc, #320]	; (800d9b0 <_vfiprintf_r+0x214>)
 800d86e:	429c      	cmp	r4, r3
 800d870:	d101      	bne.n	800d876 <_vfiprintf_r+0xda>
 800d872:	68b4      	ldr	r4, [r6, #8]
 800d874:	e7a2      	b.n	800d7bc <_vfiprintf_r+0x20>
 800d876:	4b4f      	ldr	r3, [pc, #316]	; (800d9b4 <_vfiprintf_r+0x218>)
 800d878:	429c      	cmp	r4, r3
 800d87a:	bf08      	it	eq
 800d87c:	68f4      	ldreq	r4, [r6, #12]
 800d87e:	e79d      	b.n	800d7bc <_vfiprintf_r+0x20>
 800d880:	4621      	mov	r1, r4
 800d882:	4630      	mov	r0, r6
 800d884:	f7fe fd9a 	bl	800c3bc <__swsetup_r>
 800d888:	2800      	cmp	r0, #0
 800d88a:	d09d      	beq.n	800d7c8 <_vfiprintf_r+0x2c>
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d890:	b01d      	add	sp, #116	; 0x74
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	46a8      	mov	r8, r5
 800d898:	e7a2      	b.n	800d7e0 <_vfiprintf_r+0x44>
 800d89a:	4a44      	ldr	r2, [pc, #272]	; (800d9ac <_vfiprintf_r+0x210>)
 800d89c:	1a80      	subs	r0, r0, r2
 800d89e:	fa0b f000 	lsl.w	r0, fp, r0
 800d8a2:	4318      	orrs	r0, r3
 800d8a4:	9004      	str	r0, [sp, #16]
 800d8a6:	4645      	mov	r5, r8
 800d8a8:	e7be      	b.n	800d828 <_vfiprintf_r+0x8c>
 800d8aa:	9a03      	ldr	r2, [sp, #12]
 800d8ac:	1d11      	adds	r1, r2, #4
 800d8ae:	6812      	ldr	r2, [r2, #0]
 800d8b0:	9103      	str	r1, [sp, #12]
 800d8b2:	2a00      	cmp	r2, #0
 800d8b4:	db01      	blt.n	800d8ba <_vfiprintf_r+0x11e>
 800d8b6:	9207      	str	r2, [sp, #28]
 800d8b8:	e004      	b.n	800d8c4 <_vfiprintf_r+0x128>
 800d8ba:	4252      	negs	r2, r2
 800d8bc:	f043 0302 	orr.w	r3, r3, #2
 800d8c0:	9207      	str	r2, [sp, #28]
 800d8c2:	9304      	str	r3, [sp, #16]
 800d8c4:	f898 3000 	ldrb.w	r3, [r8]
 800d8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d8ca:	d10e      	bne.n	800d8ea <_vfiprintf_r+0x14e>
 800d8cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d8d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d2:	d138      	bne.n	800d946 <_vfiprintf_r+0x1aa>
 800d8d4:	9b03      	ldr	r3, [sp, #12]
 800d8d6:	1d1a      	adds	r2, r3, #4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	9203      	str	r2, [sp, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	bfb8      	it	lt
 800d8e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d8e4:	f108 0802 	add.w	r8, r8, #2
 800d8e8:	9305      	str	r3, [sp, #20]
 800d8ea:	4d33      	ldr	r5, [pc, #204]	; (800d9b8 <_vfiprintf_r+0x21c>)
 800d8ec:	f898 1000 	ldrb.w	r1, [r8]
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f7f2 fcfc 	bl	80002f0 <memchr>
 800d8f8:	b140      	cbz	r0, 800d90c <_vfiprintf_r+0x170>
 800d8fa:	2340      	movs	r3, #64	; 0x40
 800d8fc:	1b40      	subs	r0, r0, r5
 800d8fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d902:	9b04      	ldr	r3, [sp, #16]
 800d904:	4303      	orrs	r3, r0
 800d906:	f108 0801 	add.w	r8, r8, #1
 800d90a:	9304      	str	r3, [sp, #16]
 800d90c:	f898 1000 	ldrb.w	r1, [r8]
 800d910:	482a      	ldr	r0, [pc, #168]	; (800d9bc <_vfiprintf_r+0x220>)
 800d912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d916:	2206      	movs	r2, #6
 800d918:	f108 0701 	add.w	r7, r8, #1
 800d91c:	f7f2 fce8 	bl	80002f0 <memchr>
 800d920:	2800      	cmp	r0, #0
 800d922:	d037      	beq.n	800d994 <_vfiprintf_r+0x1f8>
 800d924:	4b26      	ldr	r3, [pc, #152]	; (800d9c0 <_vfiprintf_r+0x224>)
 800d926:	bb1b      	cbnz	r3, 800d970 <_vfiprintf_r+0x1d4>
 800d928:	9b03      	ldr	r3, [sp, #12]
 800d92a:	3307      	adds	r3, #7
 800d92c:	f023 0307 	bic.w	r3, r3, #7
 800d930:	3308      	adds	r3, #8
 800d932:	9303      	str	r3, [sp, #12]
 800d934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d936:	444b      	add	r3, r9
 800d938:	9309      	str	r3, [sp, #36]	; 0x24
 800d93a:	e750      	b.n	800d7de <_vfiprintf_r+0x42>
 800d93c:	fb05 3202 	mla	r2, r5, r2, r3
 800d940:	2001      	movs	r0, #1
 800d942:	4688      	mov	r8, r1
 800d944:	e78a      	b.n	800d85c <_vfiprintf_r+0xc0>
 800d946:	2300      	movs	r3, #0
 800d948:	f108 0801 	add.w	r8, r8, #1
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	4619      	mov	r1, r3
 800d950:	250a      	movs	r5, #10
 800d952:	4640      	mov	r0, r8
 800d954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d958:	3a30      	subs	r2, #48	; 0x30
 800d95a:	2a09      	cmp	r2, #9
 800d95c:	d903      	bls.n	800d966 <_vfiprintf_r+0x1ca>
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d0c3      	beq.n	800d8ea <_vfiprintf_r+0x14e>
 800d962:	9105      	str	r1, [sp, #20]
 800d964:	e7c1      	b.n	800d8ea <_vfiprintf_r+0x14e>
 800d966:	fb05 2101 	mla	r1, r5, r1, r2
 800d96a:	2301      	movs	r3, #1
 800d96c:	4680      	mov	r8, r0
 800d96e:	e7f0      	b.n	800d952 <_vfiprintf_r+0x1b6>
 800d970:	ab03      	add	r3, sp, #12
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	4622      	mov	r2, r4
 800d976:	4b13      	ldr	r3, [pc, #76]	; (800d9c4 <_vfiprintf_r+0x228>)
 800d978:	a904      	add	r1, sp, #16
 800d97a:	4630      	mov	r0, r6
 800d97c:	f7fd ffcc 	bl	800b918 <_printf_float>
 800d980:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d984:	4681      	mov	r9, r0
 800d986:	d1d5      	bne.n	800d934 <_vfiprintf_r+0x198>
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	065b      	lsls	r3, r3, #25
 800d98c:	f53f af7e 	bmi.w	800d88c <_vfiprintf_r+0xf0>
 800d990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d992:	e77d      	b.n	800d890 <_vfiprintf_r+0xf4>
 800d994:	ab03      	add	r3, sp, #12
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	4622      	mov	r2, r4
 800d99a:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <_vfiprintf_r+0x228>)
 800d99c:	a904      	add	r1, sp, #16
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f7fe fa5c 	bl	800be5c <_printf_i>
 800d9a4:	e7ec      	b.n	800d980 <_vfiprintf_r+0x1e4>
 800d9a6:	bf00      	nop
 800d9a8:	0800e7c8 	.word	0x0800e7c8
 800d9ac:	0800e94c 	.word	0x0800e94c
 800d9b0:	0800e7e8 	.word	0x0800e7e8
 800d9b4:	0800e7a8 	.word	0x0800e7a8
 800d9b8:	0800e952 	.word	0x0800e952
 800d9bc:	0800e956 	.word	0x0800e956
 800d9c0:	0800b919 	.word	0x0800b919
 800d9c4:	0800d777 	.word	0x0800d777

0800d9c8 <_read_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4c07      	ldr	r4, [pc, #28]	; (800d9e8 <_read_r+0x20>)
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	4608      	mov	r0, r1
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	6022      	str	r2, [r4, #0]
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f7f4 ff8c 	bl	80028f4 <_read>
 800d9dc:	1c43      	adds	r3, r0, #1
 800d9de:	d102      	bne.n	800d9e6 <_read_r+0x1e>
 800d9e0:	6823      	ldr	r3, [r4, #0]
 800d9e2:	b103      	cbz	r3, 800d9e6 <_read_r+0x1e>
 800d9e4:	602b      	str	r3, [r5, #0]
 800d9e6:	bd38      	pop	{r3, r4, r5, pc}
 800d9e8:	24000cbc 	.word	0x24000cbc

0800d9ec <_fstat_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4c07      	ldr	r4, [pc, #28]	; (800da0c <_fstat_r+0x20>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4605      	mov	r5, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	f7f4 ffa4 	bl	8002946 <_fstat>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d102      	bne.n	800da08 <_fstat_r+0x1c>
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	b103      	cbz	r3, 800da08 <_fstat_r+0x1c>
 800da06:	602b      	str	r3, [r5, #0]
 800da08:	bd38      	pop	{r3, r4, r5, pc}
 800da0a:	bf00      	nop
 800da0c:	24000cbc 	.word	0x24000cbc

0800da10 <_isatty_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4c06      	ldr	r4, [pc, #24]	; (800da2c <_isatty_r+0x1c>)
 800da14:	2300      	movs	r3, #0
 800da16:	4605      	mov	r5, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	6023      	str	r3, [r4, #0]
 800da1c:	f7f4 ffa3 	bl	8002966 <_isatty>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_isatty_r+0x1a>
 800da24:	6823      	ldr	r3, [r4, #0]
 800da26:	b103      	cbz	r3, 800da2a <_isatty_r+0x1a>
 800da28:	602b      	str	r3, [r5, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	24000cbc 	.word	0x24000cbc

0800da30 <__ascii_mbtowc>:
 800da30:	b082      	sub	sp, #8
 800da32:	b901      	cbnz	r1, 800da36 <__ascii_mbtowc+0x6>
 800da34:	a901      	add	r1, sp, #4
 800da36:	b142      	cbz	r2, 800da4a <__ascii_mbtowc+0x1a>
 800da38:	b14b      	cbz	r3, 800da4e <__ascii_mbtowc+0x1e>
 800da3a:	7813      	ldrb	r3, [r2, #0]
 800da3c:	600b      	str	r3, [r1, #0]
 800da3e:	7812      	ldrb	r2, [r2, #0]
 800da40:	1c10      	adds	r0, r2, #0
 800da42:	bf18      	it	ne
 800da44:	2001      	movne	r0, #1
 800da46:	b002      	add	sp, #8
 800da48:	4770      	bx	lr
 800da4a:	4610      	mov	r0, r2
 800da4c:	e7fb      	b.n	800da46 <__ascii_mbtowc+0x16>
 800da4e:	f06f 0001 	mvn.w	r0, #1
 800da52:	e7f8      	b.n	800da46 <__ascii_mbtowc+0x16>

0800da54 <__ascii_wctomb>:
 800da54:	b149      	cbz	r1, 800da6a <__ascii_wctomb+0x16>
 800da56:	2aff      	cmp	r2, #255	; 0xff
 800da58:	bf85      	ittet	hi
 800da5a:	238a      	movhi	r3, #138	; 0x8a
 800da5c:	6003      	strhi	r3, [r0, #0]
 800da5e:	700a      	strbls	r2, [r1, #0]
 800da60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800da64:	bf98      	it	ls
 800da66:	2001      	movls	r0, #1
 800da68:	4770      	bx	lr
 800da6a:	4608      	mov	r0, r1
 800da6c:	4770      	bx	lr
	...

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
